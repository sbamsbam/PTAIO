<!DOCTYPE html>
<html lang="en">

<head>
    <script src="/js/core/jquery.min.js"></script>
    <meta charset="utf-8"/>
    <meta name="csrf-token" content="C4mAPrTz1jLckYwIIJooVBmvCrx2bbCUPUIbjT6Q">

    <link rel="manifest" href="/manifest.json">

    <link rel="apple-touch-icon" sizes="76x76" href="/favicon.ico">
    <link rel="icon" type="image/png" href="/favicon.ico">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>

    
    <title>NMAP - Port-Scanning: A Practical Approach Modified for better</title>

    <!-- Prism code colouring -->
    <link rel="stylesheet" href="/css/prism.css">

    <!-- prism.js syntax highlighter -->
    <script src="/js/clipboard.js"></script>
    <script src="/js/prism.js"></script>

    <link rel="canonical" href="https://www.exploit-db.com/papers/35425">
    <meta name="description" content="NMAP - Port-Scanning: A Practical Approach Modified for better">
    <meta name="keywords" content="Multiple,papers">
    <meta name="author" content="Flor Ian">

    <meta property="og:title" content="NMAP - Port-Scanning: A Practical Approach Modified for better">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://www.exploit-db.com/exploits/35425">
    <meta property="og:image" content="https://www.exploit-db.com/images/spider-orange.png" />
    <meta property="og:site_name" content="Exploit Database" />
    <meta property="article:published_time" content="2014-12-02" />
        <meta property="article:author" content="Flor Ian" />
    <meta property="article:authorUrl" content="https://www.exploit-db.com/?author=7691" />

    <meta name="twitter:card" content="summary">
    <meta name="twitter:site" content="@ExploitDB">
    <meta name="twitter:title" content="NMAP - Port-Scanning: A Practical Approach Modified for better">
    <meta name="twitter:creator" content="@ExploitDB">
    <meta name="twitter:image:src" content="https://www.exploit-db.com/images/spider-orange.png">


    <link rel="alternate" type="application/rss+xml" title="Exploit-DB.com RSS Feed" href="/rss.xml">

    <meta
            content='width=device-width, initial-scale=1.0, shrink-to-fit=no'
            name='viewport'/>

    <meta property="og:title" content="Offensive Security&#8217;s Exploit Database Archive">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://www.exploit-db.com/">

    <meta name="theme-color" content="#ec5e10">

    <script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="5cfe7093-608f-4f4e-80b4-925b1e9d949f"
            data-georegions="{'region':'US-06','cbid':'6abbf59f-78fd-4d8f-ac7e-b57c0f046bbf'}" data-blockingmode="auto"
            type="text/javascript">
    </script>

    <script type="text/javascript">
        window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
        ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );

        ga('send', 'pageview');
    </script>
    <script async src="https://www.google-analytics.com/analytics.js"
            type="text/javascript">

    </script>

    <!-- Material Design Icons https://materialdesignicons.com/ -->
    <link href="/css/materialdesignicons.min.css" media="all" rel="stylesheet" type="text/css"/>

    <!-- Theme CSS Files -->
    <link href="/css/bootstrap.min.css" rel="stylesheet"/>

    <link href="/css/now-ui-dashboard.css" rel="stylesheet"/>

    <link href="/css/app.css" rel="stylesheet"/>

    <style>
        .rbtn {
            border: 2px solid white;
            border-radius: 20px;
            color: black;
            padding: 8px;
            cursor: pointer;
        }

        .rsuccess {
            border-color: white;
            color: white;
        }

        .rsuccess:hover {
            background-color: white;
            color: #165283;
        }
        .rprimary {
            border-color: #ca4f0c;
            color: #ca4f0c;
        }

        .rprimary:hover {
            background-color: #ca4f0c;
            color: white;
        }
    </style>
</head>

<body class=" sidebar-mini">

<div class="wrapper">

    
    <div class="sidebar" data-color="orange">

    <div class="logo">

        
        <a href="/" class="simple-text logo-mini">
            &nbsp;<img src="/images/spider-white.png" alt="Exploit Database">
        </a>

        
        
            <a href="/" class="simple-text logo-normal">
                Exploit Database
            </a>

        
    </div>

    <div class="sidebar-wrapper">

        <ul class="nav">

            
            <li class="">

                <a href="/">
                    <i class="mdi mdi-ladybug mdi-24px"></i>
                    <p>Exploits</p>
                </a>

            </li>

            
            <li class="">

                <a href="/google-hacking-database">
                    <i class="mdi mdi-search-web mdi-24px"></i>
                    <p title="Google Hacking Database">GHDB</p>
                </a>

            </li>

            
            <li class="active">

                <a href="/papers">
                    <i class="mdi mdi-file-outline mdi-24px"></i>
                    <p>Papers</p>
                </a>

            </li>

            
            <li class="">

                <a href="/shellcodes">
                    <i class="mdi mdi-chip mdi-24px"></i>
                    <p>Shellcodes</p>
                </a>

            </li>

        </ul>

        <hr/>

        <ul class="nav">



                <li>

                    <a class="nav-link" href="/search">
                        <i class="mdi mdi-database-search mdi-24px"></i>
                        <p title="Search Exploit-Database">Search EDB</p>
                    </a>

                </li>



            <li>

                
                <a class="nav-link" href="/searchsploit">
                    <i class="mdi mdi-book-open-page-variant mdi-24px"></i>
                    <p>SearchSploit Manual</p>
                </a>

            </li>

            <li>

                
                <a class="nav-link" href="/submit">
                    <i class="mdi mdi-upload mdi-24px"></i>
                    <p>Submissions</p>
                </a>

            </li>

        </ul>

        <hr/>

        <ul class="nav">

            <li>

                <a data-toggle="collapse" href="#onlineTraining" aria-expanded="false">
                    <i class="mdi mdi-school mdi-24px"></i>
                    <p>Online Training <b class="caret"></b></p>
                </a>

                <div class="collapse " id="onlineTraining">
                    <ul class="nav">

                        <li>
                            <a href="/pentest-training-with-kali-linux">
                                <span class="sidebar-mini-icon">PWK</span>
                                <span class="sidebar-normal" title="Penetration Testing with Kali Linux"> PEN-200 </span>
                            </a>
                        </li>
                        <li>
                            <a href="/wireless-attacks-training">
                                <span class="sidebar-mini-icon">WiFu</span>
                                <span class="sidebar-normal" title="Offensive Security Wireless Attacks"> PEN-210 </span>
                            </a>
                        </li>
                        <li>
                            <a href="/evasion-techniques-breaching-defenses">
                                <span class="sidebar-mini-icon">ETBD</span>
                                <span class="sidebar-normal" title="Evasion Techniques and Breaching Defenses"> PEN-300 </span>
                            </a>
                        </li>
                        <li>
                            <a href="/advanced-web-attacks">
                                <span class="sidebar-mini-icon">AWAE</span>
                                <span class="sidebar-normal" title="Advanced Web Attacks and Exploitation"> WEB-300 </span>
                            </a>
                        </li>
                        <li>
                            <a href="/windows-user-mode-exploit-development">
                                <span class="sidebar-mini-icon">WUMED</span>
                                <span class="sidebar-normal" title="Windows User Mode Exploit Development"> EXP-301 </span>
                            </a>
                        </li>
                    </ul>

                </div>

            </li>

<!--
            <li>

                <a class="nav-link" href="#" data-toggle="modal" data-target="#osresources">
                    <i class="mdi mdi-link-variant mdi-24px"></i>
                    <p>Offsec Resources</p>
                </a>

            </li>
-->
        </ul>

    </div>

</div>

    <div class="main-panel">

        
        <nav class="navbar navbar-expand-lg navbar-transparent  navbar-absolute
  bg-primary">

    <div class="container-fluid">

        <div class="navbar-wrapper">

            <div class="navbar-toggle">
                <button type="button" class="navbar-toggler" aria-label="Toggle Navigation">
                    <span class="navbar-toggler-bar bar1"></span>
                    <span class="navbar-toggler-bar bar2"></span>
                    <span class="navbar-toggler-bar bar3"></span>
                </button>
            </div>

            
            <a class="navbar-brand" href="/">
                <img src="/images/edb-banner-logo-white.png" height="60" alt="Exploit Database">
            </a>

        </div>

        
        <div class="collapse navbar-collapse justify-content-end" id="navigation">

            <ul class="navbar-nav">

                
                    

                        
                           
                           

                            
                            
                                
                            
                        

                        

                            
                                
                            

                            
                               
                                                     
                                
                            

                            
                                
                            

                        
                    
                

                
                    

                        
                            
                            
                                
                            
                        

                    
                

                <li class="nav-item">

                    
                    <a class="nav-link" href="/exploit-database-statistics" aria-label="Exploit Database Statistics">
                        <i class="mdi mdi-chart-bar-stacked mdi-24px"></i>
                        <p>
                            <span class="d-lg-none d-md-block">Stats</span>
                        </p>
                    </a>

                </li>

                <li class="nav-item dropdown">

                    
                    <a class="nav-link dropdown-toggle" href="/"
                       id="navbarDropdownMenuLink" data-toggle="dropdown"
                       aria-haspopup="true" aria-expanded="false" aria-label="Site Information">

                        <i class="mdi mdi-information-outline mdi-24px"></i>
                        <p>
                            <span class="d-lg-none d-md-block">About Us</span>
                        </p>
                    </a>

                    <div class="dropdown-menu dropdown-menu-right"
                         aria-labelledby="navbarDropdownMenuLink">

                        <a class="dropdown-item" href="#" data-toggle="modal" data-target="#about" aria-label="About Exploit-DB">
                            About Exploit-DB
                        </a>

                        <a class="dropdown-item" href="/history" aria-label="Exploit-DB History">
                            Exploit-DB History
                        </a>

                        <a class="dropdown-item" href="/faq" aria-label="FAQ">
                            FAQ
                        </a>

                    </div>

                </li>

                
                                    <li class="nav-item">

                        <a class="nav-link" href="#" data-toggle="modal" data-target="#search" aria-label="Search Exploit-DB">
                            <i class="mdi mdi-database-search mdi-24px"></i>
                            <p>
                                <span class="d-lg-none d-md-block">Search</span>
                            </p>
                        </a>

                    </li>

                
            </ul>

        </div>

    </div>

</nav>

        
        
    <div class="panel-header panel-header-sm"></div>

    <div class="content">

        <div class="row">

            <div class="col-md-12">

                
                <div class="card">

                    <div class="card-body">

                        <div class="row justify-content-md-center">

                            
                            <h1 class="card-title text-secondary text-center" style="font-size: 2.5em;">
                                NMAP - Port-Scanning: A Practical Approach Modified for better
                            </h1>

                        </div>

                        
                        <div class="ml-2 mr-2">

                            <div class="row">

                                <div class="col-sm-12 col-md-4">

                                    <div class="card card-stats">

                                        <div class="card-body ">

                                            <div class="statistics statistics-horizontal">

                                                <div class="info info-horizontal">

                                                    <div class="row">

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                EDB-ID:
                                                            </h3>

                                                            <h6 class="stats-title">
                                                                35425
                                                            </h6>

                                                        </div>

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                CVE:
                                                            </h3>

                                                            <h6 class="stats-title">

                                                                                                                                        N/A

                                                                
                                                            </h6>

                                                        </div>

                                                    </div>

                                                </div>

                                            </div>

                                        </div>

                                        <hr>

                                        <div class="card-footer ">

                                            <div class="stats h6 text-center">

                                                <!-- Display a checkmark if the exploit is verified and an X if not -->
                                                <strong>EDB Verified:</strong>
                                                <i class="mdi mdi-24px mdi-check"
                                                   style="color: #96b365">
                                                </i>

                                            </div>

                                        </div>

                                    </div>

                                </div>

                                <div class="col-sm-12 col-md-4">

                                    <div class="card card-stats">

                                        <div class="card-body ">

                                            <div class="statistics statistics-horizontal">

                                                <div class="info info-horizontal">

                                                    <div class="row">

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                Author:
                                                            </h3>

                                                            <h6 class="stats-title">

                                                                <a href="/?author=7691">
                                                                    Flor Ian
                                                                </a>

                                                            </h6>

                                                        </div>

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                Type:
                                                            </h3>

                                                            <h6 class="stats-title">

                                                                <a href="/?type=papers">
                                                                    papers
                                                                </a>

                                                            </h6>

                                                        </div>

                                                    </div>

                                                </div>

                                            </div>

                                        </div>

                                        <hr/>

                                        <div class="card-footer">

                                            <div class="stats h6 text-center">

                                                <!-- Display a checkmark if the exploit is verified and an X if not -->
                                                <strong>Paper: </strong>
                                                <a href="/download/35425" data-toggle="tooltip" data-placement="top"
                                                   title="Download" aria-label="Download Paper 35425">
                                                    <i class="mdi mdi-download mdi-24px text-primary"></i>
                                                </a>
                                                &nbsp; / &nbsp;
                                                <a href="/raw/35425" data-toggle="tooltip" data-placement="top"
                                                   title="View Raw" aria-label="View Raw 35425">
                                                    <i class="mdi mdi-code-braces mdi-24px text-primary"></i>
                                                </a>

                                            </div>

                                        </div>

                                    </div>

                                </div>

                                <div class="col-sm-12 col-md-4">

                                    <div class="card card-stats">

                                        <div class="card-body ">

                                            <div class="statistics statistics-horizontal">

                                                <div class="info info-horizontal">

                                                    <div class="row">

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                Platform:
                                                            </h3>

                                                            <h6 class="stats-title">

                                                                <a href="/?platform=multiple">
                                                                    Multiple
                                                                </a>

                                                            </h6>

                                                        </div>

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                Published:
                                                            </h3>

                                                            <h6 class="stats-title">
                                                                2014-12-02
                                                            </h6>

                                                        </div>

                                                    </div>

                                                </div>

                                            </div>

                                        </div>

                                        <hr/>

                                        <div class="card-footer ">

                                            <div class="stats h6 text-center">

                                                
                                                <strong>Vulnerable App:</strong>

                                                
                                            </div>

                                        </div>

                                    </div>

                                </div>

                            </div>

                            <div class="row">

                                <div class="btn-group ml-3">

                                    <a class="btn btn-primary btn-fab btn-icon btn-round"
                                       href="/papers/35390" aria-label="View Previous Paper"
                                       data-toggle="tooltip" data-placement="top" title="Previous Paper" >
                                        <i class="mdi mdi-arrow-left mdi-36px"></i>
                                    </a>

                                </div>


                                <div class="col">

                                    <div class="btn-group float-right">

                                        <a class="btn btn-primary btn-fab btn-icon btn-round"
                                           href="/papers/35458" aria-label="View Next Paper"
                                           data-toggle="tooltip" data-placement="top" title="Next Paper" >
                                            <i class="mdi mdi-arrow-right mdi-36px"></i>
                                        </a>

                                    </div>

                                </div>

                            </div>

                        </div>

                    </div>

                </div>

                
                <div class="card">

                    <div class="card-body">

                        
                        <pre><code class="language-txt" style="white-space: pre-wrap;">----Port-Scanning: A Practical Approach Modified for better
-----------------------------------------------------------
I accept that when i got this file that was called nmapguide.txt it is written by Doug Hoyte a senior programmer and i liked to add some information for the past years
that nmap has been a evolution on protscanning since 1997.I have added here the mos used commands for penetesters and so on for hackers.Im not saying that im helping 
hackers or the bad guys to get into systemsor get into troubles, this is a paper that should be read very carefully.It has too many infos for you........

Thanks 
Version 2.0
I took at about 7 days to edit, add, remove, and unduplicate the information.
Port Scanning is not a crime and will not be till the end.
Author(s):
------|Florian MINDZSEC|---------- - Skilled Programmer

------------------------------
* Introduction
* History
* What can nmap Do:
* Your arsenal
* Fundamentals
* Port scanning
* Practical Scanning
* Scanning with NEW Scripts
* Cheat Sheet
* Nmap in your hands
* Script Engine Scanning
------------------------------

Introduction
------------

Often times it is useful, even necessary, to gather as much information as possible
about a remote target. This includes learning all of their network &quot;points of entry&quot;,
the operating systems used, firewalling methods employed, services running, etc.

Note that while it certainly is possible to portscan with a windows machine, I will
be focusing on using a unix machine with certain utilities installed. This is due to
Windows&#039; lack of raw socket access (pre Win2K) and the lack of decent, free, portscanners
availble for the platform. In the next section I will share some useful pointers on portscanning. 
Note that root level access is required on your unix machine for many scans.

History
-------
The nmap is first released in 1997 in Phrack Magazine issue 51, article 11.
Some information:[ Abstract ]

This paper details many of the techniques used to determine what ports (or
similar protocol abstraction) of a host are listening for connections.  These 
ports represent potential communication channels.  Mapping their existence
facilitates the exchange of information with the host, and thus it is quite 
useful for anyone wishing to explore their networked environment, including 
hackers.  Despite what you have heard from the media, the Internet is NOT
all about TCP port 80.  Anyone who relies exclusively on the WWW for
information gathering is likely to gain the same level of proficiency as your 
average AOLer, who does the same.  This paper is also meant to serve as an
introduction to and ancillary documentation for a coding project I have been 
working on.  It is a full featured, robust port scanner which (I hope) solves 
some of the problems I have encountered when dealing with other scanners and 
when working to scan massive networks.  The tool, nmap, supports the following:

    - vanilla TCP connect() scanning, 
    - TCP SYN (half open) scanning,
    - TCP FIN (stealth) scanning, 
    - TCP ftp proxy (bounce attack) scanning
    - SYN/FIN scanning using IP fragments (bypasses packet filters),
    - UDP recvfrom() scanning, 
    - UDP raw ICMP port unreachable scanning, 
    - ICMP scanning (ping-sweep), and
    - reverse-ident scanning.

The freely distributable source code is appended to this paper.



[ Introduction ]

Scanning, as a method for discovering exploitable communication channels, has
been around for ages.  The idea is to probe as many listeners as possible, and
keep track of the ones that are receptive or useful to your particular need.
Much of the field of advertising is based on this paradigm, and the &quot;to current
resident&quot; brute force style of bulk mail is an almost perfect parallel to what
we will discuss.  Just stick a message in every mailbox and wait for the
responses to trickle back.

Scanning entered the h/p world along with the phone systems.  Here we have this
tremendous global telecommunications network, all reachable through codes on 
our telephone.  Millions of numbers are reachable locally, yet we may only
be interested in 0.5% of these numbers, perhaps those that answer with a 
carrier.

The logical solution to finding those numbers that interest us is to try them
all.  Thus the field of &quot;wardialing&quot; arose.  Excellent programs like Toneloc
were developed to facilitate the probing of entire exchanges and more.  The
basic idea is simple.  If you dial a number and your modem gives you a CONNECT,
you record it.  Otherwise the computer hangs up and tirelessly dials the next 
one.

While wardialing is still useful, we are now finding that many of the computers
we wish to communicate with are connected through networks such as the Internet
rather than analog phone dialups.  Scanning these machines involves the same
brute force technique.  We send a blizzard of packets for various protocols,
and we deduce which services are listening from the responses we receive (or
don&#039;t receive).



[ Techniques ]

Over time, a number of techniques have been developed for surveying the
protocols and ports on which a target machine is listening.  They all offer
different benefits and problems.  Here is a line up of the most common:

- TCP connect() scanning : This is the most basic form of TCP scanning.  The
connect() system call provided by your operating system is used to open a
connection to every interesting port on the machine.  If the port is listening,
connect() will succeed, otherwise the port isn&#039;t reachable.  One strong
advantage to this technique is that you don&#039;t need any special privileges.  Any
user on most UNIX boxes is free to use this call.  Another advantage is speed.
While making a separate connect() call for every targeted port in a linear
fashion would take ages over a slow connection, you can hasten the scan by
using many sockets in parallel.  Using non-blocking I/O allows you to set a low
time-out period and watch all the sockets at once.  This is the fastest
scanning method supported by nmap, and is available with the -t (TCP) option.
The big downside is that this sort of scan is easily detectable and filterable.
The target hosts logs will show a bunch of connection and error messages for
the services which take the connection and then have it immediately shutdown.


- TCP SYN scanning : This technique is often referred to as &quot;half-open&quot;
scanning, because you don&#039;t open a full TCP connection.  You send a SYN packet,
as if you are going to open a real connection and wait for a response.  A
SYN|ACK indicates the port is listening.  A RST is indicative of a non-
listener.  If a SYN|ACK is received, you immediately send a RST to tear down
the connection (actually the kernel does this for us).  The primary advantage
to this scanning technique is that fewer sites will log it.  Unfortunately you
need root privileges to build these custom SYN packets.  SYN scanning is the -s
option of nmap.


- TCP FIN scanning : There are times when even SYN scanning isn&#039;t clandestine
enough.  Some firewalls and packet filters watch for SYNs to an unallowed port,
and programs like synlogger and Courtney are available to detect these scans.
FIN packets, on the other hand, may be able to pass through unmolested.  This
scanning technique was featured in detail by Uriel Maimon in Phrack 49, article
15.  The idea is that closed ports tend to reply to your FIN packet with the
proper RST.  Open ports, on the other hand, tend to ignore the packet in
question.  This is a bug in TCP implementations and so it isn&#039;t 100% reliable
(some systems, notably Micro$oft boxes, seem to be immune).  It works well on
most other systems I&#039;ve tried.  FIN scanning is the -U (Uriel) option of nmap.


- Fragmentation scanning : This is not a new scanning method in and of itself,
but a modification of other techniques.  Instead of just sending the probe
packet, you break it into a couple of small IP fragments.  You are splitting 
up the TCP header over several packets to make it harder for packet filters 
and so forth to detect what you are doing.  Be careful with this!  Some
programs have trouble handling these tiny packets.  My favorite sniffer
segmentation faulted immediately upon receiving the first 36-byte fragment.  
After that comes a 24 byte one!  While this method won&#039;t get by packet filters
and firewalls that queue all IP fragments (like the CONFIG_IP_ALWAYS_DEFRAG 
option in Linux), a lot of networks can&#039;t afford the performance hit this
causes.  This feature is rather unique to scanners (at least I haven&#039;t seen 
any others that do this).  Thanks to daemon9 for suggesting it.  The -f
instructs the specified SYN or FIN scan to use tiny fragmented packets.


- TCP reverse ident scanning : As noted by Dave Goldsmith in a 1996 Bugtraq
post, the ident protocol (rfc1413) allows for the disclosure of the username of
the owner of any process connected via TCP, even if that process didn&#039;t 
initiate the connection.  So you can, for example, connect to the http port 
and then use identd to find out whether the server is running as root.  This 
can only be done with a full TCP connection to the target port (i.e. the -t
option).  nmap&#039;s -i option queries identd for the owner of all listen()ing
ports.


- FTP bounce attack : An interesting &quot;feature&quot; of the ftp protocol (RFC 959) is
support for &quot;proxy&quot; ftp connections.  In other words, I should be able to
connect from evil.com to the FTP server-PI (protocol interpreter) of target.com
to establish the control communication connection.  Then I should be able to
request that the server-PI initiate an active server-DTP (data transfer
process) to send a file ANYWHERE on the internet!  Presumably to a User-DTP,
although the RFC specifically states that asking one server to send a file to
another is OK.  Now this may have worked well in 1985 when the RFC was just
written.  But nowadays, we can&#039;t have people hijacking ftp servers and
requesting that data be spit out to arbitrary points on the internet.  As
*Hobbit* wrote back in 1995, this protocol flaw &quot;can be used to post virtually
untraceable mail and news, hammer on servers at various sites, fill up disks,
try to hop firewalls, and generally be annoying and hard to track down at the
same time.&quot;  What we will exploit this for is to (surprise, surprise) scan TCP
ports from a &quot;proxy&quot; ftp server.  Thus you could connect to an ftp server
behind a firewall, and then scan ports that are more likely to be blocked (139
is a good one).  If the ftp server allows reading from and writing to a
directory (such as /incoming), you can send arbitrary data to ports that you do
find open.

For port scanning, our technique is to use the PORT command to declare that
our passive &quot;User-DTP&quot; is listening on the target box at a certain port number.
 Then we try to LIST the current directory, and the result is sent over the
Server-DTP channel.  If our target host is listening on the specified port, the
transfer will be successful (generating a 150 and a 226 response).  Otherwise
we will get &quot;425 Can&#039;t build data connection: Connection refused.&quot;  Then we
issue another PORT command to try the next port on the target host.  The
advantages to this approach are obvious (harder to trace, potential to bypass
firewalls).  The main disadvantages are that it is slow, and that some FTP
servers have finally got a clue and disabled the proxy &quot;feature&quot;.  For what it
is worth, here is a list of banners from sites where it does/doesn&#039;t work:

*Bounce attacks worked:*

220 xxxxxxx.com FTP server (Version wu-2.4(3) Wed Dec 14 ...) ready.
220 xxx.xxx.xxx.edu FTP server ready.
220 xx.Telcom.xxxx.EDU FTP server (Version wu-2.4(3) Tue Jun 11 ...) ready.
220 lem FTP server (SunOS 4.1) ready.
220 xxx.xxx.es FTP server (Version wu-2.4(11) Sat Apr 27 ...) ready.
220 elios FTP server (SunOS 4.1) ready

*Bounce attack failed:*

220 wcarchive.cdrom.com FTP server (Version DG-2.0.39 Sun May 4 ...) ready.
220 xxx.xx.xxxxx.EDU Version wu-2.4.2-academ[BETA-12](1) Fri Feb 7
220 ftp Microsoft FTP Service (Version 3.0).
220 xxx FTP server (Version wu-2.4.2-academ[BETA-11](1) Tue Sep 3 ...) ready.
220 xxx.unc.edu FTP server (Version wu-2.4.2-academ[BETA-13](6) ...) ready.

The &#039;x&#039;s are partly there to protect those guilty of running a flawed server,
but mostly just to make the lines fit in 80 columns.  Same thing with the
ellipse points.  The bounce attack is available with the -b &lt;proxy_server&gt;
option of nmap.  proxy_server can be specified in standard URL format,
username:password@server:port , with everything but server being optional.


- UDP ICMP port unreachable scanning : This scanning method varies from the
above in that we are using the UDP protocol instead of TCP.  While this
protocol is simpler, scanning it is actually significantly more difficult.
This is because open ports don&#039;t have to send an acknowledgement in response to
our probe, and closed ports aren&#039;t even required to send an error packet.
Fortunately, most hosts do send an ICMP_PORT_UNREACH error when you send a
packet to a closed UDP port.  Thus you can find out if a port is NOT open, and
by exclusion determine which ports which are.  Neither UDP packets, nor the
ICMP errors are guaranteed to arrive, so UDP scanners of this sort must also
implement retransmission of packets that appear to be lost (or you will get a
bunch of false positives).  Also, this scanning technique is slow because of
compensation for machines that took RFC 1812 section 4.3.2.8 to heart and limit
ICMP error message rate.  For example, the Linux kernel (in net/ipv4/icmp.h)
limits destination unreachable message generation to 80 per 4 seconds, with a
1/4 second penalty if that is exceeded.  At some point I will add a better
algorithm to nmap for detecting this.  Also, you will need to be root for
access to the raw ICMP socket necessary for reading the port unreachable.  The
-u (UDP) option of nmap implements this scanning method for root users.

Some people think UDP scanning is lame and pointless.  I usually remind them of
the recent Solaris rcpbind hole.  Rpcbind can be found hiding on an
undocumented UDP port somewhere above 32770.  So it doesn&#039;t matter that 111 is
blocked by the firewall.  But can you find which of the more than 30,000 high
ports it is listening on?  With a UDP scanner you can!


- UDP recvfrom() and write() scanning : While non-root users can&#039;t read
port unreachable errors directly, Linux is cool enough to inform the user
indirectly when they have been received.  For example a second write()
call to a closed port will usually fail.  A lot of scanners such as netcat
and Pluvius&#039; pscan.c does this.  I have also noticed that recvfrom() on
non-blocking UDP sockets usually return EAGAIN (&quot;Try Again&quot;, errno 13) if
the ICMP error hasn&#039;t been received, and ECONNREFUSED (&quot;Connection refused&quot;, 
errno 111) if it has.  This is the technique used for determining open ports 
when non-root users use -u (UDP).  Root users can also use the -l (lamer
UDP scan) options to force this, but it is a really dumb idea.


- ICMP echo scanning : This isn&#039;t really port scanning, since ICMP doesn&#039;t have
a port abstraction.  But it is sometimes useful to determine what hosts in a
network are up by pinging them all.  the -P option does this.  Also you might
want to adjust the PING_TIMEOUT #define if you are scanning a large
network. nmap supports a host/bitmask notation to make this sort of thing
easier.  For example &#039;nmap -P cert.org/24 152.148.0.0/16&#039; would scan CERT&#039;s
class C network and whatever class B entity 152.148.* represents.  Host/26 is
useful for 6-bit subnets within an organization.



[ Features ]

Prior to writing nmap, I spent a lot of time with other scanners exploring the
Internet and various private networks (note the avoidance of the &quot;intranet&quot;
buzzword).  I have used many of the top scanners available today, including
strobe by Julian Assange, netcat by *Hobbit*, stcp by Uriel Maimon, pscan by
Pluvius, ident-scan by Dave Goldsmith, and the SATAN tcp/udp scanners by
Wietse Venema.  These are all excellent scanners!  In fact, I ended up hacking
most of them to support the best features of the others.  Finally I decided
to write a whole new scanner, rather than rely on hacked versions of a dozen
different scanners in my /usr/local/sbin.  While I wrote all the code, nmap
uses a lot of good ideas from its predecessors.  I also incorporated some new
stuff like fragmentation scanning and options that were on my &quot;wish list&quot; for
other scanners.  Here are some of the (IMHO) useful features of nmap:

- dynamic delay time calculations: Some scanners require that you supply a
delay time between sending packets.  Well how should I know what to use?
Sure, I can ping them, but that is a pain, and plus the response time of many
hosts changes dramatically when they are being flooded with requests.  nmap
tries to determine the best delay time for you.  It also tries to keep track
of packet retransmissions, etc. so that it can modify this delay time during
the course of the scan.  For root users, the primary technique for finding an
initial delay is to time the internal &quot;ping&quot; function.  For non-root users, it
times an attempted connect() to a closed port on the target.  It can also pick
a reasonable default value.  Again, people who want to specify a delay
themselves can do so with -w (wait), but you shouldn&#039;t have to.

- retransmission: Some scanners just send out all the query packets, and
collect the responses.  But this can lead to false positives or negatives in
the case where packets are dropped.  This is especially important for
&quot;negative&quot; style scans like UDP and FIN, where what you are looking for is a
port that does NOT respond.  In most cases, nmap implements a configurable
number of retransmissions for ports that don&#039;t respond.

- parallel port scanning:  Some scanners simply scan ports linearly, one at a
time, until they do all 65535.  This actually works for TCP on a very fast 
local network, but the speed of this is not at all acceptable on a wide area 
network like the Internet.  nmap uses non-blocking i/o and parallel scanning 
in all TCP and UDP modes.  The number of scans in parallel is configurable
with the -M (Max sockets) option.  On a very fast network you will actually 
decrease performance if you do more than 18 or so.  On slow networks, high
values increase performance dramatically.

- Flexible port specification:  I don&#039;t always want to just scan all 65535
ports.  Also, the scanners which only allow you to scan ports 1 - N sometimes 
fall short of my need.  The -p option allows you to specify an arbitrary
number of ports and ranges for scanning.  For example, &#039;-p 21-25,80,113,
60000-&#039; does what you would expect (a trailing hyphen means up to 65536, a
leading hyphen means 1 through).  You can also use the -F (fast) option, which
scans all the ports registered in your /etc/services (a la strobe).

- Flexible target specification:  I often want to scan more then one host,
and I certainly don&#039;t want to list every single host on a large network to
scan.  Everything that isn&#039;t an option (or option argument) in nmap is
treated as a target host.  As mentioned before, you can optionally append
/mask to a hostname or IP address in order to scan all hosts with the same
initial &lt;mask&gt; bits of the 32 bit IP address.

- detection of down hosts:  Some scanners allow you to scan large networks, but
they waste a huge amount of time scanning 65535 ports of a dead host!  By
default, nmap pings each host to make sure it is up before wasting time on it.
It is also capable of bailing on hosts that seem down based on strange port
scanning errors.  It is also meant to be tolerant of people who accidentally scan
network addresses, broadcast addresses, etc.

- detection of your IP address: For some reason, a lot of scanners ask you to
type in your IP address as one of the parameters.  Jeez, I don&#039;t want to have
to &#039;ifconfig&#039; and figure out my current address every time I scan.  Of course,
this is better then the scanners I&#039;ve seen which require recompilation every
time you change your address!  nmap first tries to detect your address during
the ping stage.  It uses the address that the echo response is received on, as
that is the interface it should almost always be routed through.  If it can&#039;t
do this (like if you don&#039;t have host pinging enabled), nmap tries to detect
your primary interface and uses that address.  You can also use -S to specify
it directly, but you shouldn&#039;t have to (unless you want to make it look like
someone ELSE is SYN or FIN scanning a host.


Some other, more minor options:

 -v (verbose): This is highly recommended for interactive use.  Among other
useful messages, you will see ports come up as they are found, rather than
having to wait for the sorted summary list.

 -r (randomize): This will randomize the order in which the target host&#039;s
ports are scanned.

 -q (quash argv): This changes argv[0] to FAKE_ARGV (&quot;pine&quot; by default).
It also eliminates all other arguments, so you won&#039;t look too suspicious in
&#039;w&#039; or &#039;ps&#039; listings.

 -h for an options summary.


&lt;++&gt; nmap/Makefile
# A trivial makefile for Network Mapper
nmap: nmap.c nmap.h
	gcc -Wall -O6 -o nmap nmap.c -lm
&lt;--&gt;

&lt;++&gt; nmap/nmap.h
#ifndef NMAP_H
#define NMAP_H

/************************INCLUDES**********************************/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;rpc/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/socket.h&gt; 
#include &lt;sys/stat.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netdb.h&gt;
#include &lt;time.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;signal.h&gt; 
#include &lt;signal.h&gt;
#include &lt;linux/ip.h&gt; /*&lt;netinet/ip.h&gt;*/
#include &lt;linux/icmp.h&gt; /*&lt;netinet/ip_icmp.h&gt;*/
#include &lt;arpa/inet.h&gt;
#include &lt;math.h&gt;
#include &lt;time.h&gt;
#include &lt;sys/time.h&gt; 
#include &lt;asm/byteorder.h&gt;
#include &lt;netinet/ip_tcp.h&gt;

/************************DEFINES************************************/

/* #define to zero if you don&#039;t want to	ignore hosts of the form 
   xxx.xxx.xxx.{0,255} (usually network and broadcast addresses) */
#define IGNORE_ZERO_AND_255_HOSTS 1

#define DEBUGGING 0

/* Default number of ports in paralell.  Doesn&#039;t always involve actual 
   sockets.  Can also adjust with the -M command line option.  */
#define MAX_SOCKETS 36 
/* If reads of a UDP port keep returning EAGAIN (errno 13), do we want to 
   count the port as valid? */
#define RISKY_UDP_SCAN 0
 /* This ideally should be a port that isn&#039;t in use for any protocol on our machine or on the target */ 
#define MAGIC_PORT 49724
/* How many udp sends without a ICMP port unreachable error does it take before we consider the port open? */
#define UDP_MAX_PORT_RETRIES 4
 /*How many seconds before we give up on a host being alive? */
#define PING_TIMEOUT 2
#define FAKE_ARGV &quot;pine&quot; /* What ps and w should show if you use -q */
/* How do we want to log into ftp sites for */ 
#define FTPUSER &quot;anonymous&quot;
#define FTPPASS &quot;-wwwuser@&quot;
#define FTP_RETRIES 2 /* How many times should we relogin if we lose control
                         connection? */

#define UC(b)   (((int)b)&amp;0xff)
#define MORE_FRAGMENTS 8192 /*NOT a user serviceable parameter*/
#define fatal(x) { fprintf(stderr, &quot;%s\n&quot;, x); exit(-1); }
#define error(x) fprintf(stderr, &quot;%s\n&quot;, x);

/***********************STRUCTURES**********************************/

typedef struct port {
  unsigned short portno;
  unsigned char proto;
  char *owner;
  struct port *next;
} port;

struct ftpinfo {
  char user[64];
  char pass[256]; /* methinks you&#039;re paranoid if you need this much space */
  char server_name[MAXHOSTNAMELEN + 1];
  struct in_addr server;
  unsigned short port;
  int sd; /* socket descriptor */
};

typedef port *portlist;

/***********************PROTOTYPES**********************************/

/* print usage information */
void printusage(char *name);

/* our scanning functions */
portlist tcp_scan(struct in_addr target, unsigned short *portarray, 
		  portlist *ports);
portlist syn_scan(struct in_addr target, unsigned short *portarray,
		  struct in_addr *source, int fragment, portlist *ports);
portlist fin_scan(struct in_addr target, unsigned short *portarray,
		  struct in_addr *source, int fragment, portlist *ports);
portlist udp_scan(struct in_addr target, unsigned short *portarray,
		  portlist *ports);
portlist lamer_udp_scan(struct in_addr target, unsigned short *portarray,
			portlist *ports);
portlist bounce_scan(struct in_addr target, unsigned short *portarray,
		     struct ftpinfo *ftp, portlist *ports);

/* Scan helper functions */
unsigned long calculate_sleep(struct in_addr target);
int check_ident_port(struct in_addr target);
int getidentinfoz(struct in_addr target, int localport, int remoteport,
		  char *owner);
int parse_bounce(struct ftpinfo *ftp, char *url);
int ftp_anon_connect(struct ftpinfo *ftp);

/* port manipulators */
unsigned short *getpts(char *expr); /* someone stole the name getports()! */
unsigned short *getfastports(int tcpscan, int udpscan);
int addport(portlist *ports, unsigned short portno, unsigned short protocol,
	    char *owner);
int deleteport(portlist *ports, unsigned short portno, unsigned short protocol);
void printandfreeports(portlist ports);
int shortfry(unsigned short *ports);

/* socket manipulation functions */
void init_socket(int sd);
int unblock_socket(int sd);
int block_socket(int sd);
int recvtime(int sd, char *buf, int len, int seconds);

/* RAW packet building/dissasembling stuff */
int send_tcp_raw( int sd, struct in_addr *source, 
		  struct in_addr *victim, unsigned short sport, 
		  unsigned short dport, unsigned long seq,
		  unsigned long ack, unsigned char flags,
		  unsigned short window, char *data,
		  unsigned short datalen);
int isup(struct in_addr target);
unsigned short in_cksum(unsigned short *ptr,int nbytes);
int send_small_fragz(int sd, struct in_addr *source, struct in_addr *victim,
		     int sport, int dport, int flags);
int readtcppacket(char *packet, int readdata);
int listen_icmp(int icmpsock, unsigned short outports[],
		unsigned short numtries[], int *num_out,
		struct in_addr target, portlist *ports);

/* general helper functions */
void hdump(unsigned char *packet, int len);
void *safe_malloc(int size);
#endif /* NMAP_H */
&lt;--&gt;

&lt;++&gt; nmap/nmap.c

#include &quot;nmap.h&quot;

/* global options */
short debugging = DEBUGGING;
short verbose = 0;
int number_of_ports  = 0; /* How many ports do we scan per machine? */
int max_parallel_sockets = MAX_SOCKETS;
extern char *optarg;
extern int optind;
short isr00t = 0;
short identscan = 0;
char current_name[MAXHOSTNAMELEN + 1];
unsigned long global_delay = 0;
unsigned long global_rtt = 0;
struct in_addr ouraddr = { 0 };

int main(int argc, char *argv[]) {
int i, j, arg, argvlen;
short fastscan=0, tcpscan=0, udpscan=0, synscan=0, randomize=0;
short fragscan = 0, finscan = 0, quashargv = 0, pingscan = 0, lamerscan = 0;
short bouncescan = 0;
short *ports = NULL, mask;
struct ftpinfo ftp = { FTPUSER, FTPPASS, &quot;&quot;, { 0 }, 21, 0};
portlist openports = NULL;
struct hostent *target = 0;
unsigned long int lastip, currentip, longtmp;
char *target_net, *p;
struct in_addr current_in, *source=NULL;
int hostup = 0;
char *fakeargv[argc + 1];

/* argv faking silliness */
for(i=0; i &lt; argc; i++) {
  fakeargv[i] = safe_malloc(strlen(argv[i]) + 1);
  strncpy(fakeargv[i], argv[i], strlen(argv[i]) + 1);
}
fakeargv[argc] = NULL;

if (argc &lt; 2 ) printusage(argv[0]);

/* OK, lets parse these args! */
while((arg = getopt(argc,fakeargv,&quot;b:dFfhilM:Pp:qrS:stUuw:v&quot;)) != EOF) {
  switch(arg) {
  case &#039;b&#039;: 
    bouncescan++;
    if (parse_bounce(&amp;ftp, optarg) &lt; 0 ) {
      fprintf(stderr, &quot;Your argument to -b is fucked up. Use the normal url style:  user:pass@server:port or just use server and use default anon login\n  Use -h for help\n&quot;);
    }
    break;
  case &#039;d&#039;: debugging++; break;
  case &#039;F&#039;: fastscan++; break;
  case &#039;f&#039;: fragscan++; break;
  case &#039;h&#039;: 
  case &#039;?&#039;: printusage(argv[0]);
  case &#039;i&#039;: identscan++; break;
  case &#039;l&#039;: lamerscan++; udpscan++; break;
  case &#039;M&#039;: max_parallel_sockets = atoi(optarg); break;
  case &#039;P&#039;: pingscan++; break;
  case &#039;p&#039;: 
    if (ports)
      fatal(&quot;Only 1 -p option allowed, seperate multiple ranges with commas.&quot;);
    ports = getpts(optarg); break;
  case &#039;r&#039;: randomize++; break;
  case &#039;s&#039;: synscan++; break;
  case &#039;S&#039;: 
    if (source)
      fatal(&quot;You can only use the source option once!\n&quot;);
    source = safe_malloc(sizeof(struct in_addr));
    if (!inet_aton(optarg, source))
      fatal(&quot;You must give the source address in dotted deciman, currently.\n&quot;);
    break;
  case &#039;t&#039;: tcpscan++; break;
  case &#039;U&#039;: finscan++; break;
  case &#039;u&#039;: udpscan++; break;
  case &#039;q&#039;: quashargv++; break;
  case &#039;w&#039;: global_delay = atoi(optarg); break;
  case &#039;v&#039;: verbose++;
  }
}

/* Take care of user wierdness */
isr00t = !(geteuid()|geteuid());
if (tcpscan &amp;&amp; synscan) 
  fatal(&quot;The -t and -s options can&#039;t be used together.\
 If you are trying to do TCP SYN scanning, just use -s.\
 For normal connect() style scanning, use -t&quot;);
if ((synscan || finscan || fragscan || pingscan) &amp;&amp; !isr00t)
  fatal(&quot;Options specified require r00t privileges.  You don&#039;t have them!&quot;);
if (!tcpscan &amp;&amp; !udpscan &amp;&amp; !synscan &amp;&amp; !finscan &amp;&amp; !bouncescan &amp;&amp; !pingscan) {
  tcpscan++;
  if (verbose) error(&quot;No scantype specified, assuming vanilla tcp connect()\
 scan. Use -P if you really don&#039;t want to portscan.&quot;);
if (fastscan &amp;&amp; ports)
  fatal(&quot;You can use -F (fastscan) OR -p for explicit port specification.\
  Not both!\n&quot;);
}
/* If he wants to bounce of an ftp site, that site better damn well be reachable! */
if (bouncescan) {
  if (!inet_aton(ftp.server_name, &amp;ftp.server)) {
    if ((target = gethostbyname(ftp.server_name)))
      memcpy(&amp;ftp.server, target-&gt;h_addr_list[0], 4);
    else {
      fprintf(stderr, &quot;Failed to resolve ftp bounce proxy hostname/IP: %s\n&quot;,
	      ftp.server_name);
      exit(1);
    } 
  }  else if (verbose)
    printf(&quot;Resolved ftp bounce attack proxy to %s (%s).\n&quot;, 
	   target-&gt;h_name, inet_ntoa(ftp.server)); 
}
printf(&quot;\nStarting nmap V 1.21 by Fyodor (fyodor@dhp.com, www.dhp.com/~fyodor/nmap/\n&quot;);
if (!verbose) 
  error(&quot;Hint: The -v option notifies you of open ports as they are found.\n&quot;);
if (fastscan)
  ports = getfastports(synscan|tcpscan|fragscan|finscan|bouncescan,
                       udpscan|lamerscan);
if (!ports) ports = getpts(&quot;1-1024&quot;);

/* more fakeargv junk, BTW malloc&#039;ing extra space in argv[0] doesn&#039;t work */
if (quashargv) {
  argvlen = strlen(argv[0]);
  if (argvlen &lt; strlen(FAKE_ARGV))
    fatal(&quot;If you want me to fake your argv, you need to call the program with a longer name.  Try the full pathname, or rename it fyodorssuperdedouperportscanner&quot;);
  strncpy(argv[0], FAKE_ARGV, strlen(FAKE_ARGV));
  for(i = strlen(FAKE_ARGV); i &lt; argvlen; i++) argv[0][i] = &#039;\0&#039;;
  for(i=1; i &lt; argc; i++) {
    argvlen = strlen(argv[i]);
    for(j=0; j &lt;= argvlen; j++)
      argv[i][j] = &#039;\0&#039;;
  }
}

srand(time(NULL));

while(optind &lt; argc) {
  
  /* Time to parse the allowed mask */
  target = NULL;
  target_net = strtok(strdup(fakeargv[optind]), &quot;/&quot;);
  mask = (p = strtok(NULL,&quot;&quot;))? atoi(p) : 32;
  if (debugging)
    printf(&quot;Target network is %s, scanmask is %d\n&quot;, target_net, mask);
  
  if (!inet_aton(target_net, ¤t_in)) {
    if ((target = gethostbyname(target_net)))
      memcpy(¤tip, target-&gt;h_addr_list[0], 4);
    else {
      fprintf(stderr, &quot;Failed to resolve given hostname/IP: %s\n&quot;, target_net);
    }
  } else currentip = current_in.s_addr;

  longtmp = ntohl(currentip);
  currentip = longtmp &amp; (unsigned long) (0 - pow(2,32 - mask));
  lastip = longtmp | (unsigned long) (pow(2,32 - mask) - 1);
  while (currentip &lt;= lastip) {
    openports = NULL;
    longtmp = htonl(currentip);
    target = gethostbyaddr((char *) &amp;longtmp, 4, AF_INET);
    current_in.s_addr = longtmp;
    if (target)
      strncpy(current_name, target-&gt;h_name, MAXHOSTNAMELEN);
    else current_name[0] = &#039;\0&#039;;
    current_name[MAXHOSTNAMELEN + 1] = &#039;\0&#039;;
    if (randomize)
      shortfry(ports); 
#ifdef IGNORE_ZERO_AND_255_HOSTS
    if (IGNORE_ZERO_AND_255_HOSTS 
	&amp;&amp; (!(currentip % 256) || currentip % 256 == 255))
      {
	printf(&quot;Skipping host %s because IGNORE_ZERO_AND_255_HOSTS is set in the source.\n&quot;, inet_ntoa(current_in));
	hostup = 0;
      }
    else{
#endif
      if (isr00t) {
	if (!(hostup = isup(current_in))) {
	  if (!pingscan)
	    printf(&quot;Host %s (%s) appears to be down, skipping scan.\n&quot;,
		   current_name, inet_ntoa(current_in));
	  else
	    printf(&quot;Host %s (%s) appears to be  down\n&quot;,
		   current_name, inet_ntoa(current_in));
	} else if (debugging || pingscan)
	  printf(&quot;Host %s (%s) appears to be up ... good.\n&quot;,
                 current_name, inet_ntoa(current_in));
      }
      else hostup = 1; /* We don&#039;t really check because the lamer isn&#039;t root.*/
    }
    
    /* Time for some actual scanning! */    
    if (hostup) {
      if (tcpscan) tcp_scan(current_in, ports, &amp;openports);
      
      if (synscan) syn_scan(current_in, ports, source, fragscan, &amp;openports);
      
      if (finscan) fin_scan(current_in, ports, source, fragscan, &amp;openports);
      
      if (bouncescan) {
	if (ftp.sd &lt;= 0) ftp_anon_connect(&amp;ftp);
	if (ftp.sd &gt; 0) bounce_scan(current_in, ports, &amp;ftp, &amp;openports);
	  }
      if (udpscan) {
	if (!isr00t || lamerscan) 
	  lamer_udp_scan(current_in, ports, &amp;openports);

	else udp_scan(current_in, ports, &amp;openports);
      }
    
      if (!openports &amp;&amp; !pingscan)
	printf(&quot;No ports open for host %s (%s)\n&quot;, current_name,
	       inet_ntoa(current_in));
      if (openports) {
	printf(&quot;Open ports on %s (%s):\n&quot;, current_name, 
	       inet_ntoa(current_in));
	printandfreeports(openports);
      }
    }
    currentip++;
  }
  optind++;
}

return 0;
}

__inline__ int unblock_socket(int sd) {
int options;
/*Unblock our socket to prevent recvfrom from blocking forever 
  on certain target ports. */
options = O_NONBLOCK | fcntl(sd, F_GETFL);
fcntl(sd, F_SETFL, options);
return 1;
}

__inline__ int block_socket(int sd) {
int options;
options = (~O_NONBLOCK) &amp; fcntl(sd, F_GETFL);
fcntl(sd, F_SETFL, options);
return 1;
}

/* Currently only sets SO_LINGER, I haven&#039;t seen any evidence that this
   helps.  I&#039;ll do more testing before dumping it. */
__inline__ void init_socket(int sd) {
struct linger l;

l.l_onoff = 1;
l.l_linger = 0;

if (setsockopt(sd, SOL_SOCKET, SO_LINGER,  &amp;l, sizeof(struct linger)))
  {
   fprintf(stderr, &quot;Problem setting socket SO_LINGER, errno: %d\n&quot;, errno);
   perror(&quot;setsockopt&quot;);
  }
}

/* Convert a string like &quot;-100,200-1024,3000-4000,60000-&quot; into an array 
   of port numbers*/
unsigned short *getpts(char *origexpr) {
int exlen = strlen(origexpr);
char *p,*q;
unsigned short *tmp, *ports;
int i=0, j=0,start,end;
char *expr = strdup(origexpr);
ports = safe_malloc(65536 * sizeof(short));
i++;
i--;
for(;j &lt; exlen; j++) 
  if (expr[j] != &#039; &#039;) expr[i++] = expr[j]; 
expr[i] = &#039;\0&#039;;
exlen = i + 1;
i=0;
while((p = strchr(expr,&#039;,&#039;))) {
  *p = &#039;\0&#039;;
  if (*expr == &#039;-&#039;) {start = 1; end = atoi(expr+ 1);}
  else {
    start = end = atoi(expr);
    if ((q = strchr(expr,&#039;-&#039;)) &amp;&amp; *(q+1) ) end = atoi(q + 1);
    else if (q &amp;&amp; !*(q+1)) end = 65535;
  }
  if (debugging)
    printf(&quot;The first port is %d, and the last one is %d\n&quot;, start, end);
  if (start &lt; 1 || start &gt; end) fatal(&quot;Your port specifications are illegal!&quot;);
  for(j=start; j &lt;= end; j++) 
    ports[i++] = j;
  expr = p + 1;
}
if (*expr == &#039;-&#039;) {
  start = 1;
  end = atoi(expr+ 1);
}
else {
  start = end = atoi(expr);
  if ((q =  strchr(expr,&#039;-&#039;)) &amp;&amp; *(q+1) ) end = atoi(q+1);
  else if (q &amp;&amp; !*(q+1)) end = 65535;
}
if (debugging)
  printf(&quot;The first port is %d, and the last one is %d\n&quot;, start, end);
if (start &lt; 1 || start &gt; end) fatal(&quot;Your port specifications are illegal!&quot;);
for(j=start; j &lt;= end; j++) 
  ports[i++] = j;
number_of_ports = i;
ports[i++] = 0;
tmp = realloc(ports, i * sizeof(short));
  free(expr);
  return tmp;
}

unsigned short *getfastports(int tcpscan, int udpscan) {
  int portindex = 0, res, lastport = 0;
  unsigned int portno = 0;
  unsigned short *ports;
  char proto[10];
  char line[81];
  FILE *fp;
  ports = safe_malloc(65535 * sizeof(unsigned short));
  proto[0] = &#039;\0&#039;;
  if (!(fp = fopen(&quot;/etc/services&quot;, &quot;r&quot;))) {
    printf(&quot;We can&#039;t open /etc/services for reading!  Fix your system or don&#039;t use -f\n&quot;);
    perror(&quot;fopen&quot;);
    exit(1);
  }
  
  while(fgets(line, 80, fp)) {
    res = sscanf(line, &quot;%*s %u/%s&quot;, &amp;portno, proto);
    if (res == 2 &amp;&amp; portno != 0 &amp;&amp; portno != lastport) { 
      lastport = portno;
      if (tcpscan &amp;&amp; proto[0] == &#039;t&#039;)
	ports[portindex++] = portno;
      else if (udpscan &amp;&amp; proto[0] == &#039;u&#039;)
	ports[portindex++] = portno;
    }
  }


number_of_ports = portindex;
ports[portindex++] = 0;
return realloc(ports, portindex * sizeof(unsigned short));
}

void printusage(char *name) {
printf(&quot;%s [options] [hostname[/mask] . . .]
options (none are required, most can be combined):
   -t tcp connect() port scan
   -s tcp SYN stealth port scan (must be root)
   -u UDP port scan, will use MUCH better version if you are root
   -U Uriel Maimon (P49-15) style FIN stealth scan.
   -l Do the lamer UDP scan even if root.  Less accurate.
   -P ping \&quot;scan\&quot;. Find which hosts on specified network(s) are up.
   -b &lt;ftp_relay_host&gt; ftp \&quot;bounce attack\&quot; port scan
   -f use tiny fragmented packets for SYN or FIN scan.
   -i Get identd (rfc 1413) info on listening TCP processes.
   -p &lt;range&gt; ports: ex: \&#039;-p 23\&#039; will only try port 23 of the host(s)
                  \&#039;-p 20-30,63000-\&#039; scans 20-30 and 63000-65535 default: 1-1024
   -F fast scan. Only scans ports in /etc/services, a la strobe(1).
   -r randomize target port scanning order.
   -h help, print this junk.  Also see http://www.dhp.com/~fyodor/nmap/
   -S If you want to specify the source address of SYN or FYN scan.
   -v Verbose.  Its use is recommended.  Use twice for greater effect.
   -w &lt;n&gt; delay.  n microsecond delay. Not recommended unless needed.
   -M &lt;n&gt; maximum number of parallel sockets.  Larger isn&#039;t always better.
   -q quash argv to something benign, currently set to \&quot;%s\&quot;.
Hostnames specified as internet hostname or IP address.  Optional &#039;/mask&#039; specifies subnet. cert.org/24 or 192.88.209.5/24 scan CERT&#039;s Class C.\n&quot;, 
       name, FAKE_ARGV);
exit(1);
}

portlist tcp_scan(struct in_addr target, unsigned short *portarray, portlist *ports) {

int starttime, current_out = 0, res , deadindex = 0, i=0, j=0, k=0, max=0; 
struct sockaddr_in sock, stranger, mysock;
int sockaddr_in_len = sizeof(struct sockaddr_in);
int sockets[max_parallel_sockets], deadstack[max_parallel_sockets];
unsigned short portno[max_parallel_sockets];
char owner[513], buf[65536]; 
int tryident = identscan, current_socket /*actually it is a socket INDEX*/;
fd_set fds_read, fds_write;
struct timeval nowait = {0,0},  longwait = {7,0}; 

signal(SIGPIPE, SIG_IGN); /* ignore SIGPIPE so our &#039;write 0 bytes&#039; test
			     doesn&#039;t crash our program!*/
owner[0] = &#039;\0&#039;;
starttime = time(NULL);
bzero((char *)&amp;sock,sizeof(struct sockaddr_in));
sock.sin_addr.s_addr = target.s_addr;
if (verbose || debugging)
  printf(&quot;Initiating TCP connect() scan against %s (%s)\n&quot;,
	 current_name,  inet_ntoa(sock.sin_addr));
sock.sin_family=AF_INET;
FD_ZERO(&amp;fds_read);
FD_ZERO(&amp;fds_write);

if (tryident)
  tryident = check_ident_port(target);

/* Initially, all of our sockets are &quot;dead&quot; */
for(i = 0 ; i &lt; max_parallel_sockets; i++) {
  deadstack[deadindex++] = i;
  portno[i] = 0;
}

deadindex--; 
/* deadindex always points to the most recently added dead socket index */

while(portarray[j]) {
  longwait.tv_sec = 7;
  longwait.tv_usec = nowait.tv_sec = nowait.tv_usec = 0;
  
  for(i=current_out; i &lt; max_parallel_sockets &amp;&amp; portarray[j]; i++, j++) {
    current_socket = deadstack[deadindex--];
    if ((sockets[current_socket] = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)
      {perror(&quot;Socket troubles&quot;); exit(1);}
    if (sockets[current_socket] &gt; max) max = sockets[current_socket]; 
    current_out++;
    unblock_socket(sockets[current_socket]);
    init_socket(sockets[current_socket]);
    portno[current_socket] = portarray[j];
    sock.sin_port = htons(portarray[j]);
    if ((res = connect(sockets[current_socket],(struct sockaddr *)&amp;sock,sizeof(struct sockaddr)))!=-1)
      printf(&quot;WTF???? I think we got a successful connection in non-blocking!!@#$\n&quot;);
    else {
      switch(errno) {
      case EINPROGRESS: /* The one I always see */
      case EAGAIN:
	block_socket(sockets[current_socket]);
	FD_SET(sockets[current_socket], &amp;fds_write);
	FD_SET(sockets[current_socket], &amp;fds_read);
	break;
      default:
	printf(&quot;Strange error from connect: (%d)&quot;, errno);
	perror(&quot;&quot;); /*falling through intentionally*/
      case ECONNREFUSED:
	if (max == sockets[current_socket]) max--;
	deadstack[++deadindex] = current_socket;
	current_out--;
	portno[current_socket] = 0;
	close(sockets[current_socket]);
	break;
      }
    }
  }
  if (!portarray[j]) sleep(1); /*wait a second for any last packets*/
  while((res = select(max + 1, &amp;fds_read, &amp;fds_write, NULL, 
		      (current_out &lt; max_parallel_sockets)?
		      &amp;nowait : &amp;longwait)) &gt; 0) {
    for(k=0; k &lt; max_parallel_sockets; k++)
      if (portno[k]) {
	if (FD_ISSET(sockets[k], &amp;fds_write)
	    &amp;&amp; FD_ISSET(sockets[k], &amp;fds_read)) {
	  /*printf(&quot;Socket at port %hi is selectable for r &amp; w.&quot;, portno[k]);*/
	  res = recvfrom(sockets[k], buf, 65536, 0, (struct sockaddr *)
			 &amp; stranger, &amp;sockaddr_in_len);
	  if (res &gt;= 0) {
	    if (debugging || verbose)
	      printf(&quot;Adding TCP port %hi due to successful read.\n&quot;, 
		     portno[k]);
	    if (tryident) {
	      if ( getsockname(sockets[k], (struct sockaddr *) &amp;mysock,
			       &amp;sockaddr_in_len ) ) {
		perror(&quot;getsockname&quot;);
		exit(1);
	      }
	      tryident = getidentinfoz(target, ntohs(mysock.sin_port),
				       portno[k], owner);
	    }	    
	    addport(ports, portno[k], IPPROTO_TCP, owner);
	  }
	  if (max == sockets[k])
	    max--;
	  FD_CLR(sockets[k], &amp;fds_read);
	  FD_CLR(sockets[k], &amp;fds_write);
	  deadstack[++deadindex] = k;
	  current_out--;
	  portno[k] = 0;
	  close(sockets[k]);
	}
	else if(FD_ISSET(sockets[k], &amp;fds_write)) {
	  /*printf(&quot;Socket at port %hi is selectable for w only.VERIFYING\n&quot;,
	    portno[k]);*/
	  res = send(sockets[k], buf, 0, 0);
	  if (res &lt; 0 ) {
	    signal(SIGPIPE, SIG_IGN);
	    if (debugging &gt; 1)
	      printf(&quot;Bad port %hi caught by 0-byte write!\n&quot;, portno[k]);
	  }
	  else {
	    if (debugging || verbose)
	      printf(&quot;Adding TCP port %hi due to successful 0-byte write!\n&quot;,
		     portno[k]);
	    if (tryident) {
	      if ( getsockname(sockets[k], (struct sockaddr *) &amp;mysock ,
			       &amp;sockaddr_in_len ) ) {
		perror(&quot;getsockname&quot;);
		exit(1);
	      }
	      tryident = getidentinfoz(target, ntohs(mysock.sin_port),
				       portno[k], owner);
	    }	    
	    addport(ports, portno[k], IPPROTO_TCP, owner);	 
	  }
	  if (max == sockets[k]) max--;
	  FD_CLR(sockets[k], &amp;fds_write);
	  deadstack[++deadindex] = k;
	  current_out--;
	  portno[k] = 0;
	  close(sockets[k]);
	}
	else if ( FD_ISSET(sockets[k], &amp;fds_read) ) {       
	  printf(&quot;Socket at port %hi is selectable for r only.  This is very wierd.\n&quot;, portno[k]);
	  if (max == sockets[k]) max--;
	  FD_CLR(sockets[k], &amp;fds_read);
	  deadstack[++deadindex] = k;
	  current_out--;
	  portno[k] = 0;
	  close(sockets[k]);
	}
	else {
	  /*printf(&quot;Socket at port %hi not selecting, readding.\n&quot;,portno[k]);*/
	  FD_SET(sockets[k], &amp;fds_write);
	  FD_SET(sockets[k], &amp;fds_read);
	}
      }
  }
}

if (debugging || verbose) 
  printf(&quot;Scanned %d ports in %ld seconds with %d parallel sockets.\n&quot;,
	 number_of_ports, time(NULL) - starttime, max_parallel_sockets);
return *ports;
}

/* gawd, my next project will be in c++ so I don&#039;t have to deal with
   this crap ... simple linked list implementation */
int addport(portlist *ports, unsigned short portno, unsigned short protocol,
	    char *owner) {
struct port *current, *tmp;
int len;

if (*ports) {
  current = *ports;
  /* case 1: we add to the front of the list */
  if (portno &lt;= current-&gt;portno) {
    if (current-&gt;portno == portno &amp;&amp; current-&gt;proto == protocol) {
      if (debugging || verbose) 
	printf(&quot;Duplicate port (%hi/%s)\n&quot;, portno , 
	       (protocol == IPPROTO_TCP)? &quot;tcp&quot;: &quot;udp&quot;);
      return -1;
    }  
    tmp = current;
    *ports = safe_malloc(sizeof(struct port));
    (*ports)-&gt;next = tmp;
    current = *ports;
    current-&gt;portno = portno;
    current-&gt;proto = protocol;
    if (owner &amp;&amp; *owner) {
      len = strlen(owner);
      current-&gt;owner = malloc(sizeof(char) * (len + 1));
      strncpy(current-&gt;owner, owner, len + 1);
    }
    else current-&gt;owner = NULL;
  }
  else { /* case 2: we add somewhere in the middle or end of the list */
    while( current-&gt;next  &amp;&amp; current-&gt;next-&gt;portno &lt; portno)
      current = current-&gt;next;
    if (current-&gt;next &amp;&amp; current-&gt;next-&gt;portno == portno 
	&amp;&amp; current-&gt;next-&gt;proto == protocol) {
      if (debugging || verbose) 
	printf(&quot;Duplicate port (%hi/%s)\n&quot;, portno , 
	       (protocol == IPPROTO_TCP)? &quot;tcp&quot;: &quot;udp&quot;);
      return -1;
    }
    tmp = current-&gt;next;
    current-&gt;next = safe_malloc(sizeof(struct port));
    current-&gt;next-&gt;next = tmp;
    tmp = current-&gt;next;
    tmp-&gt;portno = portno;
    tmp-&gt;proto = protocol;
    if (owner &amp;&amp; *owner) {
      len = strlen(owner);
      tmp-&gt;owner = malloc(sizeof(char) * (len + 1));
      strncpy(tmp-&gt;owner, owner, len + 1);
    }
    else tmp-&gt;owner = NULL;
  }
}

else { /* Case 3, list is null */
  *ports = safe_malloc(sizeof(struct port));
  tmp = *ports;
  tmp-&gt;portno = portno;
  tmp-&gt;proto = protocol;
  if (owner &amp;&amp; *owner) {
    len = strlen(owner);
    tmp-&gt;owner = safe_malloc(sizeof(char) * (len + 1));
    strncpy(tmp-&gt;owner, owner, len + 1);
  }
  else tmp-&gt;owner = NULL;
  tmp-&gt;next = NULL;
}
return 0; /*success */
}

int deleteport(portlist *ports, unsigned short portno,
	       unsigned short protocol) {
  portlist current, tmp;
  
  if (!*ports) {
    if (debugging &gt; 1) error(&quot;Tried to delete from empty port list!&quot;);
    return -1;
  }
  /* Case 1, deletion from front of list*/
  if ((*ports)-&gt;portno == portno &amp;&amp; (*ports)-&gt;proto == protocol) {
    tmp = (*ports)-&gt;next;
    if ((*ports)-&gt;owner) free((*ports)-&gt;owner);
    free(*ports);
    *ports = tmp;
  }
  else {
    current = *ports;
    for(;current-&gt;next &amp;&amp; (current-&gt;next-&gt;portno != portno || current-&gt;next-&gt;proto != protocol); current = current-&gt;next);
    if (!current-&gt;next)
      return -1;
    tmp = current-&gt;next;
    current-&gt;next = tmp-&gt;next;
    if (tmp-&gt;owner) free(tmp-&gt;owner);
    free(tmp);
}
  return 0; /* success */
}


void *safe_malloc(int size)
{
  void *mymem;
  if (size &lt; 0)
    fatal(&quot;Tried to malloc negative amount of memmory!!!&quot;);
  if ((mymem = malloc(size)) == NULL)
    fatal(&quot;Malloc Failed! Probably out of space.&quot;);
  return mymem;
}

void printandfreeports(portlist ports) {
  char protocol[4];
  struct servent *service;
  port *current = ports, *tmp;
  
  printf(&quot;Port Number  Protocol  Service&quot;);
  printf(&quot;%s&quot;, (identscan)?&quot;         Owner\n&quot;:&quot;\n&quot;);
  while(current != NULL) {
    strcpy(protocol,(current-&gt;proto == IPPROTO_TCP)? &quot;tcp&quot;: &quot;udp&quot;);
    service = getservbyport(htons(current-&gt;portno), protocol);
    printf(&quot;%-13d%-11s%-16s%s\n&quot;, current-&gt;portno, protocol,
	   (service)? service-&gt;s_name: &quot;unknown&quot;,
	   (current-&gt;owner)? current-&gt;owner : &quot;&quot;);
    tmp = current;
    current = current-&gt;next;
    if (tmp-&gt;owner) free(tmp-&gt;owner);
    free(tmp);
  }
  printf(&quot;\n&quot;);
}

/* This is the version of udp_scan that uses raw ICMP sockets and requires 
   root priviliges.*/
portlist udp_scan(struct in_addr target, unsigned short *portarray,
		  portlist *ports) {
  int icmpsock, udpsock, tmp, done=0, retries, bytes = 0, res,  num_out = 0;
  int i=0,j=0, k=0, icmperrlimittime, max_tries = UDP_MAX_PORT_RETRIES;
  unsigned short outports[max_parallel_sockets], numtries[max_parallel_sockets];
  struct sockaddr_in her;
  char senddata[] = &quot;blah\n&quot;;
  unsigned long starttime, sleeptime;
  struct timeval shortwait = {1, 0 };
  fd_set  fds_read, fds_write;
  
  bzero(outports, max_parallel_sockets * sizeof(unsigned short));
  bzero(numtries, max_parallel_sockets * sizeof(unsigned short));
  
   /* Some systems (like linux) follow the advice of rfc1812 and limit
    * the rate at which they will respons with icmp error messages 
    * (like port unreachable).  icmperrlimittime is to compensate for that.
    */
  icmperrlimittime = 60000;

  sleeptime = (global_delay)? global_delay : (global_rtt)? (1.2 * global_rtt) + 30000 : 1e5;
if (global_delay) icmperrlimittime = global_delay;

starttime = time(NULL);

FD_ZERO(&amp;fds_read);
FD_ZERO(&amp;fds_write);

if (verbose || debugging)
  printf(&quot;Initiating UDP (raw ICMP version) scan against %s (%s) using wait delay of %li usecs.\n&quot;, current_name,  inet_ntoa(target), sleeptime);

if ((icmpsock = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP)) &lt; 0)
  perror(&quot;Opening ICMP RAW socket&quot;);
if ((udpsock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) &lt; 0)
  perror(&quot;Opening datagram socket&quot;);

unblock_socket(icmpsock);
her.sin_addr = target;
her.sin_family = AF_INET;

while(!done) {
  tmp = num_out;
  for(i=0; (i &lt; max_parallel_sockets &amp;&amp; portarray[j]) || i &lt; tmp; i++) {
    close(udpsock);
    if ((udpsock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) &lt; 0)
      perror(&quot;Opening datagram socket&quot;);
    if ((i &gt; tmp &amp;&amp; portarray[j]) || numtries[i] &gt; 1) {
      if (i &gt; tmp) her.sin_port = htons(portarray[j++]);
      else her.sin_port = htons(outports[i]);
      FD_SET(udpsock, &amp;fds_write);
      FD_SET(icmpsock, &amp;fds_read);
      shortwait.tv_sec = 1; shortwait.tv_usec = 0;
      usleep(icmperrlimittime);
      res = select(udpsock + 1, NULL, &amp;fds_write, NULL, &amp;shortwait);
       if (FD_ISSET(udpsock, &amp;fds_write))
	  bytes = sendto(udpsock, senddata, sizeof(senddata), 0,
			 (struct sockaddr *) &amp;her, sizeof(struct sockaddr_in));
      else {
	printf(&quot;udpsock not set for writing port %d!&quot;,  ntohs(her.sin_port));
	return *ports;
      }
      if (bytes &lt;= 0) {
	if (errno == ECONNREFUSED) {
	  retries = 10;
	  do {	  
	    /* This is from when I was using the same socket and would 
	     * (rather often) get strange connection refused errors, it
	     * shouldn&#039;t happen now that I create a new udp socket for each
	     * port.  At some point I will probably go back to 1 socket again.
	     */
	    printf(&quot;sendto said connection refused on port %d but trying again anyway.\n&quot;, ntohs(her.sin_port));
	    usleep(icmperrlimittime);
	    bytes = sendto(udpsock, senddata, sizeof(senddata), 0,
			  (struct sockaddr *) &amp;her, sizeof(struct sockaddr_in));
	    printf(&quot;This time it returned %d\n&quot;, bytes);
	  } while(bytes &lt;= 0 &amp;&amp; retries-- &gt; 0);
	}
	if (bytes &lt;= 0) {
	  printf(&quot;sendto returned %d.&quot;, bytes);
	  fflush(stdout);
	  perror(&quot;sendto&quot;);
	}
      }
      if (bytes &gt; 0 &amp;&amp; i &gt; tmp) {
	num_out++;
	outports[i] = portarray[j-1];
      }
    }
  }
  usleep(sleeptime);
  tmp = listen_icmp(icmpsock, outports, numtries, &amp;num_out, target, ports);
  if (debugging) printf(&quot;listen_icmp caught %d bad ports.\n&quot;, tmp);
  done = !portarray[j];
  for (i=0,k=0; i &lt; max_parallel_sockets; i++) 
    if (outports[i]) {
      if (++numtries[i] &gt; max_tries - 1) {
	if (debugging || verbose)
	  printf(&quot;Adding port %d for 0 unreachable port generations\n&quot;,
		 outports[i]);
	addport(ports, outports[i], IPPROTO_UDP, NULL);
	num_out--;
	outports[i] = numtries[i] = 0;      
      }
      else {
	done = 0;
	outports[k] = outports[i];
	numtries[k] = numtries[i];
	if (k != i)
	  outports[i] = numtries[i] = 0;
	k++;
      }
    }
  if (num_out == max_parallel_sockets) {
  printf(&quot;Numout is max sockets, that is a problem!\n&quot;);
  sleep(1); /* Give some time for responses to trickle back, 
	       and possibly to reset the hosts ICMP error limit */
  }
}


if (debugging || verbose) 
  printf(&quot;The UDP raw ICMP scanned %d ports in  %ld seconds with %d parallel sockets.\n&quot;, number_of_ports, time(NULL) - starttime, max_parallel_sockets);
close(icmpsock);
close(udpsock);
return *ports;
}

int listen_icmp(int icmpsock,  unsigned short outports[], 
		unsigned short numtries[], int *num_out, struct in_addr target,
		portlist *ports) {
  char response[1024];
  struct sockaddr_in stranger;
  int sockaddr_in_size = sizeof(struct sockaddr_in);
  struct in_addr bs;
  struct iphdr *ip = (struct iphdr *) response;
  struct icmphdr *icmp = (struct icmphdr *) (response + sizeof(struct iphdr));
  struct iphdr *ip2;
  unsigned short *data;
  int badport, numcaught=0, bytes, i, tmptry=0, found=0;
  
  while  ((bytes = recvfrom(icmpsock, response, 1024, 0,
			    (struct sockaddr *) &amp;stranger,
			    &amp;sockaddr_in_size)) &gt; 0) {
  numcaught++;
  bs.s_addr = ip-&gt;saddr;
  if (ip-&gt;saddr == target.s_addr &amp;&amp; ip-&gt;protocol == IPPROTO_ICMP 
      &amp;&amp; icmp-&gt;type == 3 &amp;&amp; icmp-&gt;code == 3) {    
    ip2 = (struct iphdr *) (response + 4 * ip-&gt;ihl + sizeof(struct icmphdr));
    data = (unsigned short *) ((char *)ip2 + 4 * ip2-&gt;ihl);
    badport = ntohs(data[1]);
    /*delete it from our outports array */
    found = 0;
    for(i=0; i &lt; max_parallel_sockets; i++) 
      if (outports[i] == badport) {
	found = 1;
	tmptry = numtries[i];
	outports[i] = numtries[i] = 0;
	(*num_out)--;
	break;
      }
    if (debugging &amp;&amp; found &amp;&amp; tmptry &gt; 0) 
      printf(&quot;Badport: %d on try number %d\n&quot;, badport, tmptry);
    if (!found) {
      if (debugging) 
	printf(&quot;Badport %d came in late, deleting from portlist.\n&quot;, badport);
      if (deleteport(ports, badport, IPPROTO_UDP) &lt; 0)
	if (debugging) printf(&quot;Port deletion failed.\n&quot;);
    }
  }
  else {
    printf(&quot;Funked up packet!\n&quot;);
  }
}
  return numcaught;
}

/* This fucntion is nonsens.  I wrote it all, really optimized etc.  Then
   found out that many hosts limit the rate at which they send icmp errors :(
   I will probably totally rewrite it to be much simpler at some point.  For
   now I won&#039;t worry about it since it isn&#039;t a very important functions (UDP
   is lame, plus there is already a much better function for people who 
   are r00t */
portlist lamer_udp_scan(struct in_addr target, unsigned short *portarray,
			portlist *ports) {
int sockaddr_in_size = sizeof(struct sockaddr_in),i=0,j=0,k=0, bytes;
int sockets[max_parallel_sockets], trynum[max_parallel_sockets];
unsigned short portno[max_parallel_sockets];
int last_open = 0;
char response[1024];
struct sockaddr_in her, stranger;
char data[] = &quot;\nhelp\nquit\n&quot;;
unsigned long sleeptime;
unsigned int starttime;

/* Initialize our target sockaddr_in */
bzero((char *) &amp;her, sizeof(struct sockaddr_in));
her.sin_family = AF_INET;
her.sin_addr = target;

if (global_delay) sleeptime = global_delay;
else sleeptime =  calculate_sleep(target) + 60000; /*large to be on the 
						    safe side */

if (verbose || debugging)
  printf(&quot;Initiating UDP scan against %s (%s), sleeptime: %li\n&quot;, current_name,
	 inet_ntoa(target), sleeptime);

starttime = time(NULL);

for(i = 0 ; i &lt; max_parallel_sockets; i++)
  trynum[i] =  portno[i] = 0;

while(portarray[j]) {
  for(i=0; i &lt; max_parallel_sockets &amp;&amp; portarray[j]; i++, j++) {
    if (i &gt;= last_open) {
      if ((sockets[i] = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1)
        {perror(&quot;datagram socket troubles&quot;); exit(1);}
      block_socket(sockets[i]);
      portno[i] = portarray[j];
    }
    her.sin_port = htons(portarray[j]);
    bytes = sendto(sockets[i], data, sizeof(data), 0, (struct sockaddr *) &amp;her,
		   sizeof(struct sockaddr_in));
    usleep(5000);
    if (debugging &gt; 1) 
      printf(&quot;Sent %d bytes on socket %d to port %hi, try number %d.\n&quot;,
	     bytes, sockets[i], portno[i], trynum[i]);
    if (bytes &lt; 0 ) {
      printf(&quot;Sendto returned %d the FIRST TIME!@#$!, errno %d\n&quot;, bytes,
	     errno);
      perror(&quot;&quot;);
      trynum[i] = portno[i] = 0;
      close(sockets[i]);
    }
  }
  last_open = i;
  /* Might need to change this to 1e6 if you are having problems*/
  usleep(sleeptime + 5e5);
  for(i=0; i &lt; last_open ; i++) {
    if (portno[i]) {
      unblock_socket(sockets[i]);
      if ((bytes = recvfrom(sockets[i], response, 1024, 0, 
			    (struct sockaddr *) &amp;stranger,
			    &amp;sockaddr_in_size)) == -1)
        {
          if (debugging &gt; 1) 
	    printf(&quot;2nd recvfrom on port %d returned %d with errno %d.\n&quot;,
		   portno[i], bytes, errno);
          if (errno == EAGAIN /*11*/)
            {
              if (trynum[i] &lt; 2) trynum[i]++;
              else { 
		if (RISKY_UDP_SCAN) {	       
		  printf(&quot;Adding port %d after 3 EAGAIN errors.\n&quot;, portno[i]);
		  addport(ports, portno[i], IPPROTO_UDP, NULL); 
		}
		else if (debugging)
		  printf(&quot;Skipping possible false positive, port %d\n&quot;,
			 portno[i]);
                trynum[i] = portno[i] = 0;
                close(sockets[i]);
              }
            }
          else if (errno == ECONNREFUSED /*111*/) {
            if (debugging &gt; 1) 
	      printf(&quot;Closing socket for port %d, ECONNREFUSED received.\n&quot;,
		     portno[i]);
            trynum[i] = portno[i] = 0;
            close(sockets[i]);
          }
          else {
            printf(&quot;Curious recvfrom error (%d) on port %hi: &quot;, 
		   errno, portno[i]);
            perror(&quot;&quot;);
            trynum[i] = portno[i] = 0;
            close(sockets[i]);
          }
        }
      else /*bytes is positive*/ {
        if (debugging || verbose)
	  printf(&quot;Adding UDP port %d due to positive read!\n&quot;, portno[i]);
        addport(ports,portno[i], IPPROTO_UDP, NULL);
        trynum[i] = portno[i] = 0;
        close(sockets[i]);
      }
    }
  }
  /* Update last_open, we need to create new sockets.*/
  for(i=0, k=0; i &lt; last_open; i++)
    if (portno[i]) {
      close(sockets[i]);
      sockets[k] = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
      /*      unblock_socket(sockets[k]);*/
      portno[k] = portno[i];
      trynum[k] = trynum[i];
      k++;
    }
 last_open = k;
  for(i=k; i &lt; max_parallel_sockets; i++)
    trynum[i] = sockets[i] = portno[i] = 0;
}
if (debugging)
  printf(&quot;UDP scanned %d ports in %ld seconds with %d parallel sockets\n&quot;,
	 number_of_ports, time(NULL) - starttime, max_parallel_sockets);
return *ports;
}

/* This attempts to calculate the round trip time (rtt) to a host by timing a
   connect() to a port which isn&#039;t listening.  A better approach is to time a
   ping (since it is more likely to get through firewalls.  This is now 
   implemented in isup() for users who are root.  */
unsigned long calculate_sleep(struct in_addr target) {
struct timeval begin, end;
int sd;
struct sockaddr_in sock;
int res;

if ((sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)
  {perror(&quot;Socket troubles&quot;); exit(1);}

sock.sin_family = AF_INET;
sock.sin_addr.s_addr = target.s_addr;
sock.sin_port = htons(MAGIC_PORT);

gettimeofday(&amp;begin, NULL);
if ((res = connect(sd, (struct sockaddr *) &amp;sock, 
		   sizeof(struct sockaddr_in))) != -1)
  printf(&quot;You might want to change MAGIC_PORT in the include file, it seems to be listening on the target host!\n&quot;);
close(sd);
gettimeofday(&amp;end, NULL);
if (end.tv_sec - begin.tv_sec &gt; 5 ) /*uh-oh!*/
  return 0;
return (end.tv_sec - begin.tv_sec) * 1000000 + (end.tv_usec - begin.tv_usec);
}

/* Checks whether the identd port (113) is open on the target machine.  No
   sense wasting time trying it for each good port if it is down! */
int check_ident_port(struct in_addr target) {
int sd;
struct sockaddr_in sock;
int res;

if ((sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)
  {perror(&quot;Socket troubles&quot;); exit(1);}

sock.sin_family = AF_INET;
sock.sin_addr.s_addr = target.s_addr;
sock.sin_port = htons(113); /*should use getservbyname(3), yeah, yeah */
res = connect(sd, (struct sockaddr *) &amp;sock, sizeof(struct sockaddr_in));
close(sd);
if (res &lt; 0 ) {
  if (debugging || verbose) printf(&quot;identd port not active\n&quot;);
  return 0;
}
if (debugging || verbose) printf(&quot;identd port is active\n&quot;);
return 1;
}

int getidentinfoz(struct in_addr target, int localport, int remoteport,
		  char *owner) {
int sd;
struct sockaddr_in sock;
int res;
char request[15];
char response[1024];
char *p,*q;
char  *os;

owner[0] = &#039;\0&#039;;
if ((sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)
  {perror(&quot;Socket troubles&quot;); exit(1);}

sock.sin_family = AF_INET;
sock.sin_addr.s_addr = target.s_addr;
sock.sin_port = htons(113);
usleep(50000);   /* If we aren&#039;t careful, we really MIGHT take out inetd, 
		    some are very fragile */
res = connect(sd, (struct sockaddr *) &amp;sock, sizeof(struct sockaddr_in));

if (res &lt; 0 ) {
  if (debugging || verbose)
    printf(&quot;identd port not active now for some reason ... hope we didn&#039;t break it!\n&quot;);
  close(sd);
  return 0;
}
sprintf(request,&quot;%hi,%hi\r\n&quot;, remoteport, localport);
if (debugging &gt; 1) printf(&quot;Connected to identd, sending request: %s&quot;, request);
if (write(sd, request, strlen(request) + 1) == -1) {
  perror(&quot;identd write&quot;);
  close(sd);
  return 0;
}
else if ((res = read(sd, response, 1024)) == -1) {
  perror(&quot;reading from identd&quot;);
  close(sd);
  return 0;
}
else {
  close(sd);
  if (debugging &gt; 1) printf(&quot;Read %d bytes from identd: %s\n&quot;, res, response);
  if ((p = strchr(response, &#039;:&#039;))) {
    p++;
    if ((q = strtok(p, &quot; :&quot;))) {
      if (!strcasecmp( q, &quot;error&quot;)) {
	if (debugging || verbose) printf(&quot;ERROR returned from identd\n&quot;);
	return 0;
      }
      if ((os = strtok(NULL, &quot; :&quot;))) {
	if ((p = strtok(NULL, &quot; :&quot;))) {
	  if ((q = strchr(p, &#039;\r&#039;))) *q = &#039;\0&#039;;
	  if ((q = strchr(p, &#039;\n&#039;))) *q = &#039;\0&#039;;
	  strncpy(owner, p, 512);
	  owner[512] = &#039;\0&#039;;
	}
      }
    } 
  }  
}
return 1;
}

/* A relatively fast (or at least short ;) ping function.  Doesn&#039;t require a 
   seperate checksum function */
int isup(struct in_addr target) {
  int res, retries = 3;
  struct sockaddr_in sock;
  /*type(8bit)=8, code(8)=0 (echo REQUEST), checksum(16)=34190, id(16)=31337 */
#ifdef __LITTLE_ENDIAN_BITFIELD
  unsigned char ping[64] = { 0x8, 0x0, 0x8e, 0x85, 0x69, 0x7A };
#else
  unsigned char ping[64] = { 0x8, 0x0, 0x85, 0x8e, 0x7A, 0x69 };
#endif
  int sd;
  struct timeval tv;
  struct timeval start, end;
 fd_set fd_read;
  struct {
    struct iphdr ip;
    unsigned char type;
    unsigned char code;
    unsigned short checksum;
    unsigned short identifier;
    char crap[16536];
  }  response;

sd = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);

bzero((char *)&amp;sock,sizeof(struct sockaddr_in));
sock.sin_family=AF_INET;
sock.sin_addr = target;
if (debugging &gt; 1) printf(&quot; Sending 3 64 byte raw pings to host.\n&quot;);
gettimeofday(&amp;start, NULL);
while(--retries) {
  if ((res = sendto(sd,(char *) ping,64,0,(struct sockaddr *)&amp;sock,
		    sizeof(struct sockaddr))) != 64) {
    fprintf(stderr, &quot;sendto in isup returned %d! skipping host.\n&quot;, res);
    return 0;
  } 
  FD_ZERO(&amp;fd_read);
  FD_SET(sd, &amp;fd_read);
  tv.tv_sec = 0; 
  tv.tv_usec = 1e6 * (PING_TIMEOUT / 3.0);
  while(1) {
    if ((res = select(sd + 1, &amp;fd_read, NULL, NULL, &amp;tv)) != 1) 
      break;
    else {
      read(sd,&amp;response,sizeof(response));
      if  (response.ip.saddr == target.s_addr &amp;&amp;  !response.type 
	   &amp;&amp; !response.code   &amp;&amp; response.identifier == 31337) {
	gettimeofday(&amp;end, NULL);
	global_rtt = (end.tv_sec - start.tv_sec) * 1e6 + end.tv_usec - start.tv_usec;
	ouraddr.s_addr = response.ip.daddr;
	close(sd);
	return 1;       
      }
    }
  }
}
close(sd);
return 0;
}


portlist syn_scan(struct in_addr target, unsigned short *portarray,
		  struct in_addr *source, int fragment, portlist *ports) {
int i=0, j=0, received, bytes, starttime;
struct sockaddr_in from;
int fromsize = sizeof(struct sockaddr_in);
int sockets[max_parallel_sockets];
struct timeval tv;
char packet[65535];
struct iphdr *ip = (struct iphdr *) packet;
struct tcphdr *tcp = (struct tcphdr *) (packet + sizeof(struct iphdr));
fd_set fd_read, fd_write;
int res;
struct hostent *myhostent;
char myname[MAXHOSTNAMELEN + 1];
int source_malloc = 0;

FD_ZERO(&amp;fd_read);
FD_ZERO(&amp;fd_write);

tv.tv_sec = 7;
tv.tv_usec = 0;

if ((received = socket(AF_INET, SOCK_RAW, IPPROTO_TCP)) &lt; 0 )
  perror(&quot;socket trobles in syn_scan&quot;);
unblock_socket(received);
FD_SET(received, &amp;fd_read);

/* First we take what is given to us as source.  If that isn&#039;t valid, we take
   what should have swiped from the echo reply in our ping function.  If THAT
   doesn&#039;t work either, we try to determine our address with gethostname and
   gethostbyname.  Whew! */
if (!source) {
  if (ouraddr.s_addr) {
    source = &amp;ouraddr;
  }
  else {
  source = safe_malloc(sizeof(struct in_addr));
  source_malloc = 1;
  if (gethostname(myname, MAXHOSTNAMELEN) || 
      !(myhostent = gethostbyname(myname)))
    fatal(&quot;Your system is fucked up.\n&quot;); 
  memcpy(source, myhostent-&gt;h_addr_list[0], sizeof(struct in_addr));
  }
  if (debugging)
    printf(&quot;We skillfully deduced that your address is %s\n&quot;, 
	   inet_ntoa(*source));
}

starttime = time(NULL);

do {
  for(i=0; i &lt; max_parallel_sockets &amp;&amp; portarray[j]; i++) {
    if ((sockets[i] = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) &lt; 0 )
      perror(&quot;socket trobles in syn_scan&quot;);
    else {
      if (fragment)
	send_small_fragz(sockets[i], source, &amp;target, MAGIC_PORT,
			 portarray[j++], TH_SYN);
      else send_tcp_raw(sockets[i], source , &amp;target, MAGIC_PORT, 
			portarray[j++],0,0,TH_SYN,0,0,0);
      usleep(10000);
    }
  }
  if ((res = select(received + 1, &amp;fd_read, NULL, NULL, &amp;tv)) &lt; 0)
    perror(&quot;select problems in syn_scan&quot;);
  else if (res &gt; 0) {
    while  ((bytes = recvfrom(received, packet, 65535, 0, 
			      (struct sockaddr *)&amp;from, &amp;fromsize)) &gt; 0 ) {
      if (ip-&gt;saddr == target.s_addr) {
	if (tcp-&gt;th_flags &amp; TH_RST) {
	  if (debugging &gt; 1) printf(&quot;Nothing open on port %d\n&quot;,
				    ntohs(tcp-&gt;th_sport));
	}
	else /*if (tcp-&gt;th_flags &amp; TH_SYN &amp;&amp; tcp-&gt;th_flags &amp; TH_ACK)*/ {
	  if (debugging || verbose) {	  
	    printf(&quot;Possible catch on port %d!  Here it is:\n&quot;, 
		   ntohs(tcp-&gt;th_sport));
	    readtcppacket(packet,1);
	  }
	  addport(ports, ntohs(tcp-&gt;th_sport), IPPROTO_TCP, NULL); 	    
	}
      }
    }
  }
  for(i=0; i &lt; max_parallel_sockets &amp;&amp; portarray[j]; i++) close(sockets[i]);
  
} while (portarray[j]);
if (debugging || verbose)
  printf(&quot;The TCP SYN scan took %ld seconds to scan %d ports.\n&quot;,
	 time(NULL) - starttime, number_of_ports);
if (source_malloc) free(source);  /* Gotta save those 4 bytes! ;) */
close(received);
return *ports;
}


int send_tcp_raw( int sd, struct in_addr *source, 
		  struct in_addr *victim, unsigned short sport, 
		  unsigned short dport, unsigned long seq,
		  unsigned long ack, unsigned char flags,
		  unsigned short window, char *data, 
		  unsigned short datalen) 
{

struct pseudo_header { 
  /*for computing TCP checksum, see TCP/IP Illustrated p. 145 */
  unsigned long s_addr;
  unsigned long d_addr;
  char zer0;
  unsigned char protocol;
  unsigned short length;
};
char packet[sizeof(struct iphdr) + sizeof(struct tcphdr) + datalen];
 /*With these placement we get data and some field alignment so we aren&#039;t
   wasting too much in computing the checksum */
struct iphdr *ip = (struct iphdr *) packet;
struct tcphdr *tcp = (struct tcphdr *) (packet + sizeof(struct iphdr));
struct pseudo_header *pseudo =  (struct pseudo_header *) (packet + sizeof(struct iphdr) - sizeof(struct pseudo_header)); 
int res;
struct sockaddr_in sock;
char myname[MAXHOSTNAMELEN + 1];
struct hostent *myhostent;
int source_malloced = 0;

/* check that required fields are there and not too silly */
if ( !victim || !sport || !dport || sd &lt; 0) {
  fprintf(stderr, &quot;send_tcp_raw: One or more of your parameters suck!\n&quot;);
  return -1;
}

/* if they didn&#039;t give a source address, fill in our first address */
if (!source) {
  source_malloced = 1;
  source = safe_malloc(sizeof(struct in_addr));
  if (gethostname(myname, MAXHOSTNAMELEN) || 
      !(myhostent = gethostbyname(myname)))
    fatal(&quot;Your system is fucked up.\n&quot;); 
  memcpy(source, myhostent-&gt;h_addr_list[0], sizeof(struct in_addr));
  if (debugging &gt; 1)
    printf(&quot;We skillfully deduced that your address is %s\n&quot;, 
	   inet_ntoa(*source));
}


/*do we even have to fill out this damn thing?  This is a raw packet, 
  after all */
sock.sin_family = AF_INET;
sock.sin_port = htons(dport);
sock.sin_addr.s_addr = victim-&gt;s_addr;

bzero(packet, sizeof(struct iphdr) + sizeof(struct tcphdr));

pseudo-&gt;s_addr = source-&gt;s_addr;
pseudo-&gt;d_addr = victim-&gt;s_addr;
pseudo-&gt;protocol = IPPROTO_TCP;
pseudo-&gt;length = htons(sizeof(struct tcphdr) + datalen);

tcp-&gt;th_sport = htons(sport);
tcp-&gt;th_dport = htons(dport);
if (seq)
  tcp-&gt;th_seq = htonl(seq);
else tcp-&gt;th_seq = rand() + rand();

if (flags &amp; TH_ACK &amp;&amp; ack)
  tcp-&gt;th_ack = htonl(seq);
else if (flags &amp; TH_ACK)
  tcp-&gt;th_ack = rand() + rand();

tcp-&gt;th_off = 5 /*words*/;
tcp-&gt;th_flags = flags;

if (window)
  tcp-&gt;th_win = window;
else tcp-&gt;th_win = htons(2048); /* Who cares */

tcp-&gt;th_sum = in_cksum((unsigned short *)pseudo, sizeof(struct tcphdr) + 
		       sizeof(struct pseudo_header) + datalen);

/* Now for the ip header */
bzero(packet, sizeof(struct iphdr)); 
ip-&gt;version = 4;
ip-&gt;ihl = 5;
ip-&gt;tot_len = htons(sizeof(struct iphdr) + sizeof(struct tcphdr) + datalen);
ip-&gt;id = rand();
ip-&gt;ttl = 255;
ip-&gt;protocol = IPPROTO_TCP;
ip-&gt;saddr = source-&gt;s_addr;
ip-&gt;daddr = victim-&gt;s_addr;
ip-&gt;check = in_cksum((unsigned short *)ip, sizeof(struct iphdr));

if (debugging &gt; 1) {
printf(&quot;Raw TCP packet creation completed!  Here it is:\n&quot;);
readtcppacket(packet,ntohs(ip-&gt;tot_len));
}
if (debugging &gt; 1) 
  printf(&quot;\nTrying sendto(%d , packet, %d, 0 , %s , %d)\n&quot;,
	 sd, ntohs(ip-&gt;tot_len), inet_ntoa(*victim),
	 sizeof(struct sockaddr_in));
if ((res = sendto(sd, packet, ntohs(ip-&gt;tot_len), 0,
		  (struct sockaddr *)&amp;sock, sizeof(struct sockaddr_in))) == -1)
  {
    perror(&quot;sendto in send_tcp_raw&quot;);
    if (source_malloced) free(source);
    return -1;
  }
if (debugging &gt; 1) printf(&quot;successfully sent %d bytes of raw_tcp!\n&quot;, res);

if (source_malloced) free(source);
return res;
}

/* A simple program I wrote to help in debugging, shows the important fields
   of a TCP packet*/
int readtcppacket(char *packet, int readdata) {
struct iphdr *ip = (struct iphdr *) packet;
struct tcphdr *tcp = (struct tcphdr *) (packet + sizeof(struct iphdr));
char *data = packet +  sizeof(struct iphdr) + sizeof(struct tcphdr);
int tot_len;
struct in_addr bullshit, bullshit2;
char sourcehost[16];
int i;

if (!packet) {
  fprintf(stderr, &quot;readtcppacket: packet is NULL!\n&quot;);
  return -1;
    }
bullshit.s_addr = ip-&gt;saddr; bullshit2.s_addr = ip-&gt;daddr;
tot_len = ntohs(ip-&gt;tot_len);
strncpy(sourcehost, inet_ntoa(bullshit), 16);
i =  4 * (ntohs(ip-&gt;ihl) + ntohs(tcp-&gt;th_off));
if (ip-&gt;protocol == IPPROTO_TCP)
  if (ip-&gt;frag_off) printf(&quot;Packet is fragmented, offset field: %u&quot;,
			   ip-&gt;frag_off);
  else {
    printf(&quot;TCP packet: %s:%d -&gt; %s:%d (total: %d bytes)\n&quot;, sourcehost, 
	   ntohs(tcp-&gt;th_sport), inet_ntoa(bullshit2), 
	   ntohs(tcp-&gt;th_dport), tot_len);
    printf(&quot;Flags: &quot;);
    if (!tcp-&gt;th_flags) printf(&quot;(none)&quot;);
    if (tcp-&gt;th_flags &amp; TH_RST) printf(&quot;RST &quot;);
    if (tcp-&gt;th_flags &amp; TH_SYN) printf(&quot;SYN &quot;);
    if (tcp-&gt;th_flags &amp; TH_ACK) printf(&quot;ACK &quot;);
    if (tcp-&gt;th_flags &amp; TH_PUSH) printf(&quot;PSH &quot;);
    if (tcp-&gt;th_flags &amp; TH_FIN) printf(&quot;FIN &quot;);
    if (tcp-&gt;th_flags &amp; TH_URG) printf(&quot;URG &quot;);
    printf(&quot;\n&quot;);
    printf(&quot;ttl: %hi &quot;, ip-&gt;ttl);
    if (tcp-&gt;th_flags &amp; (TH_SYN | TH_ACK)) printf(&quot;Seq: %lu\tAck: %lu\n&quot;, 
						  tcp-&gt;th_seq, tcp-&gt;th_ack);
    else if (tcp-&gt;th_flags &amp; TH_SYN) printf(&quot;Seq: %lu\n&quot;, ntohl(tcp-&gt;th_seq));
    else if (tcp-&gt;th_flags &amp; TH_ACK) printf(&quot;Ack: %lu\n&quot;, ntohl(tcp-&gt;th_ack));
  }
if (readdata &amp;&amp; i &lt; tot_len) {
printf(&quot;Data portion:\n&quot;);
while(i &lt; tot_len)  printf(&quot;%2X%c&quot;, data[i], (++i%16)? &#039; &#039; : &#039;\n&#039;);
printf(&quot;\n&quot;);
}
return 0;
}

/* We don&#039;t exactly need real crypto here (thank god!)\n&quot;*/
int shortfry(unsigned short *ports) {
int num;
unsigned short tmp;
int i;

for(i=0; i &lt; number_of_ports; i++) {
  num = rand() % (number_of_ports);
  tmp = ports[i];
  ports[i] = ports[num];
  ports[num] = tmp;
}
return 1;
}


/* Much of this is swiped from my send_tcp_raw function above, which 
   doesn&#039;t support fragmentation */
int send_small_fragz(int sd, struct in_addr *source, struct in_addr *victim,
		     int sport, int dport, int flags) {

struct pseudo_header { 
/*for computing TCP checksum, see TCP/IP Illustrated p. 145 */
  unsigned long s_addr;
  unsigned long d_addr;
  char zer0;
  unsigned char protocol;
  unsigned short length;
};
/*In this placement we get data and some field alignment so we aren&#039;t wasting
  too much to compute the TCP checksum.*/
char packet[sizeof(struct iphdr) + sizeof(struct tcphdr) + 100];
struct iphdr *ip = (struct iphdr *) packet;
struct tcphdr *tcp = (struct tcphdr *) (packet + sizeof(struct iphdr));
struct pseudo_header *pseudo = (struct pseudo_header *) (packet + sizeof(struct iphdr) - sizeof(struct pseudo_header)); 
char *frag2 = packet + sizeof(struct iphdr) + 16;
struct iphdr *ip2 = (struct iphdr *) (frag2 - sizeof(struct iphdr));
int res;
struct sockaddr_in sock;
int id;

/*Why do we have to fill out this damn thing? This is a raw packet, after all */
sock.sin_family = AF_INET;
sock.sin_port = htons(dport);
sock.sin_addr.s_addr = victim-&gt;s_addr;

bzero(packet, sizeof(struct iphdr) + sizeof(struct tcphdr));

pseudo-&gt;s_addr = source-&gt;s_addr;
pseudo-&gt;d_addr = victim-&gt;s_addr;
pseudo-&gt;protocol = IPPROTO_TCP;
pseudo-&gt;length = htons(sizeof(struct tcphdr));

tcp-&gt;th_sport = htons(sport);
tcp-&gt;th_dport = htons(dport);
tcp-&gt;th_seq = rand() + rand();

tcp-&gt;th_off = 5 /*words*/;
tcp-&gt;th_flags = flags;

tcp-&gt;th_win = htons(2048); /* Who cares */

tcp-&gt;th_sum = in_cksum((unsigned short *)pseudo, 
		       sizeof(struct tcphdr) + sizeof(struct pseudo_header));

/* Now for the ip header of frag1 */
bzero(packet, sizeof(struct iphdr)); 
ip-&gt;version = 4;
ip-&gt;ihl = 5;
/*RFC 791 allows 8 octet frags, but I get &quot;operation not permitted&quot; (EPERM)
  when I try that.  */
ip-&gt;tot_len = htons(sizeof(struct iphdr) + 16);
id = ip-&gt;id = rand();
ip-&gt;frag_off = htons(MORE_FRAGMENTS);
ip-&gt;ttl = 255;
ip-&gt;protocol = IPPROTO_TCP;
ip-&gt;saddr = source-&gt;s_addr;
ip-&gt;daddr = victim-&gt;s_addr;
ip-&gt;check = in_cksum((unsigned short *)ip, sizeof(struct iphdr));

if (debugging &gt; 1) {
  printf(&quot;Raw TCP packet fragment #1 creation completed!  Here it is:\n&quot;);
  hdump(packet,20);
}
if (debugging &gt; 1) 
  printf(&quot;\nTrying sendto(%d , packet, %d, 0 , %s , %d)\n&quot;,
	 sd, ntohs(ip-&gt;tot_len), inet_ntoa(*victim),
	 sizeof(struct sockaddr_in));
if ((res = sendto(sd, packet, ntohs(ip-&gt;tot_len), 0, 
		  (struct sockaddr *)&amp;sock, sizeof(struct sockaddr_in))) == -1)
  {
    perror(&quot;sendto in send_syn_fragz&quot;);
    return -1;
  }
if (debugging &gt; 1) printf(&quot;successfully sent %d bytes of raw_tcp!\n&quot;, res);

/* Create the second fragment */
bzero(ip2, sizeof(struct iphdr));
ip2-&gt;version = 4;
ip2-&gt;ihl = 5;
ip2-&gt;tot_len = htons(sizeof(struct iphdr) + 4); /* the rest of our TCP packet */
ip2-&gt;id = id;
ip2-&gt;frag_off = htons(2);
ip2-&gt;ttl = 255;
ip2-&gt;protocol = IPPROTO_TCP;
ip2-&gt;saddr = source-&gt;s_addr;
ip2-&gt;daddr = victim-&gt;s_addr;
ip2-&gt;check = in_cksum((unsigned short *)ip2, sizeof(struct iphdr));
if (debugging &gt; 1) {
  printf(&quot;Raw TCP packet fragment creation completed!  Here it is:\n&quot;);
  hdump(packet,20);
}
if (debugging &gt; 1) 
  printf(&quot;\nTrying sendto(%d , ip2, %d, 0 , %s , %d)\n&quot;, sd, 
	 ntohs(ip2-&gt;tot_len), inet_ntoa(*victim), sizeof(struct sockaddr_in));
if ((res = sendto(sd, ip2, ntohs(ip2-&gt;tot_len), 0, 
		  (struct sockaddr *)&amp;sock, sizeof(struct sockaddr_in))) == -1)
  {
    perror(&quot;sendto in send_tcp_raw&quot;);
    return -1;
  }
return 1;
}

/* Hex dump */
void hdump(unsigned char *packet, int len) {
unsigned int i=0, j=0;

printf(&quot;Here it is:\n&quot;);

for(i=0; i &lt; len; i++){
  j = (unsigned) (packet[i]);
  printf(&quot;%-2X &quot;, j);
  if (!((i+1)%16))
    printf(&quot;\n&quot;);
  else if (!((i+1)%4))
    printf(&quot;  &quot;);
}
printf(&quot;\n&quot;);
}


portlist fin_scan(struct in_addr target, unsigned short *portarray, 
		  struct in_addr *source, int fragment, portlist *ports) {

int rawsd, tcpsd;
int done = 0, badport, starttime, someleft, i, j=0, retries=2;
int source_malloc = 0;
int waiting_period = retries, sockaddr_in_size = sizeof(struct sockaddr_in);
int bytes, dupesinarow = 0;
unsigned long timeout;
struct hostent *myhostent;
char response[65535], myname[513];
struct iphdr *ip = (struct iphdr *) response;
struct tcphdr *tcp;
unsigned short portno[max_parallel_sockets], trynum[max_parallel_sockets];
struct sockaddr_in stranger;


timeout = (global_delay)? global_delay : (global_rtt)? (1.2 * global_rtt) + 10000 : 1e5;
bzero(&amp;stranger, sockaddr_in_size);
bzero(portno, max_parallel_sockets * sizeof(unsigned short));
bzero(trynum, max_parallel_sockets * sizeof(unsigned short));
starttime = time(NULL);


if (debugging || verbose)
  printf(&quot;Initiating FIN stealth scan against %s (%s), sleep delay: %ld useconds\n&quot;, current_name, inet_ntoa(target), timeout);

if (!source) {
  if (ouraddr.s_addr) {
    source = &amp;ouraddr;
  }
  else {
  source = safe_malloc(sizeof(struct in_addr));
  source_malloc = 1;
  if (gethostname(myname, MAXHOSTNAMELEN) || 
      !(myhostent = gethostbyname(myname)))
    fatal(&quot;Your system is fucked up.\n&quot;); 
  memcpy(source, myhostent-&gt;h_addr_list[0], sizeof(struct in_addr));
  }
  if (debugging || verbose) 
    printf(&quot;We skillfully deduced that your address is %s\n&quot;,
	   inet_ntoa(*source));
}

if ((rawsd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) &lt; 0 )
  perror(&quot;socket trobles in fin_scan&quot;);

if ((tcpsd = socket(AF_INET, SOCK_RAW, IPPROTO_TCP)) &lt; 0 )
  perror(&quot;socket trobles in fin_scan&quot;);

unblock_socket(tcpsd);
while(!done) {
  for(i=0; i &lt;  max_parallel_sockets; i++) {
    if (!portno[i] &amp;&amp; portarray[j]) {
      portno[i] = portarray[j++];
    }
    if (portno[i]) {
    if (fragment)
      send_small_fragz(rawsd, source, &amp;target, MAGIC_PORT, portno[i], TH_FIN);
    else send_tcp_raw(rawsd, source , &amp;target, MAGIC_PORT, 
		      portno[i], 0, 0, TH_FIN, 0, 0, 0);
    usleep(10000); /* *WE* normally do not need this, but the target 
		      lamer often does */
    }
  }

  usleep(timeout);
  dupesinarow = 0;
  while ((bytes = recvfrom(tcpsd, response, 65535, 0, (struct sockaddr *)
			   &amp;stranger, &amp;sockaddr_in_size)) &gt; 0) 
    if (ip-&gt;saddr == target.s_addr) {
      tcp = (struct tcphdr *) (response + 4 * ip-&gt;ihl);
      if (tcp-&gt;th_flags &amp; TH_RST) {
	badport = ntohs(tcp-&gt;th_sport);
	if (debugging &gt; 1) printf(&quot;Nothing open on port %d\n&quot;, badport);
	/* delete the port from active scanning */
	for(i=0; i &lt; max_parallel_sockets; i++) 
	  if (portno[i] == badport) {
	    if (debugging &amp;&amp; trynum[i] &gt; 0)
	      printf(&quot;Bad port %d caught on fin scan, try number %d\n&quot;,
		     badport, trynum[i] + 1);
	    trynum[i] = 0;
	    portno[i] = 0;
	    break;
	  }
	if (i == max_parallel_sockets) {
	  if (debugging)
	    printf(&quot;Late packet or dupe, deleting port %d.\n&quot;, badport);
	  dupesinarow++;
	  if (ports) deleteport(ports, badport, IPPROTO_TCP);
	}
      }
      else 
	if (debugging &gt; 1) {	  
	  printf(&quot;Strange packet from target%d!  Here it is:\n&quot;, 
		 ntohs(tcp-&gt;th_sport));
	  if (bytes &gt;= 40) readtcppacket(response,1);
	  else hdump(response,bytes);
	}
    }
  
  /* adjust waiting time if neccessary */
  if (dupesinarow &gt; 6) {
    if (debugging || verbose)
      printf(&quot;Slowing down send frequency due to multiple late packets.\n&quot;);
    if (timeout &lt; 10 * ((global_delay)? global_delay: global_rtt + 20000)) timeout *= 1.5;
    else {
      printf(&quot;Too many late packets despite send frequency decreases, skipping scan.\n&quot;);
      if (source_malloc) free(source);
      return *ports;
    }
  }


  /* Ok, collect good ports (those that we haven&#039;t received responses too 
     after all our retries */
  someleft = 0;
  for(i=0; i &lt; max_parallel_sockets; i++)
    if (portno[i]) {
      if (++trynum[i] &gt;= retries) {
	if (verbose || debugging)
	  printf(&quot;Good port %d detected by fin_scan!\n&quot;, portno[i]);
	addport(ports, portno[i], IPPROTO_TCP, NULL);
    send_tcp_raw( rawsd, source, &amp;target, MAGIC_PORT, portno[i], 0, 0, 
		  TH_FIN, 0, 0, 0);
	portno[i] = trynum[i] = 0;
      }
      else someleft = 1;
    }  

  if (!portarray[j] &amp;&amp; (!someleft || --waiting_period &lt;= 0)) done++;
}

if (debugging || verbose)
  printf(&quot;The TCP stealth FIN scan took %ld seconds to scan %d ports.\n&quot;, 
	 time(NULL) - starttime, number_of_ports);
if (source_malloc) free(source);
close(tcpsd);
close(rawsd);
return *ports;
}

int ftp_anon_connect(struct ftpinfo *ftp) {
int sd;
struct sockaddr_in sock;
int res;
char recvbuf[2048];
char command[512];

if (verbose || debugging) 
  printf(&quot;Attempting connection to ftp://%s:%s@%s:%i\n&quot;, ftp-&gt;user, ftp-&gt;pass,
	 ftp-&gt;server_name, ftp-&gt;port);

if ((sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) &lt; 0) {
  perror(&quot;Couldn&#039;t create ftp_anon_connect socket&quot;);
  return 0;
}

sock.sin_family = AF_INET;
sock.sin_addr.s_addr = ftp-&gt;server.s_addr;
sock.sin_port = htons(ftp-&gt;port); 
res = connect(sd, (struct sockaddr *) &amp;sock, sizeof(struct sockaddr_in));
if (res &lt; 0 ) {
  printf(&quot;Your ftp bounce proxy server won&#039;t talk to us!\n&quot;);
  exit(1);
}
if (verbose || debugging) printf(&quot;Connected:&quot;);
while ((res = recvtime(sd, recvbuf, 2048,7)) &gt; 0) 
  if (debugging || verbose) {
    recvbuf[res] = &#039;\0&#039;;
    printf(&quot;%s&quot;, recvbuf);
  }
if (res &lt; 0) {
  perror(&quot;recv problem from ftp bounce server&quot;);
  exit(1);
}

snprintf(command, 511, &quot;USER %s\r\n&quot;, ftp-&gt;user);
send(sd, command, strlen(command), 0);
res = recvtime(sd, recvbuf, 2048,12);
if (res &lt;= 0) {
  perror(&quot;recv problem from ftp bounce server&quot;);
  exit(1);
}
recvbuf[res] = &#039;\0&#039;;
if (debugging) printf(&quot;sent username, received: %s&quot;, recvbuf);
if (recvbuf[0] == &#039;5&#039;) {
  printf(&quot;Your ftp bounce server doesn&#039;t like the username \&quot;%s\&quot;\n&quot;, 
	 ftp-&gt;user);
  exit(1);
}
snprintf(command, 511, &quot;PASS %s\r\n&quot;, ftp-&gt;pass);
send(sd, command, strlen(command), 0);
res = recvtime(sd, recvbuf, 2048,12);
if (res &lt; 0) {
  perror(&quot;recv problem from ftp bounce server\n&quot;);
  exit(1);
}
if (!res) printf(&quot;Timeout from bounce server ...&quot;);
else {
recvbuf[res] = &#039;\0&#039;;
if (debugging) printf(&quot;sent password, received: %s&quot;, recvbuf);
if (recvbuf[0] == &#039;5&#039;) {
  fprintf(stderr, &quot;Your ftp bounce server refused login combo (%s/%s)\n&quot;,
	 ftp-&gt;user, ftp-&gt;pass);
  exit(1);
}
}
while ((res = recvtime(sd, recvbuf, 2048,2)) &gt; 0) 
  if (debugging) {
    recvbuf[res] = &#039;\0&#039;;
    printf(&quot;%s&quot;, recvbuf);
  }
if (res &lt; 0) {
  perror(&quot;recv problem from ftp bounce server&quot;);
  exit(1);
}
if (verbose) printf(&quot;Login credentials accepted by ftp server!\n&quot;);

ftp-&gt;sd = sd;
return sd;
}

int recvtime(int sd, char *buf, int len, int seconds) {

int res;
struct timeval timeout = {seconds, 0};
fd_set readfd;

FD_ZERO(&amp;readfd);
FD_SET(sd, &amp;readfd);
res = select(sd + 1, &amp;readfd, NULL, NULL, &amp;timeout);
if (res &gt; 0 ) {
res = recv(sd, buf, len, 0);
if (res &gt;= 0) return res;
perror(&quot;recv in recvtime&quot;);
return 0; 
}
else if (!res) return 0;
perror(&quot;select() in recvtime&quot;);
return -1;
}

portlist bounce_scan(struct in_addr target, unsigned short *portarray,
		     struct ftpinfo *ftp, portlist *ports) {
int starttime,  res , sd = ftp-&gt;sd,  i=0;
char *t = (char *)⌖ 
int retriesleft = FTP_RETRIES;
char recvbuf[2048]; 
char targetstr[20];
char command[512];
snprintf(targetstr, 20, &quot;%d,%d,%d,%d,0,&quot;, UC(t[0]), UC(t[1]), UC(t[2]), UC(t[3]));
starttime = time(NULL);
if (verbose || debugging)
  printf(&quot;Initiating TCP ftp bounce scan against %s (%s)\n&quot;,
	 current_name,  inet_ntoa(target));
for(i=0; portarray[i]; i++) {
  snprintf(command, 512, &quot;PORT %s%i\r\n&quot;, targetstr, portarray[i]);
  if (send(sd, command, strlen(command), 0) &lt; 0 ) {
    perror(&quot;send in bounce_scan&quot;);
    if (retriesleft) {
      if (verbose || debugging) 
	printf(&quot;Our ftp proxy server hung up on us!  retrying\n&quot;);
      retriesleft--;
      close(sd);
      ftp-&gt;sd = ftp_anon_connect(ftp);
      if (ftp-&gt;sd &lt; 0) return *ports;
      sd = ftp-&gt;sd;
      i--;
    }
    else {
      fprintf(stderr, &quot;Our socket descriptor is dead and we are out of retries. Giving up.\n&quot;);
      close(sd);
      ftp-&gt;sd = -1;
      return *ports;
    }
  } else { /* Our send is good */
    res = recvtime(sd, recvbuf, 2048,15);
    if (res &lt;= 0) perror(&quot;recv problem from ftp bounce server\n&quot;);
  
    else { /* our recv is good */
      recvbuf[res] = &#039;\0&#039;;
      if (debugging) printf(&quot;result of port query on port %i: %s&quot;, 
			    portarray[i],  recvbuf);
      if (recvbuf[0] == &#039;5&#039;) {
	if (portarray[i] &gt; 1023) {
	fprintf(stderr, &quot;Your ftp bounce server sucks, it won&#039;t let us feed bogus ports!\n&quot;);
	exit(1);
      }
      else {
	fprintf(stderr, &quot;Your ftp bounce server doesn&#039;t allow priviliged ports, skipping them.\n&quot;);
	while(portarray[i] &amp;&amp; portarray[i] &lt; 1024) i++;
	if (!portarray[i]) {
	  fprintf(stderr, &quot;And you didn&#039;t want to scan any unpriviliged ports.  Giving up.\n&quot;);
	  /*	  close(sd);
	  ftp-&gt;sd = -1;
	  return *ports;*/
	  /* screw this gentle return crap!  This is an emergency! */
	  exit(1);
	}
      }  
      }
    else  /* Not an error message */
      if (send(sd, &quot;LIST\r\n&quot;, 6, 0) &gt; 0 ) {
	res = recvtime(sd, recvbuf, 2048,12);
	if (res &lt;= 0)  perror(&quot;recv problem from ftp bounce server\n&quot;);
	else {
	  recvbuf[res] = &#039;\0&#039;;
	  if (debugging) printf(&quot;result of LIST: %s&quot;, recvbuf);
	  if (!strncmp(recvbuf, &quot;500&quot;, 3)) {
	    /* fuck, we are not aligned properly */
	    if (verbose || debugging)
	      printf(&quot;misalignment detected ... correcting.\n&quot;);
	     res = recvtime(sd, recvbuf, 2048,10);
	  }
	  if (recvbuf[0] == &#039;1&#039; || recvbuf[0] == &#039;2&#039;) {
	    if (verbose || debugging) printf(&quot;Port number %i appears good.\n&quot;,
				portarray[i]);
	    addport(ports, portarray[i], IPPROTO_TCP, NULL);
	    if (recvbuf[0] == &#039;1&#039;) {
	    res = recvtime(sd, recvbuf, 2048,5);
	    recvbuf[res] = &#039;\0&#039;;
	    if ((res &gt; 0) &amp;&amp; debugging) printf(&quot;nxt line: %s&quot;, recvbuf);
	    }
	  }
	}
      }
    }
  }
}
if (debugging || verbose) 
  printf(&quot;Scanned %d ports in %ld seconds via the Bounce scan.\n&quot;,
	 number_of_ports, time(NULL) - starttime);
return *ports;
}

/* parse a URL stype ftp string of the form user:pass@server:portno */
int parse_bounce(struct ftpinfo *ftp, char *url) {
char *p = url,*q, *s;

if ((q = strrchr(url, &#039;@&#039;))) /*we have username and/or pass */ {
  *(q++) = &#039;\0&#039;;
  if ((s = strchr(q, &#039;:&#039;)))
    { /* has portno */
      *(s++) = &#039;\0&#039;;
      strncpy(ftp-&gt;server_name, q, MAXHOSTNAMELEN);
      ftp-&gt;port = atoi(s);
    }
  else  strncpy(ftp-&gt;server_name, q, MAXHOSTNAMELEN);

  if ((s = strchr(p, &#039;:&#039;))) { /* User AND pass given */
    *(s++) = &#039;\0&#039;;
    strncpy(ftp-&gt;user, p, 63);
    strncpy(ftp-&gt;pass, s, 255);
  }
  else { /* Username ONLY given */
    printf(&quot;Assuming %s is a username, and using the default password: %s\n&quot;,
	   p, ftp-&gt;pass);
    strncpy(ftp-&gt;user, p, 63);
  }
}
else /* no username or password given */ 
  if ((s = strchr(url, &#039;:&#039;))) { /* portno is given */
    *(s++) = &#039;\0&#039;;
    strncpy(ftp-&gt;server_name, url, MAXHOSTNAMELEN);
    ftp-&gt;port = atoi(s);
  }
  else  /* default case, no username, password, or portnumber */
    strncpy(ftp-&gt;server_name, url, MAXHOSTNAMELEN);

ftp-&gt;user[63] = ftp-&gt;pass[255] = ftp-&gt;server_name[MAXHOSTNAMELEN] = 0;

return 1;
}


 
/*
 *      I&#039;ll bet you&#039;ve never seen this function before (yeah right)!
 *      standard swiped checksum routine.
 */
unsigned short in_cksum(unsigned short *ptr,int nbytes) {

register long           sum;            /* assumes long == 32 bits */
u_short                 oddbyte;
register u_short        answer;         /* assumes u_short == 16 bits */

/*
 * Our algorithm is simple, using a 32-bit accumulator (sum),
 * we add sequential 16-bit words to it, and at the end, fold back
 * all the carry bits from the top 16 bits into the lower 16 bits.
 */

sum = 0;
while (nbytes &gt; 1)  {
sum += *ptr++;
nbytes -= 2;
}

/* mop up an odd byte, if necessary */
if (nbytes == 1) {
oddbyte = 0;            /* make sure top half is zero */
*((u_char *) &amp;oddbyte) = *(u_char *)ptr;   /* one byte only */
sum += oddbyte;
}

/*
 * Add back carry outs from top 16 bits to low 16 bits.
 */

sum  = (sum &gt;&gt; 16) + (sum &amp; 0xffff);    /* add high-16 to low-16 */
sum += (sum &gt;&gt; 16);                     /* add carry */
answer = ~sum;          /* ones-complement, then truncate to 16 bits */
return(answer);
}

What can nmap Do:
-----------------
Network Mapped (Nmap) is a network scanning and host detection tool that is very useful during several steps of penetration testing. 
Nmap is not limited to merely gathering information and enumeration, but it is also powerful utility that can be used as a vulnerability detector or a security scanner. 
So Nmap is a multipurpose tool, and it can be run on many different operating systems including Windows, Linux, BSD, and Mac.
 Nmap is a very powerful utility that can be used to:

Detect the live host on the network (host discovery)
Detect the open ports on the host (port discovery or enumeration)
Detect the software and the version to the respective port (service discovery)
Detect the operating system, hardware address, and the software version
Detect the vulnerability and security holes (Nmap scripts)
Nmap is a very common tool, and it is available for both the command line interface and the graphical user interface.
How to use Nmap? You might have heard this question many times before, but in my opinion, this is not the right question to ask. 
The best way to start off exploring Nmap is to ask: How can I use Nmap effectively? This article was written in an effort to answer that question.
Nmap uses different techniques to perform scanning including: TCP connect() scanning, TCP reverse ident scanning, FTP bounce scanning and so on. 
All these types of scanning have their own advantages and disadvantages, and we will discuss them as we go on.
It is a basic scan, and it is also called half-open scanning because this technique allows Nmap to get information from the remote host without the complete TCP handshake process, Nmap sends SYN packets to the destination, but it does not create any sessions, As a result, the target computer can’t create any log of the interaction because no session was initiated, making this feature an advantage of the TCP SYN scan.

If there is no scan type mentioned on the command, then avTCP SYN scan is used by default, but it requires the root/administrator privileged.

# nmap -sS 192.168.1.1

TCP connect() scan (-sT)

This the default scanning technique used, if and only if the SYN scan is not an option, because the SYN scan requires root privilege. Unlike the TCP SYN scan, it completes the normal TCP three way handshake process and requires the system to call connect(), which is a part of the operating system. Keep in mind that this technique is only applicable to find out the TCP ports, not the UDP ports.

# nmap -sT 192.168.1.1

UDP Scan (-sU)

As the name suggests, this technique is used to find an open UDP port of the target machine. It does not require any SYN packet to be sent because it is targeting the UDP ports. But we can make the scanning more effective by using -sS along with –sU. UDP scans send the UDP packets to the target machine, and waits for a response—if an error message arrives saying the ICMP is unreachable, then it means that the port is closed; but if it gets an appropriate response, then it means that the port is open.

# nmap -sU 192.168.1.1

FIN Scan (-sF)

Sometimes a normal TCP SYN scan is not the best solution because of the firewall. IDS and IPS scans might be deployed on the target machine, but a firewall will usually block the SYN packets. A FIN scan sends the packet only set with a FIN flag, so it is not required to complete the TCP handshaking.

root@bt:~# nmap -sF 192.168.1.8

Starting Nmap 5.51 ( http://nmap.org ) at 2012-07-08 19:21 PKT

Nmap scan report for 192.168.1.8

Host is up (0.000026s latency).

Not shown: 999 closed ports

PORT STATE SERVICE

111/tcp open|filtered rpcbind

The target computer is not able to create a log of this scan (again, an advantage of FIN). Just like a FIN scan, we can perform an xmas scan (-sX) and Null scan (-sN). The idea is same but there is a difference between each type of scan. For example, the FIN scan sends the packets containing only the FIN flag, where as the Null scan does not send any bit on the packet, and the xmas sends FIN, PSH, and URG flags.

Ping Scan (-sP)

Ping scanning is unlike the other scan techniques because it is only used to find out whether the host is alive or not, it is not used to discover open ports. Ping scans require root access s ICMP packets can be sent, but if the user does not have administrator privilege, then the ping scan uses connect() call.

# nmap -sP 192.168.1.1

Version Detection (-sV)

Version detection is the right technique that is used to find out what software version is running on the target computer and on the respective ports. It is unlike the other scanning techniques because it is not used to detect the open ports, but it requires the information from open ports to detect the software version. In the first step of this scan technique, version detection uses the TCP SYN scan to find out which ports are open.

# nmap -sV 192.168.1.1

Idle Scan (-sI)

Idle scan is one of my favorite techniques, and it is an advance scan that provides complete anonymity while scanning. In idle scan, Nmap doesn’t send the packets from your real IP address—instead of generating the packets from the attacker machine, Nmap uses another host from the target network to send the packets. Let’s consider an example to understand the concept of idle scan:

nmap -sI zombie_host target_host

# nmap -sI 192.168.1.6 192.168.1.1

The idle scan technique (as mentioned above) is used to discover the open ports on 192.168.1.1 while it uses the zombie_host (192.168.1.6) to communicate with the target host. So this is an ideal technique to scan a target computer anonymously.

There are many other scanning techniques are available like FTP bounce, fragmentation scan, IP protocol scan. and so on; but we have discussed the most important scanning techniques (although all of the scanning techniques can important depending on the situation you are dealing with).


Your arsenal
------------

Which unix you use is entirely up to you. I suggest you verify that nmap will run on your
flavour of unix before deciding on one in particular. Linux, BSD, and SunOS are good choices.
HP-UX, AIX, IRIX, SCO, XENIX, and the rest of the plethora of unix clones MAY work, but
you&#039;ll be sailing untested waters.

Here&#039;s the list of other programs you might want to install:
* nmap      (The defacto security scanner)
* nc        (NetCat - The &quot;IP Swiss Army Knife&quot;)
* tcpdump   (The original sniffer. Personally, I prefer snort, but tcpdump will run
             on just about any unix out there...)
* nping      (Nping is an open source tool for network packet generation, response analysis and response time measurement. 
				Nping can generate network packets for a wide range of protocols, allowing users full control over protocol headers.)
* lynx      (Excellent console based webbrowser. Always handy to have)
* ncat      (The modified version of nc by FYODOR)
* Ncrack    (Ncrack is a high-speed network authentication cracking tool.
			It was built to help companies secure their networks by proactively testing all their hosts and networking devices for poor passwords.)
For the Tiger Team member involved in physical audits, nothing is more valuable than
a laptop with a network card in it, running unix. It can be carried around throughout
the company building, and plugged into ethernet jacks and start sniffing/scanning immediatley.
I personally would suggest NetBSD or OpenBSD for this purpose, because they are small,
fast, mobile, and VERY capable unix systems.







Fundamentals
------------

In order to understand how to make your scans efficient and effective, you have to grasp a few
concepts about TCP/IP networking, and how the operating system accomplishes this.

All of the internet (which relies very heavily on TCP/IP) uses packets to send data back and
forth. There is no direct stream of data like, say, a telephone connection. Instead, the
computer sends packets, which are processed, filtered, fragmented, and routed throughout
other computers, until this packet of data reaches its ultimate destination.

If this concept is completely foreign to you, you will probably have much difficulty
understanding basic portscanning. In any case, you must understand how computers
can cary on simultaneous connections to different computers at once. The explanation
can actually get quite detailed, but is the basis of portscanning. Here are the basics:

Every internet connected computer has an IP address (either permanently designated to
that very machine, or dynamically assigned upon connecting to the network) which
uniquely identifies that machine to all other machines on the network. Think of the
IP address as a name for the computer. All packets you want to send to a particular
computer, you would slap that address onto the packets you want to send, and throw that
packet out onto the internet, and let the internet take care of getting that packet
to the machine with the destination&#039;s IP address.

But what if I want to have 2 connections to one IP address simultaneously? How will my
computer know which packets are for which connection? Ports, my friend. Each internet
connected computer has 65535 potential ports available to them. Keep in mind that usually
only ports greater than 1024 are designated for general use, with the rest of the ports
reserved for services on machines, like webservers (port 80), FTP servers (port 21), SSH
servers (port 22). At least that&#039;s how it&#039;s supposed to work. There are to many exceptions
to list. For instance, IRC servers (port 6667), MySQL (port 3306). Note: One of the reasons
why I insisted you have root access on your unix machine is that if you want to listen on a
port belown 1024 in unix, you simply must have root privileges. Unix won&#039;t let you &quot;bind&quot; to
that port otherwise. Note that this is not necessary for most portscanning techniques, but
can be very valuable in certain situations.

Okay. So what happens when I, as a client, want to open a connection to a computer
on the internet on a specific port?

This also is quite involved, so I&#039;ll summarize.

You slap together a small packet which has a special &quot;flag&quot; set on it: SYN (Synchronizing).
Then you slap on your own IP address (the &quot;source IP&quot;). Then you pick a random, unused port
between 1024 and 65535, and slap that on the packet (the &quot;source port&quot;). Next you slap on
the destination&#039;s IP address (the &quot;destination IP&quot;), and the port you want to connect to
(&quot;the destination port&quot;). Then you send the packet onto the internet and (hopefully) a few
milliseconds later it will arrive at its destination.

From here on in, all TCP/IP packets for this connection will use the same ports and
IP addresses, except, of course, when the server sends a packet, then the source becomes
the destination, and vice versa.

So, upon recieving the packet, the server must make a decision. First off, does the server
want to talk to this IP address that&#039;s knocking on its door, so to speak. If it does,
it will check if the source port is indeed open for communication (SYNchronization, as it
were). If so, it replies with another packet, except this one has not only the SYN
flag set, but also the ACK. If, on the other hand, this port is NOT open, it sends
an ICMP message (which is NOT, in fact TCP/IP, but operates over the internet nonetheless):
an RST (reset). The user at the client&#039;s computer would probably get an error message like
&quot;the service you requested is not online at &lt;insert IP address here&gt;&quot;.

Assuming that all went well and a SYN/ACK was transmitted, the client will then reply with a packet
with only the ACK flag set. Then, the 2 can begin sending data packets between them (which
all, as a matter of fact, have the ACK flag set). Now this may seem like an awful amount
of trouble to go through to establish a connection... Why not just start sending packets?
Well, if you think about it, this is the minimal amount of communication required for verifying
to both parties that data can, in fact, be sent in 2 directions. Interestingly, there is
a second method of sending data over the internet as well, called UDP/IP, which basically
DOES just start sending packets. Unfortunatley, UDP/IP is renowned for its unreliability.
Not only are packets NOT guaranteed to arrive in order and without data corruption, but
their arrival isn&#039;t guaranteed at all! UDP does have its place, though, especially
when you don&#039;t need full data integrity (Streaming audio is the classic exmple). nmap offers
UDP/IP scanning techniques too, by the way.)


A couple notes before we proceed to actual port scanning:
* Here&#039;s what an IP address might look like: 192.168.24.53.
* All information in this manual deals with IPv4.
* Often, IPs and DNS names can be used interchangably. Think about DNS names, like
  hypervivid.com, as being turned into an IP by the operating system before being
  used by the networking code.
* TCP/IP connections are also closed via ICMP (ideally), or by timeout (as is often the case)
* If a client that DIDN&#039;T request a connection ever recieves a SYN/ACK packet, it is
  supposed to reply with an ICMP message responding appropriately.




Port-Scanning
-------------


Basically, for this section, you can simply throw out all other port scanners, and learn
how to use nmap. nmap is an extremely powerful, free security scanner that, in my opinion,
beats the pants off even the most pricey commercial scanners on the market. A skilled nmap
wielder can scan through firewalls, determine remote operating systems, preform literally
dozens of different types of scans, and even bounce scans off of FTP servers, so the
victim will think the FTP server is scanning them. Congratulations go to Fyodor, the author
of nmap, and all the other hackers who helped make nmap the incredible beast that it is
today.

This is by no means a complete nmap manual. The most complete documentation is, of course,
the freely available source code. Next to that, you have to rely on the man page, even though
the man page neglects to mention several interesting features of nmap that you could only
ever find buried deep inside the source. I&#039;ll touch upon several of the different scan
types, OS detection, tips, and a few of these &quot;undocumented features&quot;.
Okay, here&#039;s a very simple nmap scan:

nmap 192.168.9.3

This uses many defaults. It defaults to a standard TCP scan. You could also have done it like so:

nmap -sT 192.168.9.3


Description of -sT:

Basically, this scan attempts a full TCP/IP connection as described above with every port
listed in nmap&#039;s custom /etc/services file. It then reports all ports it finds open.

Note: If you&#039;re not, in fact, scanning over the network (for example, nmap localhost), this
is the scan you want to use. It&#039;s VERY fast, and most IP loggers don&#039;t log TCP/IP connection
attempts from &#039;localhost&#039;.

Note: If you don&#039;t have root on the box you&#039;re scanning from, this is the only &quot;standard&quot;
scan you can do as this scan doesn&#039;t use raw sockets, and instead relies on the ubiquitous
connect() system call.


Advantages:

*  Fairly fast scan
*  DOESN&#039;T require root privileges.


Disadvantages:

*  VERY easily detectable.




Description of -sS:

So let&#039;s consider a &quot;SYN scan&quot;, or &quot;half-open scanning&quot; as it is commonly called. Basically
it works like this: Your machine injects a SYN packet of the appropriate port and IP 
address onto the network stream so that your OS doesn&#039;t even know it&#039;s sending out this packet,
that way it won&#039;t be expecting a SYN/ACK packet back from the server. Then, nmap starts
listening directly into the network stream until it sees either SYN/ACKs or the ICMP
messages saying the port is closed. That&#039;s all nmap has to do. The OS, upon recieving this
SYN/ACK packet from the scan victim, thinks &quot;I didn&#039;t request this connection, I&#039;d better
send an ICMP error message...&quot;. It&#039;s important that your OS does this, otherwise the server
will sit there expecting an ACK packet for quite some time, which eats up memory and such.
This is referred to as SYN flooding, which is something you DON&#039;T want to do if stealthiness
is your game. (I&#039;ll touch briefly on how nmap can be used as a very powerful SYN flooding
tool a bit later). It&#039;s called half-open scanning because a full connection is never made.
nmap takes just enough information it needs, and never has to open a full connection.

Advantages:

*  Fairly stealthy...
*  Most firewalling software doesn&#039;t log these particular scans, although many do.
*  Reasonably fast scan. Sometimes faster than -sT, sometimes not.


Disadvatages:
*  You need to be root to preform this scan. 
*  I&#039;ve found this scan can be signifigantly slower than -sT on older hardware with 
   ISA ethernet cards for whatever reason.
*  Still sends packets to the victim that have your IP on them.





Description of -sF, -sX, -sN:

There are 3 other types of &quot;standard&quot; TCP/IP scans: -sF, -sX, and -sN. Basically they have
to do with setting various TCP/IP flags on the packets that you scan with, relying on
the standard methods of handling these unusual packets set out in the networking standards:
the RFCs. To be honest, I get very little use out of any of these scans. They aren&#039;t much
more difficult to detect and log than -sS, and you can&#039;t be certain that all scanned OSs
respond according to the RFCs, so chances are you&#039;ll have to use a different scan just to
confirm the results of these ones! Of course, there are people that really like these
scans. See the nmap man page for details.


Advantages:

*  Debatably more stealthy than SYN scans.
*  These scans will impress your friends if you do them right. :)


Disadvantages:

*  Sometimes you get cryptic, misleading results.
*  Still sends packets to the victim that have your IP on them.





Description of -sI:

This is an exciting new scan that has just recently been incorporated into nmap. Few people
seem to know how it works, but Fyodor has promised us some documentation on this scan soon.
If it works as advertised, this scan has an incredible amount of potential. I&#039;ve played with
it a bit, but haven&#039;t got it working.


Advantages:

*  No packets sent to the victim from your IP!
*  Your friends will idol you if you do them right. :)


Disadvantages:

*  Probably has some serious limitations. This document will be updated when I understand
   more of this scan.




Description of -sA:

This little doozy of a scan is highly underrated, in my opinion. It has a very large amount
of legitimate network debugging uses. Basically it works like this: You want to find out
if a firewall is filtering certain ports (filtering means not letting you see which ports
are open behind the firewall by not returning ICMP messages saying you can&#039;t be reached).
Good for mapping out firewall rulesets. Plus if you know a port is open behind a firewall,
you can deduce wether or not you&#039;re dealing with a stateful packet filter. You can&#039;t find
out which ports are open on internal hosts, but you can determine which hosts to scan
when you get that short, 2 minute opportunity on the internal network after slipping through
a window right before closing time. ;) Seriously, though, in the hands of somebody who
understands firewalling principles, this scan can be incredibly valuable.

Note: When you&#039;re reading the nmap manpage, you&#039;ll see that it mentions the ACK packets
have random sequence numbers and such. It seems everybodies favorite IDS (intrustion
detection system), snort, was using a clever monitoring trick to see if somebody was
mapping out the firewall ruleset. See, earlier versions of nmap had a fixed value, so
it was trivial to pick them up, and find any GUARANTEED suspicious activity. That&#039;s some
nice detective work by the people who make snort. Congrats go to Fyodor too, who fixed it,
enabling us scanners to ACK scan free from worry. :)



Advantages:

*  This stuff is probably never logged.
*  Very useful for the skilled scanner.


Disadvantages:

*  It isn&#039;t really a port scan.




Description of -sW:

This is an even cooler scan than -sA. Not only does it use ACK packets instead of SYN packets
to find your targets filtering rules, but it will also report open ports on the target!
It does this via some sort of TCP/IP window size anomalies. Unfortunatley, it only
works for some OSs... (It works for many popular ones, though, including VMS, SunOS 4.X, and BSD)


Advantages:

*  Everything holds from -sA


Disadvantages:

*  Doesn&#039;t work on all Operating Systems




Description of -sU:

This is a UDP scan. UDP, or Uniform Datagram Protocol, is a straightforward protocol. You
send a packet, if it gets there, good. Any applications bound to that UDP port on
the destination gets the data. If it&#039;s closed, they send back an ICMP message. That&#039;s basically
it. -sU just sends UDP packets to all ports in the services file.

UDP isn&#039;t that commonly used, but often times it&#039;s a good idea to do a quick UDP scan
on a host just to see whats up. For instance they might be running NFS or something.
%90 of the time, I&#039;m simply not interested in UDP ports, so this feature doesn&#039;t get a lot of
use.


Advantages:

*  Quite fast, I&#039;ve noticed.
*  It&#039;s good to have a UDP scanning feature.


Disadvantages:

*  Not as useful as the other scans, usually.



Description of -sR:

Once there was a bug in a Beta version of nmap that killed -sR support temporarily... It
went unnoticed for quite some time before Fyodor himself caught the bug. He was somewhat
upset, because nobody had tested -sR on the Beta... I&#039;m sorry Fyodor, but I&#039;ve never once
used -sR. Has to do with scanning for SunRPC ports, and finding their versions and whatnot.
(See the manpage for info). Personally, I think this scan belongs in an application level
scanner, NOT in nmap, but this is, of course, a matter for continuous debate.




Description of -sO:

This is an interesting scan. It doesn&#039;t scan for ports at all. It scans for open
internet protocols that the target is accepting... I&#039;ve only ever used this out of
curiosity or to impress clients. :)




Description of -sL and -sP:

This would be a good time to bring up an excellent feature of nmap. It can scan more than
one host from a single command line entry! Yes, that&#039;s right, you could scan your whole subnet
with this command:

nmap -sS 192.168.0.0/24

or

nmap -sS 192.168.0.0-255

You can do all sorts of crazy combinations, like:

nmap -sS 1,3,9-11.3-9.-1.5-

That would scan a LOT of hosts... I REALLY like how Fyodor did this... It&#039;s so... useful!


Anyways, the -sL scan is handy when you have an extremely complicated IP range to scan, and
you just want to make sure nmap is interpreting your command the way you want it. At least,
that&#039;s the only use *I* can think of for it... See, -sL DOESN&#039;T scan anything... It doesn&#039;t
send any packets out on your network...

-sP is completely different. It pings hosts to see if they&#039;re up or not. This is a very
useful scan. Say I wanted to see which hosts are up on my subnet, I&#039;d do a:

nmap -sP 192.168.0.1/24

nmap, by default uses both ICMP and ACK packets to identify wether a host is up or not, although
you can change this behaviour with the -P switch, which will be discussed shortly.






-P&lt;insert mode here&gt;

nmap usually wants to confirm that a host is up before scanning it, so it sends out &quot;pings&quot;
to the target and waits for its replies. Often, you&#039;ll want different methods of pinging
hosts, or you don&#039;t want to ping at all. This is where the -P switch comes in:

See the man page for the different available modes. One of the most useful is -P0. This is
for when you KNOW the host is up, but they are dropping pings.



-F

By default, nmap will scan all ports &lt; 1024, plus the ports listed in nmap&#039;s special services
file: /usr/local/share/nmap/nmap-services normally. The -F scan will only scan the ports listed
in the services file. Actually, the &quot;fast&quot; scan isn&#039;t signifigantly faster than a normal
scan. You save scanning 435 ports; maybe a few seconds. I almost never use this switch. If
you really want a fast scan, think about which ports you are interested in, and use the -p
switch (keep reading) to narrow down the scan. IF, however, you want to scan all 65535 ports
on a host, you should use this scan:

nmap -p 1- target.com


Which leads us to our next switch...



-p &lt;port range&gt;

This is one of the most commonly used switches. It specifies what ports you actually
want to scan. It uses similar syntax as specifying multiple host scanning, and is
equally flexible.

Some examples:

nmap -p 2-500 target.com
nmap -p 2,4,8,29,500-9000 target.com
nmap -p -300,60000- target.com
nmap -sS -P0 -p 2-500 target.com



-O

Remote operating system identification is one of nmap&#039;s coolest features. The hacker community
that develops nmap always sends in new OS &quot;fingerprints&quot; of new or obscure operating systems,
so nmap has an incredible ability to remotley identify almost any internet connected computer.

Note: You must be root to use this feature.
Note: Usually, nmap must know about 1 open and 1 closed port, although there are exceptions.



-I

This option is designed to find out who &quot;owns&quot; the process that is listening on the open
ports you&#039;ve found. Many default unix installations actually come with an ident daemon
running (port 113), so this option can be quite useful. Keep in mind, though, it is trivial
to write an ident daemon that responds with any user for any process. Never fully rely on this scan.



-g &lt;port&gt;

This switch is an interesting one, and is rarely given the credit it deserves. If the target
only responds to packets from a certain source port, this switch can help get your scan through,
or if a firewall is doing something crazy, like only letting in port 53 as the source port.
This is common on many poorly configured firewalls hiding a DNS server, I&#039;m told. (Ideally,
it would look at the IP too, not just the source port). As with any cool option, this switch
requires root privileges.



-T &lt;Paranoid|Sneaky|Polite|Normal|Aggressive|Insane&gt;

This switch controls the speed that you want to portscan. Sometimes, spreading your port
scan packets out will get by an IDS on the target system. Other times, you may just want
to conserve (or saturate) network bandwidth. See the man page for details.



-v and -d

Verbose and debugging. It&#039;s often a good idea to use the -v switch, as you will often be able
to determine more information about anything that went wrong. You can use as many -v switches
as you like in the command, and each one cumulatively makes the output more and more verbose.
This stops being effective after about 3 -v switches. -d is the debugging mode, and probably
isn&#039;t necessary for everyday scans, but it helps untold amounts in the debugging process.



-iR

Picks random IP addresses to scan. nmap recently endured a massive overhaul to ensure that
these random scans don&#039;t scan private (non-routable) networks, or government computers who
probably won&#039;t take to kindly to your portscan. This switch is of limited usefulness, but
may by valuable for statistical analysis or seeing how a outward-destined packet filtering
firewall will filter a random array of IPs.



-M &lt;sockets&gt;

This useful option allows you to specify how many sockets you would like to limit nmap to use
for scanning. See, nmap will scan multiple ports at once, and for a normal -sT scan, it must
go through the BSD sockets interface to use the network. Needless to say, any other type of scan
(except possibly -sU) is unaffected by this switch, as it doesn&#039;t use the sockets interface at
all: It just directly injects packets onto the network, bypassing the operating system altogether.
This is why root is required. This switch is especially useful on BSD machines, I&#039;ve noticed.
Some of them (especially on older hardware) seem to jam up and lag a bit while preforming
-sT scans, although I&#039;ve never seen one crash before. Listen to the man page, though: Use
-sS over -sT whenever possible.



-o&lt;logging method&gt;

Generally, nmap will output its results in human readable form to stdout. Usually, when I want
to save my logs, I&#039;ll do this:

nmap -sS target.com | tee /home/doug/scans/target.com-sS

This works just fine for me, but people seem to like using this switch to save output
elsewhere. See the man page for details. One useful feature that I haven&#039;t experimented
much with is the --resume switch that will let you resume a canceled nmap scan. Again,
refer to the man page.




Practical Scanning 
------------------

Many novice scanners don&#039;t recognize the importance of cataloging your scans. If you simply
port scan to standard output, and read the results, you will often forget your results
and be forced to repreform the scan, which is not stealthy in the least. Create a directory
for storing your scans, and name them appropriatley, with all the switches in the filename,
so as to avoid any confusion.

Always carefully consider what information you are actually after BEFORE you start scanning.
Nothing will give you away faster than a bunch of blind, thoughtless scans. This is what
most IDSs are designed to detect, afterall. For instance, if you want to find the operating
system of a webserver NOT running SSL, use this scan:

nmap -sS -P0 -O -p 80,443 www.target.com

The logic behind this scan is left as an exercise to the reader.

Always keep in mind that anything you do can, and often is, logged.

The only real way to become an expert portscanner is practise, practise, and more practise.
You&#039;ll see a lot of strange things if you scan enough computers, and often it is interesting
and educational to discover the causes of these anomalies. Scan your own machines,
scan your friends machines, and you will learn a lot about scanning and networking in
general.

Scanning with NEW Scripts 
------------------------------

Many hackers now dont have the time to search in google for the right exploit that exploits the service
he wants.Now with the help of the L1on at the https://forum.intern0t.org/hacking-tools-utilities/3553-exploitdb-nse-nmap-script.html
he says &quot;This is just a little nmap script I wrote. It searches the exploitdb archive for possible exploits. 
It is very verbose and can give you false positives, but I like it that way, and there was no other good way I could think of to not skip over a possible exploit. 
Currently it is set to use the archive on BT, if you would like to use it on something else just download the archive and change the file location&quot;
This tool can be only used in bactrack but with some fixes in directories you will find yourself using this tool to all linux systems.
The script is:

description = [[Searches for exploits in the exploitdb on Backtrack. This archive can also be found at http://www.exploitdb.com]]
author = &quot;L10n&quot;
license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;
categories = {&quot;safe&quot;, &quot;vuln&quot;}

require(&quot;stdnse&quot;)

portrule = function(host, port)
    return port.state == &quot;open&quot;
end

action = function(host, port)
    local n = port.version.product
    local exploits = &quot;&quot;
    for line in io.lines (&quot;/pentest/exploits/exploitdb/files.csv&quot;) do
         if string.match(line, n) and string.match(line, &quot;remote&quot;) then
             local items = split(line, &quot;,&quot;)
             local file  = items[2]
             local desc  = items[3]
             exploits    = exploits..file..&quot; ---&gt; &quot;..desc..&quot;\n&quot;
         end
    end
    if not string.match(exploits, &quot;\n&quot;) then
        exploits = nil
    end
    exploits = &quot; \n&quot;..exploits
    return exploits
end

function split(str, pat)
    local t = {}  -- NOTE: use {n = 0} in Lua-5.0
    local fpat = &quot;(.-)&quot; .. pat
    local last_end = 1
    local s, e, cap = str:find(fpat, 1)
    while s do
        if s ~= 1 or cap ~= &quot;&quot; then
	    table.insert(t,cap)
        end
        last_end = e+1
        s, e, cap = str:find(fpat, last_end)
    end
    if last_end &lt;= #str then
        cap = str:sub(last_end)
        table.insert(t, cap)
    end
    return t
end

To use this tool in linux systems you should change the path of io.lines that for the program is the line 647 here in my guide.
You set where the files.csv where it is and you scan the target with the syntax of:
nmap -sV --script=exploitdb.nse scanme.nmap.org
Starting Nmap 5.21 ( http://nmap.org ) at 2010-12-19 04:25 PST
NSE: Script Scanning completed.
Nmap scan report for scanme.nmap.org (64.13.134.52)
Host is up (0.071s latency).
Not shown: 995 filtered ports
PORT    STATE  SERVICE VERSION
22/tcp  open   ssh     OpenSSH 4.3 (protocol 2.0)
| exploitdb:  
| platforms/linux/remote/25.c ---&gt; &quot;OpenSSH/PAM &lt;= 3.6.1p1 Remote Users Discovery Tool&quot;
| platforms/linux/remote/26.sh ---&gt; &quot;OpenSSH/PAM &lt;= 3.6.1p1 Remote Users Ident (gossh.sh)&quot;
| platforms/multiple/remote/3303.sh ---&gt; &quot;Portable OpenSSH &lt;= 3.6.1p-PAM / 4.1-SUSE Timing Attack Exploit&quot;
| platforms/multiple/remote/3303.sh ---&gt; &quot;Portable OpenSSH &lt;= 3.6.1p-PAM / 4.1-SUSE Timing Attack Exploit&quot;
|_platforms/linux/remote/6094.txt ---&gt; &quot;Debian OpenSSH Remote SELinux Privilege Elevation Exploit (auth)&quot;
25/tcp  closed smtp
53/tcp  open   domain
80/tcp  open   http    Apache httpd 2.2.3 ((CentOS))
113/tcp closed auth

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 37.84 seconds

Scanning hosts with perl script made by cypherround in https://forum.intern0t.org/hacking-tools-utilities/3283-perl-script-simplify-nmap.html
This perl script automatize the work of the simple.
Here you just add the target and the port and you get what you want.
Here is the Script:
#! /usr/bin/perl

###########################################################################################
# This script was created by cypherround
# The purpose of the script is to simplify my favorite nmap scans
# without having to input the parameters of the specific scan.
# Feel free to use this scan for yourself and if you would like me
# to add any other types of scans let me know and I will input them 
# into the script. Thanks happy hacking!
###########################################################################################
 
use strict;
use warnings;

print &quot;\nScript created by cypherround\n\n&quot;;

my @a;         #aggressive scan
my @ao;        #aggressive scan with output to file
my @aa;        #aggressive scan of all 65535 ports
my @aao;    #aggressive scan of all 65535 ports with output
my @ap;        #aggressive scan with specific port
my @apo;    #aggressive scan with specific port and output
my @os;        #os fingerprint scan
my @oso;    #os fingerprint scan with output
my @oss;    #os fingerprint service scan
my @osso;    #os fingerprint service scan with output
my @osp;    #os fingerprint scan with specific port
my @ospo;    #os fingerprint scan with specific port and output
my @osps;    #os fingerprint service scan with specific port
my @ospso;    #os fingerprint service scan with specific port and output
my @r;        #random IP scan
my @ro;        #random IP scan with output to file
my @ra;        #random IP scan of all 65535 ports
my @rao;    #random IP scan of all 65535 ports with output
my @rp;        #random IP scan with specific port
my @rpo;    #random IP scan with specific port and output
my @s;        #stealth scan
my @so;        #stealth scan with output to file
my @sa;        #stealth scan of all 65535 ports
my @sao;    #stealth scan of all 65535 ports with output
my @sp;        #stealth scan with specific port
my @spo;    #stealth scan with specific port and output
my @sss;    #stealth service scan
my @ssso;    #stealth service scan with output to file
my @sssa;    #stealth service scan of all 65535 ports
my @sssao;    #stealth service scan of all 65535 ports with output
my @sssp;    #stealth service scan with specific port
my @ssspo;    #stealth service scan with specific port and output
my @u;        #udp scan
my @uo;        #udp scan with output to file
my @ua;        #udp scan of all 65535 ports
my @uao;    #udp scan of all 65535 ports with output
my @up;        #udp scan with specific port
my @upo;    #udp scan with specific port and output
my @ut;        #udp &amp; tcp scan
my @uto;    #udp &amp; tcp scan with output to file
my @uta;    #udp &amp; tcp scan of all 65535 ports
my @utao;    #udo &amp; tcp scan of all 65535 ports with output
my @utp;    #udp &amp; tcp scan with specific port
my @utpo;    #udp &amp; tcp scan with specific port and output
my $ip;        #specified ip
my $output;    #specified output file
my $port;    #specified port
my $random;    #specifide amount of random IPs
my $scan;    #specified type of scan to use

print &quot;Here are your options for your nmap scan (enter the abbreviation in parenthesis):\n\n aggressive(a)\n aggresive with output(ao)\n aggressive 65535 ports(aa)\n aggressive 65535 ports with output(aao)\n aggressive with specific port(ap)\n aggressive specific port and output (apo)\n os fingerprint scan(os)\n os fingerprint scan with output(oso)\n os fingerprint service scan(oss)\n os fingerprint service scan with output(osso)\n os fingerprint scan with specific port(osp)\n os fingerprint scan with specific port and output(ospo)\n os fingerprint service scan with specific port(osps)\n os fingerprint scan with specific port and output(ospso)\n random IPs(r)\n random IPs with output(ro)\n random IPs all 65535 ports(ra)\n random IPs all 65535 ports with output(rao)\n random IPs with specific port(rp)\n random IPs with specific port and output(rpo)\n stealth(s)\n stealth with output(so)\n stealth scan of all 65535 ports(sa)\n stealth scan with all 65535 ports with output(sao)\n stealth scan with specific port(sp)\n stealth scan with specfifi port and output(spo)\n stealth service scan(sss)\n stealth service scan with output(ssso)\n stealth service scan of all 65535 ports(sssao)\n stealth service scan of all 65535 ports with output(sssao)\n stealth service scan with specific port(sssp)\n stealth service scan with specific port and output(ssspo)\n udp(u)\n udp with output(uo)\n udp of all 65535 ports(ua)\n udp of all 65535 ports with output(uao)\n udp with specifc port(up)\n udp with specific port and output(upo)\n udp/tcp(ut)\n udp/tcp with output(uto)\n udp/tcp of all 65535 ports(uta)\n udp/tcp if all 65535 ports with output(utao)\n udp/tcp with specific port(utp)\n udp/tcp with specific port and output(utpo)\n&quot; ;
$scan=&lt;STDIN&gt;;
chomp($scan);

if ($scan eq &quot;r&quot; or $scan eq &quot;ro&quot; or $scan eq &quot;ra&quot; or $scan eq &quot;rao&quot; or $scan eq &quot;rp&quot; or $scan eq &quot;rpo&quot;) {
    print &quot;How many random IPs would you like to scan? \n&quot;;
    $random=&lt;STDIN&gt;;
    chomp($random);
}

elsif ($scan eq &quot;ao&quot; or $scan eq &quot;aao&quot; or $scan eq &quot;apo&quot; or $scan eq &quot;oso&quot; or $scan eq &quot;osso&quot; or $scan eq &quot;ospo&quot; or $scan eq &quot;ospso&quot; or $scan eq &quot;ro&quot; or $scan eq &quot;rao&quot; or $scan eq &quot;rpo&quot; or $scan eq &quot;so&quot; or $scan eq &quot;sao&quot; or $scan eq &quot;spo&quot; or $scan eq &quot;ssso&quot; or $scan eq &quot;sssao&quot; or $scan eq &quot;ssspo&quot; or $scan eq &quot;uo&quot; or $scan eq &quot;uao&quot; or $scan eq &quot;upo&quot; or $scan eq &quot;uto&quot; or $scan eq &quot;utao&quot; or $scan eq &quot;utpo&quot;) {
    print &quot;What would you like your file to be named? add .txt to the filenname (ex: aggressive.txt) \n&quot;;
    $output=&lt;STDIN&gt;;
    chomp($output);
}

elsif ($scan eq &quot;a&quot; or $scan eq &quot;ao&quot; or $scan eq &quot;aa&quot; or $scan eq &quot;aao&quot; or $scan eq &quot;ap&quot; or $scan eq &quot;apo&quot; or $scan eq &quot;os&quot; or $scan eq &quot;oso&quot; or $scan eq &quot;oss&quot; or $scan eq &quot;osso&quot; or $scan eq &quot;osp&quot; or $scan eq &quot;ospo&quot; or $scan eq &quot;osps&quot; or $scan eq &quot;ospso&quot; or $scan eq &quot;s&quot; or $scan eq &quot;so&quot; or $scan eq &quot;sa&quot; or $scan eq &quot;sao&quot; or $scan eq &quot;sp&quot; or $scan eq &quot;spo&quot; or $scan eq &quot;sss&quot; or $scan eq &quot;ssso&quot; or $scan eq &quot;sssa&quot; or $scan eq &quot;sssao&quot; or $scan eq &quot;sssp&quot; or $scan eq &quot;ssspo&quot; or $scan eq &quot;u&quot; or $scan eq &quot;uo&quot; or $scan eq &quot;ua&quot; or $scan eq &quot;uao&quot; or $scan eq &quot;up&quot; or $scan eq &quot;upo&quot; or $scan eq &quot;ut&quot; or $scan eq &quot;uto&quot; or $scan eq &quot;uta&quot; or $scan eq &quot;utao&quot; or $scan eq &quot;utp&quot; or $scan eq &quot;utpo&quot;) {
    print &quot;Enter the IP you are searching for: \n&quot;;
    $ip=&lt;STDIN&gt;;
    chomp($ip);
}

if ($scan eq &quot;ap&quot; or $scan eq &quot;apo&quot; or $scan eq &quot;osp&quot; or $scan eq &quot;ospo&quot; or $scan eq &quot;osps&quot; or $scan eq &quot;ospso&quot; or $scan eq &quot;rp&quot; or $scan eq &quot;rpo&quot; or $scan eq &quot;up&quot; or $scan eq &quot;upo&quot; or $scan eq &quot;utp&quot; or $scan eq &quot;utpo&quot; or $scan eq &quot;sp&quot; or $scan eq &quot;spo&quot; or $scan eq &quot;sssp&quot; or $scan eq &quot;ssspo&quot;) {
    print &quot;Enter the ports you would like to scan: (ex: 21,22,80,443)\n&quot;;
    $port=&lt;STDIN&gt;;
    chomp($port);
}

if ($scan eq &quot;a&quot;) {
    @a = `nmap -v -A $ip`;
        print &quot;@a\n&quot;;
}

if ($scan eq &quot;ao&quot;) {
    @ao = `nmap -v -A $ip -oG $output`;
        print &quot;@ao\n&quot;;
}

if ($scan eq &quot;aa&quot;) {
    @aa = `nmap -v -A $ip -p-`;
        print &quot;@aa\n&quot;;
}

if ($scan eq &quot;aao&quot;) {
    @aao = `nmap -v -A $ip -p- -oG $output`;
        print &quot;@aao\n&quot;;
}

if ($scan eq &quot;ap&quot;) {
    @ap = `nmap -v -A $ip -p $port`;
        print &quot;@ap\n&quot;;
}

if ($scan eq &quot;apo&quot;) {
    @apo = `nmap -v -A $ip -p $port -oG $output`;
        print &quot;@apo\n&quot;;
}

if ($scan eq &quot;os&quot;) {
    @os = `sudo nmap -v -O $ip`;
        print &quot;@os\n&quot;;
}

if ($scan eq &quot;oso&quot;) {
    @oso = `sudo nmap -v -O $ip -oG $output`;
        print &quot;@oso\n&quot;;
}

if ($scan eq &quot;oss&quot;) {
    @oss = `sudo nmap -v -O -sV $ip`;
        print &quot;@oss\n&quot;;
}

if ($scan eq &quot;osso&quot;) {
    @osso = `sudo nmap -v -O -sV $ip -oG $output`;
        print &quot;@osso\n&quot;;
}

if ($scan eq &quot;osp&quot;) {
    @osp = `sudo nmap -v -O $ip -p $port`;
        print &quot;@osp\n&quot;;
}

if ($scan eq &quot;ospo&quot;) {
    @ospo = `sudo nmap -v -O $ip -p $port -oG $output`;
        print &quot;@ospo\n&quot;;
}

if ($scan eq &quot;osps&quot;) {
    @osps = `sudo nmap -v -O -sV $ip -p $port`;
        print &quot;@osps\n&quot;;
}

if ($scan eq &quot;ospso&quot;) {
    @ospso = `sudo nmap -v -O -sV $ip -p $port -oG $output`;
        print &quot;@ospso\n&quot;;
}

if ($scan eq &quot;r&quot;) {
    @r = `nmap -v -iR $random -PN`;
        print &quot;@r\n&quot;;
}

if ($scan eq &quot;ro&quot;) {
    @ro = `nmap -v -iR $random -PN -oG $output`; 
        print &quot;@ro&quot;;
}

if ($scan eq &quot;ra&quot;) {
    @ra = `nmap -v -iR $random -PN -p-`;
        print &quot;@ra\n&quot;;
}

if ($scan eq &quot;rao&quot;) {
    @rao = `nmap -v -iR $random -PN -p- -oG $output`;
        print &quot;@rao\n&quot;;
}

if ($scan eq &quot;rp&quot;) {
    @rp = `nmap -v -iR $random -PN -p $port`;
        print &quot;@rp\n&quot;;
}

if ($scan eq &quot;rpo&quot;) {
    @rpo = `nmap -v -iR $random -PN -p $port -oG $output`;
        print &quot;@rpo\n&quot;;
}


if ($scan eq &quot;s&quot;) {
    @s = `nmap -v -v -PN $ip`;
        print &quot;@s\n&quot;;
}

if ($scan eq &quot;so&quot;) {
    @so = `nmap -v -PN $ip -oG $output`;
        print &quot;@so\n&quot;;
}

if ($scan eq &quot;sa&quot;) {
    @sa = `nmap -v -PN $ip -p-`;
        print &quot;@sa\n&quot;;
}

if ($scan eq &quot;sao&quot;) {
    @sao = `nmap -v -PN $ip -p- -oG $output`;
        print &quot;@sao\n&quot;;
}

if ($scan eq &quot;sp&quot;) {
    @sp = `nmap -v -PN $ip -p $port`;
        print &quot;@sp\n&quot;;
}

if ($scan eq &quot;spo&quot;) {
    @spo = `nmap -v -PN $ip -p $port -oG $output`;
        print &quot;@spo\n&quot;;
}

if ($scan eq &quot;sss&quot;) {
    @sss = `nmap -v -v -sV -PN $ip`;
        print &quot;@sss\n&quot;;
}

if ($scan eq &quot;ssso&quot;) {
    @ssso = `nmap -v -sV -PN $ip -oG $output`;
        print &quot;@ssso\n&quot;;
}

if ($scan eq &quot;sssa&quot;) {
    @sssa = `nmap -v -sV -PN $ip -p-`;
        print &quot;@sssa\n&quot;;
}

if ($scan eq &quot;sssao&quot;) {
    @sssao = `nmap -v -sV -PN $ip -p- -oG $output`;
        print &quot;@sssao\n&quot;;
}

if ($scan eq &quot;sssp&quot;) {
    @sssp = `nmap -v -sV -PN $ip -p $port`;
        print &quot;@sssp\n&quot;;
}

if ($scan eq &quot;ssspo&quot;) {
    @ssspo = `nmap -v -sV -PN $ip -p $port -oG $output`;
        print &quot;@ssspo\n&quot;;
}

if ($scan eq &quot;u&quot;) {
    @u = `sudo nmap -v -sU $ip`;
        print &quot;@u\n&quot;;
}

if ($scan eq &quot;uo&quot;) {
    @uo = `sudo nmap -v -sU $ip -oG $output`;
        print &quot;@uo\n&quot;;
}

if ($scan eq &quot;ua&quot;) {
    @ua = `sudo nmap -v -sU $ip -p-`;
        print &quot;@ua\n&quot;;
}

if ($scan eq &quot;uao&quot;) {
    @uao = `sudo nmap -v -sU $ip -p- -oG $output`;
        print &quot;@uao\n&quot;;
}

if ($scan eq &quot;up&quot;) {
    @up = `sudo nmap -v -sU $ip -p $port`;
        print &quot;@up\n&quot;;
}

if ($scan eq &quot;upo&quot;) {
    @upo = `sudo nmap -v -sU $ip -p $port -oG $output`;
        print &quot;@upo\n&quot;;
}

if ($scan eq &quot;ut&quot;) {
    @ut = `sudo nmap -v -sU -sS $ip`;
        print &quot;@ut\n&quot;;
}

if ($scan eq &quot;uto&quot;) {
    @uto = `sudo nmap -v -sU -sS $ip -oG $output`;
        print &quot;@uto\n&quot;;
}

if ($scan eq &quot;uta&quot;) {
    @uta = `sudo nmap -v -sU -sS $ip -p-`;
        print &quot;@uta\n&quot;;
}

if ($scan eq &quot;utao&quot;) {
    @utao = `sudo nmap -v -sU -sS $ip -p- -oG $output`;
        print &quot;@utao\n&quot;;
}

if ($scan eq &quot;utp&quot;) {
    @utp = `sudo nmap -v -sU -sS $ip -p $port`;
        print &quot;@utp\n&quot;;
}

if ($scan eq &quot;utpo&quot;) {
    @utpo = `sudo nmap -v -sU -sS $ip -p $port -oG $output`;
        print &quot;@utpo\n&quot;;
}
Save it and chmod u+x the perl script to make it executable.

Cheat Sheet
-----------

Just founded out a complete reference to nmap in pdf version.This cheat sheet has almost the most used commands by pentesters 
and sysadmins to secure the perimeter , there are a lots of command to get into the world of nmap scanner.
So i would suggest to learn very good this tool becauze the part of scanning is the part where you have to find vuln 
of an target to exploit it.
The cheat sheet is in this url:
https://scadahacker.com/library/Documents/Cheat_Sheets/Hacking%20-%20NMap%20Quick%20Reference%20Guide.pdf

Nmap in your hands
------------------
Everything on the Nmap command-line that isn&#039;t an option (or option argument) is treated as a target 
host specification. The simplest case is to specify a target IP address or hostname for scanning. 
Sometimes you wish to scan a whole network of adjacent hosts. For this, Nmap supports CIDR-style 
addressing. You can append /numbits to an IP address or hostname and Nmap will scan every IP 
address for which the first numbits are the same as for the reference IP or hostname given. For 
example, 192.168.10.0/24 would scan the 256 hosts between 192.168.10.0 (binary: 11000000 
10101000 00001010 00000000) and 192.168.10.255 (binary: 11000000 10101000 00001010 
11111111), inclusive. 192.168.10.40/24 would do exactly the same thing. Given that the host 
scanme.nmap.org is at the IP address 205.217.153.62, the specification scanme.nmap.org/16 would 
scan the 65,536 IP addresses between 205.217.0.0 and 205.217.255.255. The smallest allowed value 
is /1, which scans half the Internet. The largest value is 32, which scans just the named host or IP 
address because all address bits are fixed. 
CIDR notation is short but not always flexible enough. For example, you might want to scan 
192.168.0.0/16 but skip any IPs ending with .0 or .255 because they are commonly broadcast 
addresses. Nmap supports this through octet range addressing. Rather than specify a normal IPaddress
 you can specify a comma separated list of numbers or ranges for each octet. For example, 
192.168.0-255.1-254 will skip all addresses in the range that end in .0 and or .255. Ranges need not 
be limited to the final octects: the specifier 0-255.0-255.13.37 will perform an Internet-wide scan for all 
IP addresses ending in 13.37. This sort of broad sampling can be useful for Internet surveys and 
research. 
IPv6 addresses can only be specified by their fully qualified IPv6 address or hostname. CIDR and 
octet ranges aren&#039;t supported for IPv6 because they are rarely useful. 
Nmap accepts multiple host specifications on the command line, and they don&#039;t need to be the same 
type. The command nmap scanme.nmap.org 192.168.0.0/8 10.0.0,1,3-7.0-255 does what you would 
expect. 

Decoys are used both in the initial ping scan (using ICMP, SYN, ACK, or whatever) and during 
the actual port scanning phase. Decoys are also used during remote OS detection (-O). 
Decoys do not work with version detection or TCP connect() scan. 
It is worth noting that using too many decoys may slow your scan and potentially even make it 
less accurate. Also, some ISPs will filter out your spoofed packets, but many do not restrict 
spoofed IP packets at all. 
-S &lt;IP_Address&gt; (Spoof source address) 
In some circumstances, Nmap may not be able to determine your source address ( Nmap will 
tell you if this is the case). In this situation, use -S with the IP address of the interface you wish 
to send packets through. 
Another possible use of this flag is to spoof the scan to make the targets think that someone 
else is scanning them. Imagine a company being repeatedly port scanned by a competitor! 
The -e option would generally be required for this sort of usage, and -P0 would normally be 
advisable as well. 
-e &lt;interface&gt; (Use specified interface) 
Tells Nmap what interface to send and receive packets on. Nmap should be able to detect this 
automatically, but it will tell you if it cannot. 
--source_port &lt;portnumber&gt;; -g &lt;portnumber&gt; (Spoof source port number) 
One surprisingly common misconfiguration is to trust traffic based only on the source port 
number. It is easy to understand how this comes about. An administrator will set up a shiny 
new firewall, only to be flooded with complains from ungrateful users whose applications 
stopped working. In particular, DNS may be broken because the UDP DNS replies from 
external servers can no longer enter the network. FTP is another common example. In active 
FTP transfers, the remote server tries to establish a connection back to the client to transfer 
the requested file. 
Secure solutions to these problems exist, often in the form of application-level proxies or 
protocol-parsing firewall modules. Unfortunately there are also easier, insecure solutions. 
Noting that DNS replies come from port 53 and active ftp from port 20, many admins have 
fallen into the trap of simply allowing incoming traffic from those ports. They often assume that 
no attacker would notice and exploit such firewall holes. In other cases, admins consider this a 
short-term stop-gap measure until they can implement a more secure solution. Then they 
forget the security upgrade. 
Overworked network administrators are not the only ones to fall into this trap. Numerous 
products have shipped with these insecure rules. Even Microsoft has been guilty. The IPsec 
filters that shipped with Windows 2000 and Windows XP contain an implicit rule that allows all 
TCP or UDP traffic from port 88 (Kerberos). In another well-known case, versions of the Zone 
Alarm personal firewall up to 2.1.25 allowed any incoming UDP packets with the source port 
53 (DNS) or 67 (DHCP).


Script Engine Scanning
----------------------

Some Words from nmap WEBsite
The Nmap Scripting Engine (NSE) is one of Nmap&#039;s most powerful and flexible features. It allows users to write (and share) simple scripts to automate a wide variety of networking tasks. Those scripts are then executed in parallel with the speed and efficiency you expect from Nmap. Users can rely on the growing and diverse set of scripts distributed with Nmap, or write their own to meet custom needs.

We designed NSE to be versatile, with the following tasks in mind:

Network discovery
This is Nmap&#039;s bread and butter. Examples include looking up whois data based on the target domain, querying ARIN, RIPE, or APNIC for the target IP to determine ownership, performing identd lookups on open ports, SNMP queries, and listing available NFS/SMB/RPC shares and services.

More sophisticated version detection
The Nmap version detection system (Chapter 7, Service and Application Version Detection) is able to recognize thousands of different services through its probe and regular expression signature based matching system, but it cannot recognize everything. For example, identifying the Skype v2 service requires two independent probes, which version detection isn&#039;t flexible enough to handle. 
Nmap could also recognize more SNMP services if it tried a few hundred different community names by brute force.
 Neither of these tasks are well suited to traditional Nmap version detection, but both are easily accomplished with NSE. For these reasons, version detection now calls NSE by default to handle some tricky services. This is described in the section called “Version Detection Using NSE”.

Vulnerability detection
When a new vulnerability is discovered, you often want to scan your networks quickly to identify vulnerable systems before the bad guys do. While Nmap isn&#039;t a comprehensive vulnerability scanner, NSE is powerful enough to handle even demanding vulnerability checks. Many vulnerability detection scripts are already available and we plan to distribute more as they are written.

Backdoor detection
Many attackers and some automated worms leave backdoors to enable later reentry. Some of these can be detected by Nmap&#039;s regular expression based version detection. For example, within hours of the MyDoom worm hitting the Internet, Jay Moran posted an Nmap version detection probe and signature so that others could quickly scan their networks for MyDoom infections. NSE is needed to reliably detect more complex worms and backdoors.

Vulnerability exploitation
As a general scripting language, NSE can even be used to exploit vulnerabilities rather than just find them. The capability to add custom exploit scripts may be valuable for some people (particularly penetration testers), though we aren&#039;t planning to turn Nmap into an exploitation framework such as Metasploit.

These listed items were our initial goals, and we expect Nmap users to come up with even more inventive uses for NSE.

Scripts are written in the embedded Lua programming language, version 5.2. The language itself is well documented in the books Programming in Lua, Second Edition and Lua 5.1 Reference Manual. The reference manual, updated for Lua 5.2, is also freely available online, as is the first edition of Programming in Lua. Given the availability of these excellent general Lua programming references, this document only covers aspects and extensions specific to Nmap&#039;s scripting engine.

NSE is activated with the -sC option (or --script if you wish to specify a custom set of scripts) and results are integrated into Nmap normal and XML output.

A typical script scan is shown in the Example 9.1. Service scripts producing output in this example are ssh-hostkey, which provides the system&#039;s RSA and DSA SSH keys, and rpcinfo, which queries portmapper to enumerate available services. The only host script producing output in this example is smb-os-discovery, which collects a variety of information from SMB servers. Nmap discovered all of this information in a third of a second.
NSE scripts are very powerful and have become one of Nmap&#039;s main strengths, performing
tasks from advanced version detection to vulnerability exploitation.

Each NSE script belongs to a category based on what it does. Current categories are the following:
 CATEGORY: 
- auth: scripts that work with authentication credentials																									
																																							
- broadcast: scripts that discover active hosts by broadcasting on a local network and adding them to a target list											
																																							
- brute: scripts that brute force the credentials of the remote service																						
																																							
- default: scripts that are automatically run with -sC or -A options																						
																																							
- discovery: scripts that try to acquire more information about the target network																			
																																							
- dos: scripts that may crash the target application and therefore cause a denial of service to the target													
																																							
- exploit: scripts that may be able to exploit the target application																						
																																							
- external: scripts that send data to a third party server over the network (whois)																			
																																						
- fuzzer: scripts that send invalid random data to the target to find undiscovered bugs																		
																																							
- intrusive: scripts that can cause the target to fail																										
																																							
- malware: scripts that test whether the target is infected by malware or backdoors																			
																																							
- safe: scripts that can be run safely, so they will not crash a server																						
																																							
- version: scripts that can determine the version of the application running on a target (they are run only when -sV option is specified)					
																																							
- vuln: scripts that can check whether the target is vulnerable to specific attacks																			
																																							
To include the title of the index document of a web server in your scan results, open your																	
terminal and type the following command:																													
																																							
$ nmap -sV --script http-title																																
$ nmap --script http-headers,http-title																														
Run all the scripts in the vuln category:																													
$ nmap -sV --script vuln &lt;target&gt;																															
Run the scripts in the categories version or discovery:																										
$ nmap -sV --script=&quot;version,discovery&quot; &lt;target&gt;																											
 Run all the scripts except for the ones in the exploit category:																							
$ nmap -sV --script &quot;not exploit&quot; &lt;target&gt;																													
Finding Geolocation of a IP																																	
nmap --script ip-geolocation-* &lt;target&gt;																														
Whois																																						
nmap --script WHOIS &lt;target&gt;																																
																																							
DNS records contains a lot of information about a particular domain which cannot be ignored.																
Of course there are specific tools for brute forcing DNS records which can produce better results but the dns-brute script can perform also 				
this job in case that we want to extract DNS information during our Nmap scans.																				
nmap -p80 --script dns-brute &lt;target&gt;																														
																																							
Reversein IP																																				
nmap --script http-reverse-ip &lt;target&gt;																														
																																							
Executing the Discovery Scripts																																	
																																							
This category of scripts is ideal when we need to have as much information as possible for a specific target.													
The next two images are a sample of what kind of information could be delivered to us when we run the Discovery Scripts.										
nmap --script=discovery &lt;target&gt;		//discovery is a category																														
                 goto CATEGORY;
I made those lines to tell that we can put every category in the finding bugs or vuln in a target host.
LAST:nmap –script-updatedb 

----------------------------------------------------------------------------------------------------------------------------------------
										Greetz to:														
										FYODOR:Nmap programmer												
										INFOSEC Institute													
										Str0ke(My friend who died, creator of milw0rm.com)													
										And All Who read this long paper									
-------------------------------------------------------------------------------------------------------------------------------------
            </code></pre>

                    </div>

                    <div class="card-footer">

                        <div class="row">

                            <div class="col">

                                <strong>Tags:</strong>

                                
                            </div>

                            <div class="col">

                                
                                
                            </div>

                            <div class="col">

                                <span class="float-right">

                                    <strong>Advisory/Source:</strong>

                                    <a href="" target="_blank">
                                        Link
                                    </a>

                                </span>

                            </div>

                        </div>

                        <div class="row mt-3">

                            <div class="btn-group ml-2">

                                <a class="btn btn-primary btn-fab btn-icon btn-round"
                                   href="/papers/35390" aria-label="View Previous Paper"
                                   data-toggle="tooltip" data-placement="top" title="Previous Paper" >
                                    <i class="mdi mdi-arrow-left mdi-36px"></i>
                                </a>

                            </div>

                            <div class="col">

                                <div class="btn-group float-right">

                                    <a class="btn btn-primary btn-fab btn-icon btn-round"
                                       href="/papers/35458" aria-label="View Next Paper"
                                       data-toggle="tooltip" data-placement="top" title="Next Paper" >
                                        <i class="mdi mdi-arrow-right mdi-36px"></i>
                                    </a>

                                </div>

                            </div>

                        </div>

                    </div>

                </div>

                <div class="card">

                    <div class="card-footer">

    <div class="d-none d-lg-block">

        <div class="container-fluid">

            <table class="table table-borderless text-center">

                <thead style="background-color:#083257;">

                <tr class="text-white">
                        <th>
                            <strong>Downloads</strong>
                        </th>
                        <th>
                            <strong>Certifications</strong>
                        </th>
                        <th>
                            <strong>Training</strong>
                        </th>
                        <th>
                            <strong>Professional Services</strong>
                        </th>
                    </tr>

                </thead>

                <tbody>

                <tr class="text-center">
                    <td>
                        <a href="https://www.kali.org/downloads/" target="_blank" rel="noopener">
                            Kali Linux
                        </a>
                    </td>
                    <td>
                        <a href="/pentest-training-with-kali-linux"
                           target="_blank" rel="noopener">OSCP
                        </a>
                    </td>
                    <td>
                        <a href="/pentest-training-with-kali-linux"
                           target="_blank" rel="noopener">Penetration Testing with Kali Linux (PWK) (PEN-200)
                           <br />All new for 2020
                        </a>
                    </td>
                    <td>
                        <a href="https://www.offensive-security.com/penetration-testing/"
                           target="_blank" rel="noopener">Penetration Testing
                        </a>
                    </td>
                </tr>

                <tr class="text-center">
                    <td>
                        <a href="https://www.offensive-security.com/kali-linux-nethunter-download/"
                           target="_blank" rel="noopener">
                            Kali NetHunter
                        </a>
                    </td>
                    <td>
                        <a href="/wireless-attacks-training"
                           target="_blank" rel="noopener">OSWP
                        </a>
                    </td>
                    <td>
                        <a href="/wireless-attacks-training"
                           target="_blank" rel="noopener">Offensive Security Wireless Attacks (WiFu) (PEN-210)
                        </a>
                    </td>
                    <td>
                        <a href="https://www.offensive-security.com/penetration-testing/#other-services"
                           target="_blank" rel="noopener">Advanced Attack Simulation
                        </a>
                    </td>
                </tr>
                <tr>
                    <td>
                        <a href="https://kali.training/downloads/Kali-Linux-Revealed-1st-edition.pdf"
                           target="_blank" rel="noopener">Kali Linux Revealed Book
                        </a>
                    </td>
                    <td>
                        <a href="/evasion-techniques-breaching-defenses"
                           target="_blank" rel="noopener">OSEP
                        </a>
                    </td>
                    <td>
                        <a href="/evasion-techniques-breaching-defenses"
                           target="_blank" rel="noopener">Evasion Techniques and Breaching Defences (PEN-300)
                           <br />All new for 2020
                        </a>
                    </td>
                    <td>
                        <a href="https://www.offensive-security.com/penetration-testing/#asa"
                           target="_blank" rel="noopener">Application Security Assessment
                        </a>
                    </td>
                </tr>

                <tr class="text-center">
                    <td></td>
                    <td>
                        <a href="/advanced-web-attacks"
                           target="_blank" rel="noopener">OSWE
                        </a>
                    </td>
                    <td>
                        <a href="/advanced-web-attacks"
                           target="_blank" rel="noopener">Advanced Web Attacks and Exploitation (AWAE) (WEB-300)
                           <br />Updated for 2020
                        </a>
                    </td>
                    <td></td>
                </tr>

                <tr class="text-center">
                    <td></td>
                    <td>
                        <a href="/windows-user-mode-exploit-development"
                           target="_blank" rel="noopener">OSED
                        </a>
                    </td>
                    <td>
                        <a href="/windows-user-mode-exploit-development"
                           target="_blank" rel="noopener">Windows User Mode Exploit Development (EXP-301)
                           <br />All new for 2021
                        </a>
                    </td>
                    <td></td>
                </tr>

                <tr class="text-center">
                    <td></td>
                    <td>
                        <a href="https://www.offensive-security.com/awe-osee/"
                           target="_blank" rel="noopener">OSEE
                        </a>
                    </td>
                    <td>
<!--
                        <a href="https://www.offensive-security.com/metasploit-unleashed/"
                           target="_blank" rel="noopener">[Free] Metasploit Unleashed (MSFU)
                        </a>
-->
                    </td>
                    <td></td>
                </tr>

                <tr class="text-center">
                    <td></td>
                    <td>
                        <a href="https://kali.training/"
                           target="_blank" rel="noopener">KLCP
                        </a>
                    </td>
                    <td>
                        <a href="https://kali.training/courses/kali-linux-revealed/"
                           target="_blank" rel="noopener" title="Your journey starts here!">[Free] Kali Linux Revealed
                        </a>
                    </td>
                    <td></td>
                </tr>

                </tbody>

            </table>

        </div>

    </div>

    <div class="d-lg-none text-center">

        <div class="btn-group btn-block mt-1">

            <a class="btn btn-block btn-primary dropdown-toggle" href="#" role="button" id="dropdownDownloads" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Downloads
            </a>

            <div class="dropdown-menu" aria-labelledby="dropdownDownloads">

                <a class="dropdown-item" href="https://www.kali.org/downloads/" target="_blank" rel="noopener">
                    Kali Linux
                </a>
                <a class="dropdown-item"
                   href="https://www.offensive-security.com/kali-linux-nethunter-download/"
                   target="_blank" rel="noopener">
                    Kali NetHunter
                </a>
                <a class="dropdown-item"
                   href="https://kali.training/downloads/Kali-Linux-Revealed-1st-edition.pdf"
                   target="_blank" rel="noopener">
                    Kali Linux Revealed Book
                </a>

            </div>

        </div>

        <div class="btn-group btn-block mt-1">

            <a class="btn btn-block btn-primary dropdown-toggle" href="#" role="button" id="dropdownCerts" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Certifications
            </a>

            <div class="dropdown-menu" aria-labelledby="dropdownCerts">

                <a class="dropdown-item"
                   href="/pentest-training-with-kali-linux"
                   target="_blank" rel="noopener">OSCP
                </a>
                <a class="dropdown-item"
                   href="/wireless-attacks-training"
                   target="_blank" rel="noopener">OSWP
                </a>
                <a class="dropdown-item"
                   href="/evasion-techniques-breaching-defenses"
                   target="_blank" rel="noopener">OSEP
                </a>
                <a class="dropdown-item"
                   href="/advanced-web-attacks"
                   target="_blank" rel="noopener">OSWE
                </a>
                <a class="dropdown-item"
                   href="/windows-user-mode-exploit-development"
                   target="_blank" rel="noopener">OSED
                </a>
                <a class="dropdown-item"
                   href="https://www.offensive-security.com/awe-osee/"
                   target="_blank" rel="noopener">OSEE
                </a>
                <a class="dropdown-item" href="https://kali.training/"
                   target="_blank" rel="noopener">KLCP
                </a>

            </div>

        </div>

        <div class="btn-group btn-block mt-1">

            <a class="btn btn-block btn-primary dropdown-toggle" href="#" role="button" id="dropdownTraining" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Training
            </a>

            <div class="dropdown-menu" aria-labelledby="dropdownTraining">

                <a class="dropdown-item"
                   href="/pentest-training-with-kali-linux"
                   target="_blank" rel="noopener"> - Penetration Testing with Kali Linux (PWK) (PEN-200)
                   <br />All new for 2020
                </a>
                <a class="dropdown-item"
                   href="/wireless-attacks-training"
                   target="_blank" rel="noopener">Offensive Security Wireless Attacks (WiFu) (PEN-210)
                </a>
                <a class="dropdown-item"
                   href="/evasion-techniques-breaching-defenses"
                   target="_blank" rel="noopener">Evasion Techniques and Breaching Defences (PEN-300)
                   <br />All new for 2020
                </a>
                <a class="dropdown-item"
                   href="/advanced-web-attacks"
                   target="_blank" rel="noopener">Advanced Web Attacks and Exploitation (AWAE) (WEB-300)
                   <br />Updated for 2020
                </a>
                <a class="dropdown-item"
                   href="/windows-user-mode-exploit-development"
                   target="_blank" rel="noopener">Windows User Mode Exploit Development (EXP-301)
                   <br />All new for 2021
                </a>
<!--
                <a class="dropdown-item" href="https://www.offensive-security.com/metasploit-unleashed/"
                   target="_blank" rel="noopener">[Free] Metasploit Unleashed (MSFU)
                </a>
-->
                <a class="dropdown-item" href="https://kali.training/courses/kali-linux-revealed/" target="_blank"
                   target="_blank" rel="noopener" title="Your journey starts here!">[Free] Kali Linux Revealed
                </a>

            </div>

        </div>

        <div class="btn-group btn-block mt-1">

            <a class="btn btn-block btn-primary dropdown-toggle" href="#" role="button" id="dropdownServices" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Pro Services
            </a>

            <div class="dropdown-menu" aria-labelledby="dropdownServices">

                <a class="dropdown-item" href="https://www.offensive-security.com/penetration-testing/"
                   target="_blank" rel="noopener">Penetration Testing
                </a>
                <a class="dropdown-item" href="https://www.offensive-security.com/penetration-testing/#other-services"
                   target="_blank" rel="noopener">Advanced Attack Simulation
                </a>
                <a class="dropdown-item" href="https://www.offensive-security.com/penetration-testing/#asa"
                   target="_blank" rel="noopener">Application Security Assessment
                </a>

            </div>

        </div>

    </div>

</div>

                </div>

            </div>

        </div>

    </div>


        
        <footer class="footer">

    <div class="container-fluid">

        <nav>

            <ul>

                <li>
                    <a href="https://twitter.com/exploitdb" target="_blank" aria-label="Exploit-DB Twitter" rel="noopener">

    <i class="mdi mdi-twitter mdi-36px"></i>

</a>


<a href="https://www.facebook.com/ExploitDB" target="_blank" aria-label="Exploit-DB Facebook" rel="noopener">

    <i class="mdi mdi-facebook mdi-36px"></i>
</a>

<a href="https://github.com/offensive-security/exploitdb" target="_blank" aria-label="Exploit-DB GitHub" rel="noopener">

    <i class="mdi mdi-github-circle mdi-36px"></i>
</a>                </li>

                <li>

                    <a href="/">
                        Exploit Database by Offensive Security
                    </a>

                </li>

                <li>

                    <a href="/terms">
                        Terms
                    </a>

                </li>

                <li>

                    <a href="/privacy">
                        Privacy
                    </a>

                </li>

                <li>

                    <a href="#" data-toggle="modal" data-target="#about">
                        About Us
                    </a>

                </li>

                <li>

                    <a href="/faq">
                        FAQ
                    </a>

                </li>

                <li>

                    <a href="/cookies">
                        Cookies
                    </a>

                </li>

            </ul>

        </nav>

        <div class="copyright mt-4">

            &copy;
            <a href="https://www.offensive-security.com/" target="_blank">OffSec Services Limited</a> 2021. All rights reserved.

        </div>

    </div>

    <!-- About EDB/GHDB Modal -->
<div class="modal fade bd-example-modal-lg" id="about" tabindex="-1"
     role="dialog" aria-labelledby="searchModalTitle" aria-hidden="true">

    <div class="modal-dialog modal-dialog-centered modal-dialog modal-lg"
         role="document">

        <div class="modal-content">

            <div class="modal-header">

                <h5 class="modal-title"
                    id="aboutModalTitle">About The Exploit Database
                </h5>

                <button type="button" class="close" data-dismiss="modal"
                        aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

            </div>

            <div class="modal-body">

                <div class="row">

                    <p>
                        <a href="https://www.offensive-security.com/" target="_blank" rel="noopener">
                            <img class="float-left" src="/images/offsec-logo-gray-trans-300x171.png"
                                 alt="Offensive Security">
                        </a>
                        The Exploit Database is maintained by <a
                                href="https://www.offensive-security.com/community-projects/"
                                target="_blank" rel="noopener">Offensive Security</a>, an information security training company
                        that provides various <a
                                href="https://www.offensive-security.com/courses-and-certifications/"
                                target="_blank" rel="noopener">Information Security Certifications</a> as well as high end <a
                                href="https://www.offensive-security.com/penetration-testing/"
                                target="_blank" rel="noopener">penetration testing</a> services. The Exploit Database is a
                        non-profit project that is provided as a public service by Offensive Security.
                    </p>

                    <p>The Exploit Database is a <a
                                href="http://cve.mitre.org/data/refs/refmap/source-EXPLOIT-DB.html" target="_blank" rel="noopener">CVE
                            compliant</a> archive of public exploits and corresponding vulnerable software,
                        developed for use by penetration testers and vulnerability researchers. Our aim is to serve
                        the most comprehensive collection of exploits gathered through direct submissions, mailing
                        lists, as well as other public sources, and present them in a freely-available and
                        easy-to-navigate database. The Exploit Database is a repository for exploits and
                        proof-of-concepts rather than advisories, making it a valuable resource for those who need
                        actionable data right away.
                    </p>

                    <p>The <a href="/google-hacking-database">Google Hacking Database (GHDB)</a>
                        is a categorized index of Internet search engine queries designed to uncover interesting,
                        and usually sensitive, information made publicly available on the Internet. In most cases,
                        this information was never meant to be made public but due to any number of factors this
                        information was linked in a web document that was crawled by a search engine that
                        subsequently followed that link and indexed the sensitive information.
                    </p>

                    <p>The process known as “Google Hacking” was popularized in 2000 by Johnny
                        Long, a professional hacker, who began cataloging these queries in a database known as the
                        Google Hacking Database. His initial efforts were amplified by countless hours of community
                        member effort, documented in the book Google Hacking For Penetration Testers and popularised
                        by a barrage of media attention and Johnny’s talks on the subject such as this early talk
                        recorded at <a href="https://www.defcon.org/html/links/dc-archives/dc-13-archive.html"
                                       target="_blank" rel="noopener">DEFCON 13</a>. Johnny coined the term “Googledork” to refer
                        to “a foolish or inept person as revealed by Google“. This was meant to draw attention to
                        the fact that this was not a “Google problem” but rather the result of an often
                        unintentional misconfiguration on the part of a user or a program installed by the user.
                        Over time, the term “dork” became shorthand for a search query that located sensitive
                        information and “dorks” were included with may web application vulnerability releases to
                        show examples of vulnerable web sites.
                    </p>

                    <p>After nearly a decade of hard work by the community, Johnny turned the GHDB
                        over to <a
                                href="https://www.offensive-security.com/community-projects/"
                                target="_blank" rel="noopener">Offensive Security</a> in November 2010, and it is now maintained as
                        an extension of the <a href="/">Exploit Database</a>. Today, the GHDB includes searches for
                        other online search engines such as <a href="https://www.bing.com/" target="_blank" rel="noopener">Bing</a>,
                        and other online repositories like <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>,
                        producing different, yet equally valuable results.
                    </p>


                </div>

            </div>

            <div class="modal-footer">

                <button type="button"
                        class="btn btn-primary"
                        data-dismiss="modal">Close
                </button>

            </div>

        </div>

    </div>

</div>


    <div class="modal fade bd-example-modal-lg" id="osresources" tabindex="-1"
     role="dialog" aria-labelledby="searchModalTitle" aria-hidden="true">

    <div class="modal-dialog modal-dialog-centered modal-dialog modal-lg"
         role="document">

        <div class="modal-content">

            <div class="modal-header">

                <h5 class="modal-title text-primary"
                    id="resourcesModalTitle">Offensive Security Resources
                </h5>

                <button type="button" class="close" data-dismiss="modal"
                        aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

            </div>

            <div class="modal-body">

                <table class="table dataTable table-borderless">

                            <thead>

                            <tr>
                                <th class="text-center"><strong>Downloads</strong></th>
                                <th class="text-center"><strong>Certifications</strong></th>
                                <th class="text-center"><strong>Training</strong></th>
                                <th class="text-center"><strong>Services</strong></th>
                            </tr>

                            </thead>

                            <tbody>

                            <tr class="text-center">

                                <td>
                                    <a href="https://www.kali.org/downloads/" target="_blank" rel="noopener">
                                        Kali Linux
                                    </a>
                                </td>
                                <td>
                                    <a href="/pentest-training-with-kali-linux"
                                       target="_blank" rel="noopener">OSCP
                                    </a>
                                </td>
                                <td>
                                    <a href="/pentest-training-with-kali-linux"
                                       target="_blank" rel="noopener">Penetration Testing with Kali Linux (PWK) (PEN-200)
                                       <br />All new for 2020
                                    </a>
                                </td>
                                <td>
                                    <a href="https://www.offensive-security.com/penetration-testing/"
                                       target="_blank" rel="noopener">Penetration Testing
                                    </a>
                                </td>

                            </tr>

                            <tr class="text-center">

                                <td>
                                    <a href="https://www.offensive-security.com/kali-linux-nethunter-download/"
                                       target="_blank" rel="noopener">
                                        Kali NetHunter
                                    </a>
                                </td>
                                <td>
                                    <a href="/wireless-attacks-training"
                                       target="_blank" rel="noopener">OSWP
                                    </a>
                                </td>
                                <td>
                                    <a href="/wireless-attacks-training"
                                       target="_blank" rel="noopener">Offensive Security Wireless Attacks (WiFu) (PEN-210)
                                    </a>
                                </td>
                                <td>
                                    <a href="https://www.offensive-security.com/penetration-testing/#other-services"
                                       target="_blank" rel="noopener">Advanced Attack Simulation
                                    </a>
                                </td>

                            </tr>

                            <tr class="text-center">

                                <td>
                                    <a href="https://kali.training/downloads/Kali-Linux-Revealed-1st-edition.pdf"
                                       target="_blank" rel="noopener">Kali Linux Revealed Book
                                    </a>
                                </td>
                                <td>
                                    <a href="/evasion-techniques-breaching-defenses"
                                       target="_blank" rel="noopener">OSEP
                                    </a>
                                </td>
                                <td>
                                    <a href="/evasion-techniques-breaching-defenses"
                                       target="_blank" rel="noopener">Evasion Techniques and breaching Defences (PEN-300)
                                       <br />All new for 2020
                                    </a>
                                </td>
                                <td>
                                    <a href="https://www.offensive-security.com/penetration-testing/#asa"
                                       target="_blank" rel="noopener">Application Security Assessment
                                    </a>
                                </td>

                            </tr>

                            <tr class="text-center">
                                <td></td>
                                <td>
                                    <a href="/advanced-web-attacks"
                                       target="_blank" rel="noopener">OSWE
                                    </a>
                                </td>
                                <td>
                                    <a href="/advanced-web-attacks"
                                       target="_blank" rel="noopener">Advanced Web Attacks and Exploitation (AWAE) (WEB-300)
                                       <br />Updated for 2020
                                    </a>
                                </td>
                                <td></td>
                            </tr>

                            <tr class="text-center">
                                <td></td>
                                <td>
                                    <a href="/windows-user-mode-exploit-development"
                                       target="_blank" rel="noopener">OSED
                                    </a>
                                </td>
                                <td>
                                    <a href="/windows-user-mode-exploit-development"
                                       target="_blank" rel="noopener">Windows User Mode Exploit Development (EXP-301)
                                       <br />All new for 2021
                                    </a>
                                </td>
                                <td></td>
                            </tr>

                            <tr class="text-center">
                                <td></td>
                                <td>
                                    <a href="https://www.offensive-security.com/awe-osee/"
                                       target="_blank" rel="noopener">OSEE
                                    </a>
                                </td>
                                <td>
<!--
                                    <a href="https://www.offensive-security.com/metasploit-unleashed/"
                                       target="_blank" rel="noopener">[Free] Metasploit Unleashed (MSFU)
                                    </a>
-->
                                </td>
                                <td></td>
                            </tr>

                            <tr class="text-center">
                                <td></td>
                                <td>
                                    <a href="https://kali.training/"
                                       target="_blank" rel="noopener">KLCP
                                    </a>
                                </td>
                                <td>
                                    <a href="https://kali.training/courses/kali-linux-revealed/" target="_blank"
                                       target="_blank" rel="noopener" title="Your journey starts here!">[Free] Kali Linux Revealed
                                    </a>
                                </td>
                                <td></td>
                            </tr>

                            </tbody>

                        </table>

            </div>

            <div class="modal-footer">

                <button type="button"
                        class="btn btn-primary"
                        data-dismiss="modal">Close
                </button>

            </div>

        </div>

    </div>

</div>

    <!-- Advanced Search Modal -->
<div class="modal fade bd-example-modal-lg" id="search" tabindex="-1"
     role="dialog" aria-labelledby="searchModalTitle" aria-hidden="true">

    <div class="modal-dialog modal-dialog-centered modal-dialog modal-lg"
         role="document">

        <div class="modal-content">

            <div class="modal-header">

                <h5 class="modal-title"
                    id="searchModalTitle">Search The Exploit Database
                </h5>

                <button type="button" class="close" data-dismiss="modal"
                        aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

            </div>

            <div class="modal-body">

                <form action="https://www.exploit-db.com/search" method="GET" id="searchForm">

                    <div class="row">

                        <div class="col-sm-12 col-lg-8">

                            <div class="form-group">

                                <label for="titleSearch" class="control-label text-primary">Title</label>

                                <input id="titleSearch" class="form-control" type="text" name="q" class="q"
                                       placeholder="Title" value="" autofocus>

                            </div>

                        </div>

                        <div class="col-sm-6 col-lg-4">

                            <div class="form-group">

                                <label for="cveSearch" class="control-label text-primary">CVE</label>

                                <input id="cveSearch" class="form-control" type="text" name="cve" class="cve"
                                       placeholder="2021-1234"
                                       value="" autofocus>

                            </div>

                        </div>

                    </div>

                    <div class="row">

                        <div class="col-sm-6 col-lg-4">

                            <label for="typeSearchSelect" class="text-primary">Type</label>

                            <select id="typeSearchSelect" name="type" class="form-control">

                                <option></option>
                                
                                    <option value="dos" >
                                        dos
                                    </option>


                                
                                    <option value="local" >
                                        local
                                    </option>


                                
                                    <option value="remote" >
                                        remote
                                    </option>


                                
                                    <option value="shellcode" >
                                        shellcode
                                    </option>


                                
                                    <option value="papers" >
                                        papers
                                    </option>


                                
                                    <option value="webapps" >
                                        webapps
                                    </option>


                                
                            </select>

                        </div>

                        <div class="col-sm-6 col-lg-4">

                            <label for="platformSearchSelect" class="text-primary">Platform</label>

                            <select id="platformSearchSelect" name="platform" class="form-control">

                                <option></option>
                                
                                    <option value="aix" >
                                        AIX
                                    </option>

                                
                                    <option value="asp" >
                                        ASP
                                    </option>

                                
                                    <option value="bsd" >
                                        BSD
                                    </option>

                                
                                    <option value="bsd_ppc" >
                                        BSD_PPC
                                    </option>

                                
                                    <option value="bsd_x86" >
                                        BSD_x86
                                    </option>

                                
                                    <option value="bsdi_x86" >
                                        BSDi_x86
                                    </option>

                                
                                    <option value="cgi" >
                                        CGI
                                    </option>

                                
                                    <option value="freebsd" >
                                        FreeBSD
                                    </option>

                                
                                    <option value="freebsd_x86" >
                                        FreeBSD_x86
                                    </option>

                                
                                    <option value="freebsd_x86-64" >
                                        FreeBSD_x86-64
                                    </option>

                                
                                    <option value="generator" >
                                        Generator
                                    </option>

                                
                                    <option value="hardware" >
                                        Hardware
                                    </option>

                                
                                    <option value="hp-ux" >
                                        HP-UX
                                    </option>

                                
                                    <option value="irix" >
                                        IRIX
                                    </option>

                                
                                    <option value="jsp" >
                                        JSP
                                    </option>

                                
                                    <option value="linux" >
                                        Linux
                                    </option>

                                
                                    <option value="linux_mips" >
                                        Linux_MIPS
                                    </option>

                                
                                    <option value="linux_ppc" >
                                        Linux_PPC
                                    </option>

                                
                                    <option value="linux_sparc" >
                                        Linux_SPARC
                                    </option>

                                
                                    <option value="linux_x86" >
                                        Linux_x86
                                    </option>

                                
                                    <option value="linux_x86-64" >
                                        Linux_x86-64
                                    </option>

                                
                                    <option value="minix" >
                                        MINIX
                                    </option>

                                
                                    <option value="multiple" >
                                        Multiple
                                    </option>

                                
                                    <option value="netbsd_x86" >
                                        NetBSD_x86
                                    </option>

                                
                                    <option value="novell" >
                                        Novell
                                    </option>

                                
                                    <option value="openbsd" >
                                        OpenBSD
                                    </option>

                                
                                    <option value="openbsd_x86" >
                                        OpenBSD_x86
                                    </option>

                                
                                    <option value="osx_ppc" >
                                        OSX_PPC
                                    </option>

                                
                                    <option value="osx" >
                                        OSX
                                    </option>

                                
                                    <option value="php" >
                                        PHP
                                    </option>

                                
                                    <option value="plan9" >
                                        Plan9
                                    </option>

                                
                                    <option value="qnx" >
                                        QNX
                                    </option>

                                
                                    <option value="sco" >
                                        SCO
                                    </option>

                                
                                    <option value="sco_x86" >
                                        SCO_x86
                                    </option>

                                
                                    <option value="solaris" >
                                        Solaris
                                    </option>

                                
                                    <option value="solaris_sparc" >
                                        Solaris_SPARC
                                    </option>

                                
                                    <option value="solaris_x86" >
                                        Solaris_x86
                                    </option>

                                
                                    <option value="tru64" >
                                        Tru64
                                    </option>

                                
                                    <option value="ultrix" >
                                        ULTRIX
                                    </option>

                                
                                    <option value="unix" >
                                        Unix
                                    </option>

                                
                                    <option value="unixware" >
                                        UnixWare
                                    </option>

                                
                                    <option value="windows_x86" >
                                        Windows_x86
                                    </option>

                                
                                    <option value="windows_x86-64" >
                                        Windows_x86-64
                                    </option>

                                
                                    <option value="windows" >
                                        Windows
                                    </option>

                                
                                    <option value="arm" >
                                        ARM
                                    </option>

                                
                                    <option value="cfm" >
                                        CFM
                                    </option>

                                
                                    <option value="netware" >
                                        Netware
                                    </option>

                                
                                    <option value="superh_sh4" >
                                        SuperH_SH4
                                    </option>

                                
                                    <option value="java" >
                                        Java
                                    </option>

                                
                                    <option value="beos" >
                                        BeOS
                                    </option>

                                
                                    <option value="immunix" >
                                        Immunix
                                    </option>

                                
                                    <option value="palm_os" >
                                        Palm_OS
                                    </option>

                                
                                    <option value="atheos" >
                                        AtheOS
                                    </option>

                                
                                    <option value="ios" >
                                        iOS
                                    </option>

                                
                                    <option value="android" >
                                        Android
                                    </option>

                                
                                    <option value="xml" >
                                        XML
                                    </option>

                                
                                    <option value="perl" >
                                        Perl
                                    </option>

                                
                                    <option value="python" >
                                        Python
                                    </option>

                                
                                    <option value="system_z" >
                                        System_z
                                    </option>

                                
                                    <option value="json" >
                                        JSON
                                    </option>

                                
                                    <option value="ashx" >
                                        ASHX
                                    </option>

                                
                                    <option value="ruby" >
                                        Ruby
                                    </option>

                                
                                    <option value="aspx" >
                                        ASPX
                                    </option>

                                
                                    <option value="macos" >
                                        macOS
                                    </option>

                                
                                    <option value="linux_crisv32" >
                                        Linux_CRISv32
                                    </option>

                                
                                    <option value="ezine" >
                                        eZine
                                    </option>

                                
                                    <option value="magazine" >
                                        Magazine
                                    </option>

                                
                                    <option value="nodejs" >
                                        NodeJS
                                    </option>

                                
                                    <option value="alpha" >
                                        Alpha
                                    </option>

                                
                                    <option value="solaris_mips" >
                                        Solaris_MIPS
                                    </option>

                                
                                    <option value="lua" >
                                        Lua
                                    </option>

                                
                                    <option value="watchos" >
                                        watchOS
                                    </option>

                                
                                    <option value="vxworks" >
                                        VxWorks
                                    </option>

                                
                                    <option value="python2" >
                                        Python2
                                    </option>

                                
                                    <option value="python3" >
                                        Python3
                                    </option>

                                
                            </select>

                        </div>

                        <div class="col-sm-6 col-lg-4">

                            <div class="form-group">

                                <label for="authorSearch" class="text-primary">Author</label>

                                <input id="authorSearch" class="form-control" type="text" name="e_author"
                                       placeholder="Author" value="">

                            </div>
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-sm-12 col-lg-6">

                            <div class="form-group">

                                <label for="textSearch" class="control-label text-primary">Content</label>

                                <input id="textSearch" class="form-control" type="text" name="text"
                                       placeholder="Exploit content" value="">

                            </div>

                        </div>

                        <div class="col-sm-6 col-lg-2">

                            <label for="portSearchSelect" class="text-primary">Port</label>

                            <select id="portSearchSelect" name="port" class="form-control">

                                <option></option>
                                
                                    <option value="14" >
                                        14
                                    </option>


                                
                                    <option value="21" >
                                        21
                                    </option>


                                
                                    <option value="22" >
                                        22
                                    </option>


                                
                                    <option value="23" >
                                        23
                                    </option>


                                
                                    <option value="25" >
                                        25
                                    </option>


                                
                                    <option value="42" >
                                        42
                                    </option>


                                
                                    <option value="49" >
                                        49
                                    </option>


                                
                                    <option value="53" >
                                        53
                                    </option>


                                
                                    <option value="66" >
                                        66
                                    </option>


                                
                                    <option value="69" >
                                        69
                                    </option>


                                
                                    <option value="70" >
                                        70
                                    </option>


                                
                                    <option value="79" >
                                        79
                                    </option>


                                
                                    <option value="80" >
                                        80
                                    </option>


                                
                                    <option value="81" >
                                        81
                                    </option>


                                
                                    <option value="102" >
                                        102
                                    </option>


                                
                                    <option value="105" >
                                        105
                                    </option>


                                
                                    <option value="110" >
                                        110
                                    </option>


                                
                                    <option value="111" >
                                        111
                                    </option>


                                
                                    <option value="113" >
                                        113
                                    </option>


                                
                                    <option value="119" >
                                        119
                                    </option>


                                
                                    <option value="123" >
                                        123
                                    </option>


                                
                                    <option value="135" >
                                        135
                                    </option>


                                
                                    <option value="139" >
                                        139
                                    </option>


                                
                                    <option value="143" >
                                        143
                                    </option>


                                
                                    <option value="161" >
                                        161
                                    </option>


                                
                                    <option value="162" >
                                        162
                                    </option>


                                
                                    <option value="164" >
                                        164
                                    </option>


                                
                                    <option value="383" >
                                        383
                                    </option>


                                
                                    <option value="389" >
                                        389
                                    </option>


                                
                                    <option value="402" >
                                        402
                                    </option>


                                
                                    <option value="406" >
                                        406
                                    </option>


                                
                                    <option value="411" >
                                        411
                                    </option>


                                
                                    <option value="443" >
                                        443
                                    </option>


                                
                                    <option value="444" >
                                        444
                                    </option>


                                
                                    <option value="445" >
                                        445
                                    </option>


                                
                                    <option value="446" >
                                        446
                                    </option>


                                
                                    <option value="502" >
                                        502
                                    </option>


                                
                                    <option value="504" >
                                        504
                                    </option>


                                
                                    <option value="513" >
                                        513
                                    </option>


                                
                                    <option value="514" >
                                        514
                                    </option>


                                
                                    <option value="515" >
                                        515
                                    </option>


                                
                                    <option value="532" >
                                        532
                                    </option>


                                
                                    <option value="548" >
                                        548
                                    </option>


                                
                                    <option value="554" >
                                        554
                                    </option>


                                
                                    <option value="555" >
                                        555
                                    </option>


                                
                                    <option value="617" >
                                        617
                                    </option>


                                
                                    <option value="623" >
                                        623
                                    </option>


                                
                                    <option value="631" >
                                        631
                                    </option>


                                
                                    <option value="655" >
                                        655
                                    </option>


                                
                                    <option value="689" >
                                        689
                                    </option>


                                
                                    <option value="783" >
                                        783
                                    </option>


                                
                                    <option value="787" >
                                        787
                                    </option>


                                
                                    <option value="808" >
                                        808
                                    </option>


                                
                                    <option value="873" >
                                        873
                                    </option>


                                
                                    <option value="888" >
                                        888
                                    </option>


                                
                                    <option value="901" >
                                        901
                                    </option>


                                
                                    <option value="998" >
                                        998
                                    </option>


                                
                                    <option value="1000" >
                                        1000
                                    </option>


                                
                                    <option value="1040" >
                                        1040
                                    </option>


                                
                                    <option value="1089" >
                                        1089
                                    </option>


                                
                                    <option value="1099" >
                                        1099
                                    </option>


                                
                                    <option value="1100" >
                                        1100
                                    </option>


                                
                                    <option value="1114" >
                                        1114
                                    </option>


                                
                                    <option value="1120" >
                                        1120
                                    </option>


                                
                                    <option value="1194" >
                                        1194
                                    </option>


                                
                                    <option value="1235" >
                                        1235
                                    </option>


                                
                                    <option value="1471" >
                                        1471
                                    </option>


                                
                                    <option value="1521" >
                                        1521
                                    </option>


                                
                                    <option value="1533" >
                                        1533
                                    </option>


                                
                                    <option value="1581" >
                                        1581
                                    </option>


                                
                                    <option value="1589" >
                                        1589
                                    </option>


                                
                                    <option value="1604" >
                                        1604
                                    </option>


                                
                                    <option value="1617" >
                                        1617
                                    </option>


                                
                                    <option value="1723" >
                                        1723
                                    </option>


                                
                                    <option value="1743" >
                                        1743
                                    </option>


                                
                                    <option value="1761" >
                                        1761
                                    </option>


                                
                                    <option value="1812" >
                                        1812
                                    </option>


                                
                                    <option value="1858" >
                                        1858
                                    </option>


                                
                                    <option value="1861" >
                                        1861
                                    </option>


                                
                                    <option value="1900" >
                                        1900
                                    </option>


                                
                                    <option value="1947" >
                                        1947
                                    </option>


                                
                                    <option value="2000" >
                                        2000
                                    </option>


                                
                                    <option value="2022" >
                                        2022
                                    </option>


                                
                                    <option value="2049" >
                                        2049
                                    </option>


                                
                                    <option value="2100" >
                                        2100
                                    </option>


                                
                                    <option value="2103" >
                                        2103
                                    </option>


                                
                                    <option value="2121" >
                                        2121
                                    </option>


                                
                                    <option value="2125" >
                                        2125
                                    </option>


                                
                                    <option value="2181" >
                                        2181
                                    </option>


                                
                                    <option value="2242" >
                                        2242
                                    </option>


                                
                                    <option value="2315" >
                                        2315
                                    </option>


                                
                                    <option value="2375" >
                                        2375
                                    </option>


                                
                                    <option value="2380" >
                                        2380
                                    </option>


                                
                                    <option value="2381" >
                                        2381
                                    </option>


                                
                                    <option value="2401" >
                                        2401
                                    </option>


                                
                                    <option value="2480" >
                                        2480
                                    </option>


                                
                                    <option value="2525" >
                                        2525
                                    </option>


                                
                                    <option value="2640" >
                                        2640
                                    </option>


                                
                                    <option value="2810" >
                                        2810
                                    </option>


                                
                                    <option value="2812" >
                                        2812
                                    </option>


                                
                                    <option value="2947" >
                                        2947
                                    </option>


                                
                                    <option value="2954" >
                                        2954
                                    </option>


                                
                                    <option value="2990" >
                                        2990
                                    </option>


                                
                                    <option value="3000" >
                                        3000
                                    </option>


                                
                                    <option value="3030" >
                                        3030
                                    </option>


                                
                                    <option value="3050" >
                                        3050
                                    </option>


                                
                                    <option value="3052" >
                                        3052
                                    </option>


                                
                                    <option value="3128" >
                                        3128
                                    </option>


                                
                                    <option value="3129" >
                                        3129
                                    </option>


                                
                                    <option value="3181" >
                                        3181
                                    </option>


                                
                                    <option value="3200" >
                                        3200
                                    </option>


                                
                                    <option value="3217" >
                                        3217
                                    </option>


                                
                                    <option value="3306" >
                                        3306
                                    </option>


                                
                                    <option value="3333" >
                                        3333
                                    </option>


                                
                                    <option value="3378" >
                                        3378
                                    </option>


                                
                                    <option value="3389" >
                                        3389
                                    </option>


                                
                                    <option value="3460" >
                                        3460
                                    </option>


                                
                                    <option value="3465" >
                                        3465
                                    </option>


                                
                                    <option value="3500" >
                                        3500
                                    </option>


                                
                                    <option value="3535" >
                                        3535
                                    </option>


                                
                                    <option value="3632" >
                                        3632
                                    </option>


                                
                                    <option value="3690" >
                                        3690
                                    </option>


                                
                                    <option value="3790" >
                                        3790
                                    </option>


                                
                                    <option value="3814" >
                                        3814
                                    </option>


                                
                                    <option value="3817" >
                                        3817
                                    </option>


                                
                                    <option value="4000" >
                                        4000
                                    </option>


                                
                                    <option value="4002" >
                                        4002
                                    </option>


                                
                                    <option value="4070" >
                                        4070
                                    </option>


                                
                                    <option value="4081" >
                                        4081
                                    </option>


                                
                                    <option value="4105" >
                                        4105
                                    </option>


                                
                                    <option value="4111" >
                                        4111
                                    </option>


                                
                                    <option value="4322" >
                                        4322
                                    </option>


                                
                                    <option value="4343" >
                                        4343
                                    </option>


                                
                                    <option value="4434" >
                                        4434
                                    </option>


                                
                                    <option value="4501" >
                                        4501
                                    </option>


                                
                                    <option value="4555" >
                                        4555
                                    </option>


                                
                                    <option value="4592" >
                                        4592
                                    </option>


                                
                                    <option value="4661" >
                                        4661
                                    </option>


                                
                                    <option value="4750" >
                                        4750
                                    </option>


                                
                                    <option value="4848" >
                                        4848
                                    </option>


                                
                                    <option value="5000" >
                                        5000
                                    </option>


                                
                                    <option value="5060" >
                                        5060
                                    </option>


                                
                                    <option value="5061" >
                                        5061
                                    </option>


                                
                                    <option value="5080" >
                                        5080
                                    </option>


                                
                                    <option value="5081" >
                                        5081
                                    </option>


                                
                                    <option value="5093" >
                                        5093
                                    </option>


                                
                                    <option value="5151" >
                                        5151
                                    </option>


                                
                                    <option value="5180" >
                                        5180
                                    </option>


                                
                                    <option value="5247" >
                                        5247
                                    </option>


                                
                                    <option value="5250" >
                                        5250
                                    </option>


                                
                                    <option value="5272" >
                                        5272
                                    </option>


                                
                                    <option value="5308" >
                                        5308
                                    </option>


                                
                                    <option value="5432" >
                                        5432
                                    </option>


                                
                                    <option value="5466" >
                                        5466
                                    </option>


                                
                                    <option value="5554" >
                                        5554
                                    </option>


                                
                                    <option value="5555" >
                                        5555
                                    </option>


                                
                                    <option value="5600" >
                                        5600
                                    </option>


                                
                                    <option value="5655" >
                                        5655
                                    </option>


                                
                                    <option value="5666" >
                                        5666
                                    </option>


                                
                                    <option value="5800" >
                                        5800
                                    </option>


                                
                                    <option value="5803" >
                                        5803
                                    </option>


                                
                                    <option value="5814" >
                                        5814
                                    </option>


                                
                                    <option value="5858" >
                                        5858
                                    </option>


                                
                                    <option value="5900" >
                                        5900
                                    </option>


                                
                                    <option value="5984" >
                                        5984
                                    </option>


                                
                                    <option value="6066" >
                                        6066
                                    </option>


                                
                                    <option value="6070" >
                                        6070
                                    </option>


                                
                                    <option value="6080" >
                                        6080
                                    </option>


                                
                                    <option value="6082" >
                                        6082
                                    </option>


                                
                                    <option value="6101" >
                                        6101
                                    </option>


                                
                                    <option value="6112" >
                                        6112
                                    </option>


                                
                                    <option value="6129" >
                                        6129
                                    </option>


                                
                                    <option value="6379" >
                                        6379
                                    </option>


                                
                                    <option value="6502" >
                                        6502
                                    </option>


                                
                                    <option value="6503" >
                                        6503
                                    </option>


                                
                                    <option value="6660" >
                                        6660
                                    </option>


                                
                                    <option value="6667" >
                                        6667
                                    </option>


                                
                                    <option value="7001" >
                                        7001
                                    </option>


                                
                                    <option value="7002" >
                                        7002
                                    </option>


                                
                                    <option value="7070" >
                                        7070
                                    </option>


                                
                                    <option value="7071" >
                                        7071
                                    </option>


                                
                                    <option value="7080" >
                                        7080
                                    </option>


                                
                                    <option value="7100" >
                                        7100
                                    </option>


                                
                                    <option value="7144" >
                                        7144
                                    </option>


                                
                                    <option value="7210" >
                                        7210
                                    </option>


                                
                                    <option value="7272" >
                                        7272
                                    </option>


                                
                                    <option value="7290" >
                                        7290
                                    </option>


                                
                                    <option value="7426" >
                                        7426
                                    </option>


                                
                                    <option value="7443" >
                                        7443
                                    </option>


                                
                                    <option value="7510" >
                                        7510
                                    </option>


                                
                                    <option value="7547" >
                                        7547
                                    </option>


                                
                                    <option value="7649" >
                                        7649
                                    </option>


                                
                                    <option value="7770" >
                                        7770
                                    </option>


                                
                                    <option value="7777" >
                                        7777
                                    </option>


                                
                                    <option value="7778" >
                                        7778
                                    </option>


                                
                                    <option value="7787" >
                                        7787
                                    </option>


                                
                                    <option value="7879" >
                                        7879
                                    </option>


                                
                                    <option value="7902" >
                                        7902
                                    </option>


                                
                                    <option value="8000" >
                                        8000
                                    </option>


                                
                                    <option value="8001" >
                                        8001
                                    </option>


                                
                                    <option value="8002" >
                                        8002
                                    </option>


                                
                                    <option value="8004" >
                                        8004
                                    </option>


                                
                                    <option value="8008" >
                                        8008
                                    </option>


                                
                                    <option value="8020" >
                                        8020
                                    </option>


                                
                                    <option value="8022" >
                                        8022
                                    </option>


                                
                                    <option value="8023" >
                                        8023
                                    </option>


                                
                                    <option value="8028" >
                                        8028
                                    </option>


                                
                                    <option value="8030" >
                                        8030
                                    </option>


                                
                                    <option value="8080" >
                                        8080
                                    </option>


                                
                                    <option value="8081" >
                                        8081
                                    </option>


                                
                                    <option value="8082" >
                                        8082
                                    </option>


                                
                                    <option value="8088" >
                                        8088
                                    </option>


                                
                                    <option value="8090" >
                                        8090
                                    </option>


                                
                                    <option value="8181" >
                                        8181
                                    </option>


                                
                                    <option value="8300" >
                                        8300
                                    </option>


                                
                                    <option value="8400" >
                                        8400
                                    </option>


                                
                                    <option value="8443" >
                                        8443
                                    </option>


                                
                                    <option value="8445" >
                                        8445
                                    </option>


                                
                                    <option value="8473" >
                                        8473
                                    </option>


                                
                                    <option value="8500" >
                                        8500
                                    </option>


                                
                                    <option value="8585" >
                                        8585
                                    </option>


                                
                                    <option value="8619" >
                                        8619
                                    </option>


                                
                                    <option value="8800" >
                                        8800
                                    </option>


                                
                                    <option value="8812" >
                                        8812
                                    </option>


                                
                                    <option value="8839" >
                                        8839
                                    </option>


                                
                                    <option value="8880" >
                                        8880
                                    </option>


                                
                                    <option value="8888" >
                                        8888
                                    </option>


                                
                                    <option value="9000" >
                                        9000
                                    </option>


                                
                                    <option value="9001" >
                                        9001
                                    </option>


                                
                                    <option value="9002" >
                                        9002
                                    </option>


                                
                                    <option value="9080" >
                                        9080
                                    </option>


                                
                                    <option value="9090" >
                                        9090
                                    </option>


                                
                                    <option value="9091" >
                                        9091
                                    </option>


                                
                                    <option value="9100" >
                                        9100
                                    </option>


                                
                                    <option value="9124" >
                                        9124
                                    </option>


                                
                                    <option value="9200" >
                                        9200
                                    </option>


                                
                                    <option value="9251" >
                                        9251
                                    </option>


                                
                                    <option value="9256" >
                                        9256
                                    </option>


                                
                                    <option value="9443" >
                                        9443
                                    </option>


                                
                                    <option value="9447" >
                                        9447
                                    </option>


                                
                                    <option value="9784" >
                                        9784
                                    </option>


                                
                                    <option value="9788" >
                                        9788
                                    </option>


                                
                                    <option value="9855" >
                                        9855
                                    </option>


                                
                                    <option value="9876" >
                                        9876
                                    </option>


                                
                                    <option value="9900" >
                                        9900
                                    </option>


                                
                                    <option value="9987" >
                                        9987
                                    </option>


                                
                                    <option value="9993" >
                                        9993
                                    </option>


                                
                                    <option value="9999" >
                                        9999
                                    </option>


                                
                                    <option value="10000" >
                                        10000
                                    </option>


                                
                                    <option value="10001" >
                                        10001
                                    </option>


                                
                                    <option value="10080" >
                                        10080
                                    </option>


                                
                                    <option value="10202" >
                                        10202
                                    </option>


                                
                                    <option value="10203" >
                                        10203
                                    </option>


                                
                                    <option value="10443" >
                                        10443
                                    </option>


                                
                                    <option value="10616" >
                                        10616
                                    </option>


                                
                                    <option value="11000" >
                                        11000
                                    </option>


                                
                                    <option value="11211" >
                                        11211
                                    </option>


                                
                                    <option value="11460" >
                                        11460
                                    </option>


                                
                                    <option value="12203" >
                                        12203
                                    </option>


                                
                                    <option value="12221" >
                                        12221
                                    </option>


                                
                                    <option value="12345" >
                                        12345
                                    </option>


                                
                                    <option value="12397" >
                                        12397
                                    </option>


                                
                                    <option value="12401" >
                                        12401
                                    </option>


                                
                                    <option value="13327" >
                                        13327
                                    </option>


                                
                                    <option value="13701" >
                                        13701
                                    </option>


                                
                                    <option value="13722" >
                                        13722
                                    </option>


                                
                                    <option value="13838" >
                                        13838
                                    </option>


                                
                                    <option value="16992" >
                                        16992
                                    </option>


                                
                                    <option value="18821" >
                                        18821
                                    </option>


                                
                                    <option value="18881" >
                                        18881
                                    </option>


                                
                                    <option value="19000" >
                                        19000
                                    </option>


                                
                                    <option value="19810" >
                                        19810
                                    </option>


                                
                                    <option value="19813" >
                                        19813
                                    </option>


                                
                                    <option value="20000" >
                                        20000
                                    </option>


                                
                                    <option value="20002" >
                                        20002
                                    </option>


                                
                                    <option value="20010" >
                                        20010
                                    </option>


                                
                                    <option value="20031" >
                                        20031
                                    </option>


                                
                                    <option value="20111" >
                                        20111
                                    </option>


                                
                                    <option value="20171" >
                                        20171
                                    </option>


                                
                                    <option value="22003" >
                                        22003
                                    </option>


                                
                                    <option value="23423" >
                                        23423
                                    </option>


                                
                                    <option value="25672" >
                                        25672
                                    </option>


                                
                                    <option value="26000" >
                                        26000
                                    </option>


                                
                                    <option value="27015" >
                                        27015
                                    </option>


                                
                                    <option value="27700" >
                                        27700
                                    </option>


                                
                                    <option value="28015" >
                                        28015
                                    </option>


                                
                                    <option value="30000" >
                                        30000
                                    </option>


                                
                                    <option value="30303" >
                                        30303
                                    </option>


                                
                                    <option value="31337" >
                                        31337
                                    </option>


                                
                                    <option value="32400" >
                                        32400
                                    </option>


                                
                                    <option value="32674" >
                                        32674
                                    </option>


                                
                                    <option value="32764" >
                                        32764
                                    </option>


                                
                                    <option value="34205" >
                                        34205
                                    </option>


                                
                                    <option value="37215" >
                                        37215
                                    </option>


                                
                                    <option value="37777" >
                                        37777
                                    </option>


                                
                                    <option value="37848" >
                                        37848
                                    </option>


                                
                                    <option value="38292" >
                                        38292
                                    </option>


                                
                                    <option value="40007" >
                                        40007
                                    </option>


                                
                                    <option value="41523" >
                                        41523
                                    </option>


                                
                                    <option value="44334" >
                                        44334
                                    </option>


                                
                                    <option value="46824" >
                                        46824
                                    </option>


                                
                                    <option value="48080" >
                                        48080
                                    </option>


                                
                                    <option value="49152" >
                                        49152
                                    </option>


                                
                                    <option value="50000" >
                                        50000
                                    </option>


                                
                                    <option value="50496" >
                                        50496
                                    </option>


                                
                                    <option value="52311" >
                                        52311
                                    </option>


                                
                                    <option value="52789" >
                                        52789
                                    </option>


                                
                                    <option value="52869" >
                                        52869
                                    </option>


                                
                                    <option value="52986" >
                                        52986
                                    </option>


                                
                                    <option value="53413" >
                                        53413
                                    </option>


                                
                                    <option value="54345" >
                                        54345
                                    </option>


                                
                                    <option value="54890" >
                                        54890
                                    </option>


                                
                                    <option value="55554" >
                                        55554
                                    </option>


                                
                                    <option value="55555" >
                                        55555
                                    </option>


                                
                                    <option value="56380" >
                                        56380
                                    </option>


                                
                                    <option value="57772" >
                                        57772
                                    </option>


                                
                                    <option value="58080" >
                                        58080
                                    </option>


                                
                                    <option value="62514" >
                                        62514
                                    </option>


                                
                            </select>

                        </div>

                        <div class="col-sm-6 col-lg-4">

                            <label for="tagSearchSelect" class="text-primary">Tag</label>

                            <select id="tagSearchSelect" name="tag" class="form-control">

                                <option></option>
                                
                                    <option value="1" >
                                        WordPress Core
                                    </option>


                                
                                    <option value="3" >
                                        Metasploit Framework (MSF)
                                    </option>


                                
                                    <option value="4" >
                                        WordPress Plugin
                                    </option>


                                
                                    <option value="7" >
                                        SQL Injection (SQLi)
                                    </option>


                                
                                    <option value="8" >
                                        Cross-Site Scripting (XSS)
                                    </option>


                                
                                    <option value="9" >
                                        File Inclusion (LFI/RFI)
                                    </option>


                                
                                    <option value="12" >
                                        Cross-Site Request Forgery (CSRF)
                                    </option>


                                
                                    <option value="13" >
                                        Denial of Service (DoS)
                                    </option>


                                
                                    <option value="14" >
                                        Code Injection
                                    </option>


                                
                                    <option value="15" >
                                        Command Injection
                                    </option>


                                
                                    <option value="16" >
                                        Authentication Bypass / Credentials Bypass (AB/CB)
                                    </option>


                                
                                    <option value="18" >
                                        Client Side
                                    </option>


                                
                                    <option value="19" >
                                        Use After Free (UAF)
                                    </option>


                                
                                    <option value="20" >
                                        Out Of Bounds
                                    </option>


                                
                                    <option value="21" >
                                        Remote
                                    </option>


                                
                                    <option value="22" >
                                        Local
                                    </option>


                                
                                    <option value="23" >
                                        XML External Entity (XXE)
                                    </option>


                                
                                    <option value="24" >
                                        Integer Overflow
                                    </option>


                                
                                    <option value="25" >
                                        Server-Side Request Forgery (SSRF)
                                    </option>


                                
                                    <option value="26" >
                                        Race Condition
                                    </option>


                                
                                    <option value="27" >
                                        NULL Pointer Dereference
                                    </option>


                                
                                    <option value="28" >
                                        Malware
                                    </option>


                                
                                    <option value="31" >
                                        Buffer Overflow
                                    </option>


                                
                                    <option value="34" >
                                        Heap Overflow
                                    </option>


                                
                                    <option value="35" >
                                        Type Confusion
                                    </option>


                                
                                    <option value="36" >
                                        Object Injection
                                    </option>


                                
                                    <option value="37" >
                                        Bug Report
                                    </option>


                                
                                    <option value="38" >
                                        Console
                                    </option>


                                
                                    <option value="39" >
                                        Pwn2Own
                                    </option>


                                
                                    <option value="40" >
                                        Traversal
                                    </option>


                                
                                    <option value="41" >
                                        Deserialization
                                    </option>


                                
                            </select>

                        </div>

                    </div>

                    <div class="row">

                        <div class="col-12">

                            <div class="form-check form-check-inline">

                                <label class="form-check-label text-primary">

                                    <input class="form-check-input" type="checkbox"
                                           name="verified" value="true"
                                           id="verifiedSearchCheck"   >
                                    Verified

                                    <span class="form-check-sign">
                                        <span class="check"></span>
                                    </span>

                                </label>

                            </div>

                            <div class="form-check form-check-inline">

                                <label class="form-check-label text-primary">
                                    <input class="form-check-input" type="checkbox"
                                           name="hasapp" value="true"
                                           id="hasappSearchCheck" >
                                    Has App

                                    <span class="form-check-sign">
                                        <span class="check"></span>
                                    </span>

                                </label>

                            </div>

                            <div class="form-check form-check-inline">

                                <label class="form-check-label text-primary">
                                    <input class="form-check-input" type="checkbox"
                                           name="nomsf" value="true"
                                           id="nomsfCheck" >
                                    No Metasploit

                                    <span class="form-check-sign">
                                        <span class="check"></span>
                                    </span>

                                </label>

                            </div>

                        </div>

                    </div>

                    <div class="row">

                        <div class="col-12">

                            <button type="submit" class="btn btn-primary float-right">Search</button>

                        </div>

                    </div>

                </form>


            </div>

        </div>

    </div>

</div>

</footer>

    </div>

</div>

</body>

<!--   Make the default DataTables search field larger   -->
<style type="text/css">
    .dataTables_filter input {
        font-size: 16px;
    }
</style>

<!--   Core JS Files   -->
<script src="/js/core/jquery.min.js"></script>
<script src="/js/core/popper.min.js"></script>
<script src="/js/core/bootstrap.min.js"></script>

<script src="/js/plugins/perfect-scrollbar.jquery.min.js"></script>
<script src="/js/plugins/moment.min.js"></script>

<!-- Forms Validations Plugin -->
<script src="/js/plugins/jquery.validate.min.js"></script>

<!--  DataTables.net Plugin, full documentation here:
https://datatables.net/    -->
<script src="/js/plugins/jquery.dataTables.min.js"></script>

<!--  Notifications Plugin    -->
<script src="/js/plugins/bootstrap-notify.js"></script>

<!-- Control Center for Now Ui Dashboard: parallax effects,
scripts for the example pages etc -->
<script src="/js/now-ui-dashboard.js"></script>

<script src="/js/selectize.min.js"></script>

<script src="/js/app.js"></script>
<script src="/js/appfunctions.js"></script>


<script>
    window.addEventListener('popstate', () => {
        location.reload();
    }, false);

    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })

    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }


    function removeURLParameter(url, parameter) {
        //prefer to use l.search if you have a location/link object
        var urlparts= url.split('?');
        if (urlparts.length>=2) {

            var prefix= encodeURIComponent(parameter)+'=';
            var pars= urlparts[1].split(/[&;]/g);

            //reverse iteration as may be destructive
            for (var i= pars.length; i-- > 0;) {
                //idiom for string.startsWith
                if (pars[i].lastIndexOf(prefix, 0) !== -1) {
                    pars.splice(i, 1);
                }
            }

            url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");
            window.history.pushState('', document.title, url);
            return url;
        } else {
            window.history.pushState('', document.title, url);
            return url;
        }
    }

    function showFilters() {
        var x = document.getElementById("exploitFiltersCard");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }

    function updateQueryString(key, value, url) {
        if (!url) url = window.location.href;
        var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
            hash;

        if (re.test(url)) {
            if (typeof value !== 'undefined' && value !== null)
                return url.replace(re, '$1' + key + "=" + value + '$2$3');
            else {
                hash = url.split('#');
                url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                if (typeof hash[1] !== 'undefined' && hash[1] !== null)
                    url += '#' + hash[1];

                window.history.pushState('', document.title, url);
                return url;
            }
        }
        else {
            if (typeof value !== 'undefined' && value !== null) {
                var separator = url.indexOf('?') !== -1 ? '&' : '?';
                hash = url.split('#');
                url = hash[0] + separator + key + '=' + value;
                if (typeof hash[1] !== 'undefined' && hash[1] !== null)
                    url += '#' + hash[1];

                window.history.pushState('', document.title, url);
                return url;
            }
            else
                window.history.pushState('', document.title, url);
                return url;
        }
    }

    $('#search').submit(function() {
        $(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");
        return true; // ensure form still submits
    });

    // Un-disable form fields when page loads, in case they click back after submission
    $('#search').find( ":input" ).prop( "disabled", false );

    // If the ajax call fails, throw the error to the console instead of
    // popping up an alert to the user
    $.fn.dataTable.ext.errMode = 'throw';

</script>

<!-- App scripts -->



</html>
